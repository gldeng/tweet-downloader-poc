// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An Engagement Api Response.
    /// </summary>
    public partial class Engagement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Engagement" /> class.
        /// </summary>
        /// <param name="errors">errors</param>
        /// <param name="measurement">measurement</param>
        [JsonConstructor]
        public Engagement(Option<List<EngagementErrorsInner>?> errors = default, Option<EngagementMeasurement?> measurement = default)
        {
            ErrorsOption = errors;
            MeasurementOption = measurement;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Errors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EngagementErrorsInner>?> ErrorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [JsonPropertyName("errors")]
        public List<EngagementErrorsInner>? Errors { get { return this.ErrorsOption; } set { this.ErrorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Measurement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EngagementMeasurement?> MeasurementOption { get; private set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [JsonPropertyName("measurement")]
        public EngagementMeasurement? Measurement { get { return this.MeasurementOption; } set { this.MeasurementOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Engagement {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Engagement" />
    /// </summary>
    public class EngagementJsonConverter : JsonConverter<Engagement>
    {
        /// <summary>
        /// Deserializes json to <see cref="Engagement" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Engagement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EngagementErrorsInner>?> errors = default;
            Option<EngagementMeasurement?> measurement = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "errors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                errors = new Option<List<EngagementErrorsInner>?>(JsonSerializer.Deserialize<List<EngagementErrorsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "measurement":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                measurement = new Option<EngagementMeasurement?>(JsonSerializer.Deserialize<EngagementMeasurement>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class Engagement.");

            if (measurement.IsSet && measurement.Value == null)
                throw new ArgumentNullException(nameof(measurement), "Property is not nullable for class Engagement.");

            return new Engagement(errors, measurement);
        }

        /// <summary>
        /// Serializes a <see cref="Engagement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Engagement engagement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, engagement, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Engagement" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Engagement engagement, JsonSerializerOptions jsonSerializerOptions)
        {
            if (engagement.ErrorsOption.IsSet && engagement.Errors == null)
                throw new ArgumentNullException(nameof(engagement.Errors), "Property is required for class Engagement.");

            if (engagement.MeasurementOption.IsSet && engagement.Measurement == null)
                throw new ArgumentNullException(nameof(engagement.Measurement), "Property is required for class Engagement.");

            if (engagement.ErrorsOption.IsSet)
            {
                writer.WritePropertyName("errors");
                JsonSerializer.Serialize(writer, engagement.Errors, jsonSerializerOptions);
            }
            if (engagement.MeasurementOption.IsSet)
            {
                writer.WritePropertyName("measurement");
                JsonSerializer.Serialize(writer, engagement.Measurement, jsonSerializerOptions);
            }
        }
    }
}
