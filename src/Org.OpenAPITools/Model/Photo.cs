// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Photo
    /// </summary>
    public partial class Photo : Media, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Photo" /> class.
        /// </summary>
        /// <param name="height">The height of the media in pixels.</param>
        /// <param name="mediaKey">The Media Key identifier for this attachment.</param>
        /// <param name="width">The width of the media in pixels.</param>
        /// <param name="altText">altText</param>
        /// <param name="url">url</param>
        [JsonConstructor]
        public Photo(Option<int?> height = default, Option<string?> mediaKey = default, Option<int?> width = default, Option<string?> altText = default, Option<string?> url = default) : base(height, mediaKey, width)
        {
            AltTextOption = altText;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AltText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AltTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets AltText
        /// </summary>
        [JsonPropertyName("alt_text")]
        public string? AltText { get { return this.AltTextOption; } set { this.AltTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Photo {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AltText: ").Append(AltText).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Photo" />
    /// </summary>
    public class PhotoJsonConverter : JsonConverter<Photo>
    {
        /// <summary>
        /// Deserializes json to <see cref="Photo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Photo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<int?> height = default;
            Option<string?> mediaKey = default;
            Option<int?> width = default;
            Option<string?> altText = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "media_key":
                            mediaKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "alt_text":
                            altText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Photo.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Photo.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class Photo.");

            if (mediaKey.IsSet && mediaKey.Value == null)
                throw new ArgumentNullException(nameof(mediaKey), "Property is not nullable for class Photo.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class Photo.");

            if (altText.IsSet && altText.Value == null)
                throw new ArgumentNullException(nameof(altText), "Property is not nullable for class Photo.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class Photo.");

            return new Photo(height, mediaKey, width, altText, url);
        }

        /// <summary>
        /// Serializes a <see cref="Photo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="photo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Photo photo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, photo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Photo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="photo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Photo photo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (photo.MediaKeyOption.IsSet && photo.MediaKey == null)
                throw new ArgumentNullException(nameof(photo.MediaKey), "Property is required for class Photo.");

            if (photo.AltTextOption.IsSet && photo.AltText == null)
                throw new ArgumentNullException(nameof(photo.AltText), "Property is required for class Photo.");

            if (photo.UrlOption.IsSet && photo.Url == null)
                throw new ArgumentNullException(nameof(photo.Url), "Property is required for class Photo.");

            writer.WriteString("type", photo.Type);

            if (photo.HeightOption.IsSet)
                writer.WriteNumber("height", photo.HeightOption.Value!.Value);

            if (photo.MediaKeyOption.IsSet)
                writer.WriteString("media_key", photo.MediaKey);

            if (photo.WidthOption.IsSet)
                writer.WriteNumber("width", photo.WidthOption.Value!.Value);

            if (photo.AltTextOption.IsSet)
                writer.WriteString("alt_text", photo.AltText);

            if (photo.UrlOption.IsSet)
                writer.WriteString("url", photo.Url);
        }
    }
}
