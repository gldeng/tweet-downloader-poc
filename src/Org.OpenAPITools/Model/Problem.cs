// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
    /// </summary>
    public partial class Problem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Problem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public Problem(string title, Option<string?> detail = default, Option<int?> status = default)
        {
            Title = title;
            Type = this.GetType().Name;
            DetailOption = detail;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public string Type { get; }

        /// <summary>
        /// Used to track the state of Detail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DetailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [JsonPropertyName("detail")]
        public string? Detail { get { return this.DetailOption; } set { this.DetailOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Problem {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Problem" />
    /// </summary>
    public class ProblemJsonConverter : JsonConverter<Problem>
    {
        /// <summary>
        /// Deserializes json to <see cref="Problem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Problem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> detail = default;
            Option<int?> status = default;

            string? discriminator = ClientUtils.GetDiscriminator(utf8JsonReader, "type");

            if (discriminator != null && discriminator.Equals("ClientDisconnectedProblem"))
                return JsonSerializer.Deserialize<ClientDisconnectedProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ClientForbiddenProblem"))
                return JsonSerializer.Deserialize<ClientForbiddenProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ConflictProblem"))
                return JsonSerializer.Deserialize<ConflictProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ConnectionExceptionProblem"))
                return JsonSerializer.Deserialize<ConnectionExceptionProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DisallowedResourceProblem"))
                return JsonSerializer.Deserialize<DisallowedResourceProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("DuplicateRuleProblem"))
                return JsonSerializer.Deserialize<DuplicateRuleProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("FieldUnauthorizedProblem"))
                return JsonSerializer.Deserialize<FieldUnauthorizedProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("GenericProblem"))
                return JsonSerializer.Deserialize<GenericProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("InvalidRequestProblem"))
                return JsonSerializer.Deserialize<InvalidRequestProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("InvalidRuleProblem"))
                return JsonSerializer.Deserialize<InvalidRuleProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("NonCompliantRulesProblem"))
                return JsonSerializer.Deserialize<NonCompliantRulesProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("Oauth1PermissionsProblem"))
                return JsonSerializer.Deserialize<Oauth1PermissionsProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("OperationalDisconnectProblem"))
                return JsonSerializer.Deserialize<OperationalDisconnectProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ResourceNotFoundProblem"))
                return JsonSerializer.Deserialize<ResourceNotFoundProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ResourceUnauthorizedProblem"))
                return JsonSerializer.Deserialize<ResourceUnauthorizedProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("ResourceUnavailableProblem"))
                return JsonSerializer.Deserialize<ResourceUnavailableProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("RulesCapProblem"))
                return JsonSerializer.Deserialize<RulesCapProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("UnsupportedAuthenticationProblem"))
                return JsonSerializer.Deserialize<UnsupportedAuthenticationProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("UsageCapExceededProblem"))
                return JsonSerializer.Deserialize<UsageCapExceededProblem>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Problem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Problem.", nameof(type));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Problem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Problem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class Problem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Problem.");

            return new Problem(title.Value!, detail, status);
        }

        /// <summary>
        /// Serializes a <see cref="Problem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="problem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Problem problem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (problem is ClientDisconnectedProblem clientDisconnectedProblem){
                JsonSerializer.Serialize<ClientDisconnectedProblem>(writer, clientDisconnectedProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ClientForbiddenProblem clientForbiddenProblem){
                JsonSerializer.Serialize<ClientForbiddenProblem>(writer, clientForbiddenProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ConflictProblem conflictProblem){
                JsonSerializer.Serialize<ConflictProblem>(writer, conflictProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ConnectionExceptionProblem connectionExceptionProblem){
                JsonSerializer.Serialize<ConnectionExceptionProblem>(writer, connectionExceptionProblem, jsonSerializerOptions);
                return;
            }

            if (problem is DisallowedResourceProblem disallowedResourceProblem){
                JsonSerializer.Serialize<DisallowedResourceProblem>(writer, disallowedResourceProblem, jsonSerializerOptions);
                return;
            }

            if (problem is DuplicateRuleProblem duplicateRuleProblem){
                JsonSerializer.Serialize<DuplicateRuleProblem>(writer, duplicateRuleProblem, jsonSerializerOptions);
                return;
            }

            if (problem is FieldUnauthorizedProblem fieldUnauthorizedProblem){
                JsonSerializer.Serialize<FieldUnauthorizedProblem>(writer, fieldUnauthorizedProblem, jsonSerializerOptions);
                return;
            }

            if (problem is GenericProblem genericProblem){
                JsonSerializer.Serialize<GenericProblem>(writer, genericProblem, jsonSerializerOptions);
                return;
            }

            if (problem is InvalidRequestProblem invalidRequestProblem){
                JsonSerializer.Serialize<InvalidRequestProblem>(writer, invalidRequestProblem, jsonSerializerOptions);
                return;
            }

            if (problem is InvalidRuleProblem invalidRuleProblem){
                JsonSerializer.Serialize<InvalidRuleProblem>(writer, invalidRuleProblem, jsonSerializerOptions);
                return;
            }

            if (problem is NonCompliantRulesProblem nonCompliantRulesProblem){
                JsonSerializer.Serialize<NonCompliantRulesProblem>(writer, nonCompliantRulesProblem, jsonSerializerOptions);
                return;
            }

            if (problem is Oauth1PermissionsProblem oauth1PermissionsProblem){
                JsonSerializer.Serialize<Oauth1PermissionsProblem>(writer, oauth1PermissionsProblem, jsonSerializerOptions);
                return;
            }

            if (problem is OperationalDisconnectProblem operationalDisconnectProblem){
                JsonSerializer.Serialize<OperationalDisconnectProblem>(writer, operationalDisconnectProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ResourceNotFoundProblem resourceNotFoundProblem){
                JsonSerializer.Serialize<ResourceNotFoundProblem>(writer, resourceNotFoundProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ResourceUnauthorizedProblem resourceUnauthorizedProblem){
                JsonSerializer.Serialize<ResourceUnauthorizedProblem>(writer, resourceUnauthorizedProblem, jsonSerializerOptions);
                return;
            }

            if (problem is ResourceUnavailableProblem resourceUnavailableProblem){
                JsonSerializer.Serialize<ResourceUnavailableProblem>(writer, resourceUnavailableProblem, jsonSerializerOptions);
                return;
            }

            if (problem is RulesCapProblem rulesCapProblem){
                JsonSerializer.Serialize<RulesCapProblem>(writer, rulesCapProblem, jsonSerializerOptions);
                return;
            }

            if (problem is UnsupportedAuthenticationProblem unsupportedAuthenticationProblem){
                JsonSerializer.Serialize<UnsupportedAuthenticationProblem>(writer, unsupportedAuthenticationProblem, jsonSerializerOptions);
                return;
            }

            if (problem is UsageCapExceededProblem usageCapExceededProblem){
                JsonSerializer.Serialize<UsageCapExceededProblem>(writer, usageCapExceededProblem, jsonSerializerOptions);
                return;
            }

            writer.WriteStartObject();

            WriteProperties(writer, problem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Problem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="problem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Problem problem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (problem.Title == null)
                throw new ArgumentNullException(nameof(problem.Title), "Property is required for class Problem.");

            if (problem.DetailOption.IsSet && problem.Detail == null)
                throw new ArgumentNullException(nameof(problem.Detail), "Property is required for class Problem.");

            writer.WriteString("title", problem.Title);

            writer.WriteString("type", problem.Type);

            if (problem.DetailOption.IsSet)
                writer.WriteString("detail", problem.Detail);

            if (problem.StatusOption.IsSet)
                writer.WriteNumber("status", problem.StatusOption.Value!.Value);
        }
    }
}
