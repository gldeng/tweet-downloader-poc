// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Usage per client app
    /// </summary>
    public partial class Usage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Usage" /> class.
        /// </summary>
        /// <param name="capResetDay">Number of days left for the Tweet cap to reset</param>
        /// <param name="dailyClientAppUsage">The daily usage breakdown for each Client Application a project</param>
        /// <param name="dailyProjectUsage">dailyProjectUsage</param>
        /// <param name="projectCap">Total number of Posts that can be read in this project per month</param>
        /// <param name="projectId">The unique identifier for this project</param>
        /// <param name="projectUsage">The number of Posts read in this project</param>
        [JsonConstructor]
        public Usage(Option<int?> capResetDay = default, Option<List<ClientAppUsage>?> dailyClientAppUsage = default, Option<UsageDailyProjectUsage?> dailyProjectUsage = default, Option<int?> projectCap = default, Option<string?> projectId = default, Option<int?> projectUsage = default)
        {
            CapResetDayOption = capResetDay;
            DailyClientAppUsageOption = dailyClientAppUsage;
            DailyProjectUsageOption = dailyProjectUsage;
            ProjectCapOption = projectCap;
            ProjectIdOption = projectId;
            ProjectUsageOption = projectUsage;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CapResetDay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CapResetDayOption { get; private set; }

        /// <summary>
        /// Number of days left for the Tweet cap to reset
        /// </summary>
        /// <value>Number of days left for the Tweet cap to reset</value>
        [JsonPropertyName("cap_reset_day")]
        public int? CapResetDay { get { return this.CapResetDayOption; } set { this.CapResetDayOption = new(value); } }

        /// <summary>
        /// Used to track the state of DailyClientAppUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ClientAppUsage>?> DailyClientAppUsageOption { get; private set; }

        /// <summary>
        /// The daily usage breakdown for each Client Application a project
        /// </summary>
        /// <value>The daily usage breakdown for each Client Application a project</value>
        [JsonPropertyName("daily_client_app_usage")]
        public List<ClientAppUsage>? DailyClientAppUsage { get { return this.DailyClientAppUsageOption; } set { this.DailyClientAppUsageOption = new(value); } }

        /// <summary>
        /// Used to track the state of DailyProjectUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UsageDailyProjectUsage?> DailyProjectUsageOption { get; private set; }

        /// <summary>
        /// Gets or Sets DailyProjectUsage
        /// </summary>
        [JsonPropertyName("daily_project_usage")]
        public UsageDailyProjectUsage? DailyProjectUsage { get { return this.DailyProjectUsageOption; } set { this.DailyProjectUsageOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectCap
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProjectCapOption { get; private set; }

        /// <summary>
        /// Total number of Posts that can be read in this project per month
        /// </summary>
        /// <value>Total number of Posts that can be read in this project per month</value>
        [JsonPropertyName("project_cap")]
        public int? ProjectCap { get { return this.ProjectCapOption; } set { this.ProjectCapOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProjectIdOption { get; private set; }

        /// <summary>
        /// The unique identifier for this project
        /// </summary>
        /// <value>The unique identifier for this project</value>
        [JsonPropertyName("project_id")]
        public string? ProjectId { get { return this.ProjectIdOption; } set { this.ProjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectUsage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProjectUsageOption { get; private set; }

        /// <summary>
        /// The number of Posts read in this project
        /// </summary>
        /// <value>The number of Posts read in this project</value>
        [JsonPropertyName("project_usage")]
        public int? ProjectUsage { get { return this.ProjectUsageOption; } set { this.ProjectUsageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Usage {\n");
            sb.Append("  CapResetDay: ").Append(CapResetDay).Append("\n");
            sb.Append("  DailyClientAppUsage: ").Append(DailyClientAppUsage).Append("\n");
            sb.Append("  DailyProjectUsage: ").Append(DailyProjectUsage).Append("\n");
            sb.Append("  ProjectCap: ").Append(ProjectCap).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectUsage: ").Append(ProjectUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Usage" />
    /// </summary>
    public class UsageJsonConverter : JsonConverter<Usage>
    {
        /// <summary>
        /// Deserializes json to <see cref="Usage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Usage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> capResetDay = default;
            Option<List<ClientAppUsage>?> dailyClientAppUsage = default;
            Option<UsageDailyProjectUsage?> dailyProjectUsage = default;
            Option<int?> projectCap = default;
            Option<string?> projectId = default;
            Option<int?> projectUsage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cap_reset_day":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                capResetDay = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "daily_client_app_usage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dailyClientAppUsage = new Option<List<ClientAppUsage>?>(JsonSerializer.Deserialize<List<ClientAppUsage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "daily_project_usage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dailyProjectUsage = new Option<UsageDailyProjectUsage?>(JsonSerializer.Deserialize<UsageDailyProjectUsage>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "project_cap":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectCap = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "project_id":
                            projectId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "project_usage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectUsage = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (capResetDay.IsSet && capResetDay.Value == null)
                throw new ArgumentNullException(nameof(capResetDay), "Property is not nullable for class Usage.");

            if (dailyClientAppUsage.IsSet && dailyClientAppUsage.Value == null)
                throw new ArgumentNullException(nameof(dailyClientAppUsage), "Property is not nullable for class Usage.");

            if (dailyProjectUsage.IsSet && dailyProjectUsage.Value == null)
                throw new ArgumentNullException(nameof(dailyProjectUsage), "Property is not nullable for class Usage.");

            if (projectCap.IsSet && projectCap.Value == null)
                throw new ArgumentNullException(nameof(projectCap), "Property is not nullable for class Usage.");

            if (projectId.IsSet && projectId.Value == null)
                throw new ArgumentNullException(nameof(projectId), "Property is not nullable for class Usage.");

            if (projectUsage.IsSet && projectUsage.Value == null)
                throw new ArgumentNullException(nameof(projectUsage), "Property is not nullable for class Usage.");

            return new Usage(capResetDay, dailyClientAppUsage, dailyProjectUsage, projectCap, projectId, projectUsage);
        }

        /// <summary>
        /// Serializes a <see cref="Usage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Usage usage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, usage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Usage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Usage usage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (usage.DailyClientAppUsageOption.IsSet && usage.DailyClientAppUsage == null)
                throw new ArgumentNullException(nameof(usage.DailyClientAppUsage), "Property is required for class Usage.");

            if (usage.DailyProjectUsageOption.IsSet && usage.DailyProjectUsage == null)
                throw new ArgumentNullException(nameof(usage.DailyProjectUsage), "Property is required for class Usage.");

            if (usage.ProjectIdOption.IsSet && usage.ProjectId == null)
                throw new ArgumentNullException(nameof(usage.ProjectId), "Property is required for class Usage.");

            if (usage.CapResetDayOption.IsSet)
                writer.WriteNumber("cap_reset_day", usage.CapResetDayOption.Value!.Value);

            if (usage.DailyClientAppUsageOption.IsSet)
            {
                writer.WritePropertyName("daily_client_app_usage");
                JsonSerializer.Serialize(writer, usage.DailyClientAppUsage, jsonSerializerOptions);
            }
            if (usage.DailyProjectUsageOption.IsSet)
            {
                writer.WritePropertyName("daily_project_usage");
                JsonSerializer.Serialize(writer, usage.DailyProjectUsage, jsonSerializerOptions);
            }
            if (usage.ProjectCapOption.IsSet)
                writer.WriteNumber("project_cap", usage.ProjectCapOption.Value!.Value);

            if (usage.ProjectIdOption.IsSet)
                writer.WriteString("project_id", usage.ProjectId);

            if (usage.ProjectUsageOption.IsSet)
                writer.WriteNumber("project_usage", usage.ProjectUsageOption.Value!.Value);
        }
    }
}
