// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A count of user-provided stream filtering rules at the client application level.
    /// </summary>
    public partial class AppRulesCount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppRulesCount" /> class.
        /// </summary>
        /// <param name="clientAppId">The ID of the client application</param>
        /// <param name="ruleCount">Number of rules for client application</param>
        [JsonConstructor]
        public AppRulesCount(Option<string?> clientAppId = default, Option<int?> ruleCount = default)
        {
            ClientAppIdOption = clientAppId;
            RuleCountOption = ruleCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientAppId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientAppIdOption { get; private set; }

        /// <summary>
        /// The ID of the client application
        /// </summary>
        /// <value>The ID of the client application</value>
        [JsonPropertyName("client_app_id")]
        public string? ClientAppId { get { return this.ClientAppIdOption; } set { this.ClientAppIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RuleCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RuleCountOption { get; private set; }

        /// <summary>
        /// Number of rules for client application
        /// </summary>
        /// <value>Number of rules for client application</value>
        [JsonPropertyName("rule_count")]
        public int? RuleCount { get { return this.RuleCountOption; } set { this.RuleCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AppRulesCount {\n");
            sb.Append("  ClientAppId: ").Append(ClientAppId).Append("\n");
            sb.Append("  RuleCount: ").Append(RuleCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClientAppId (string) maxLength
            if (this.ClientAppId != null && this.ClientAppId.Length > 19)
            {
                yield return new ValidationResult("Invalid value for ClientAppId, length must be less than 19.", new [] { "ClientAppId" });
            }

            // ClientAppId (string) minLength
            if (this.ClientAppId != null && this.ClientAppId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ClientAppId, length must be greater than 1.", new [] { "ClientAppId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AppRulesCount" />
    /// </summary>
    public class AppRulesCountJsonConverter : JsonConverter<AppRulesCount>
    {
        /// <summary>
        /// Deserializes json to <see cref="AppRulesCount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AppRulesCount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientAppId = default;
            Option<int?> ruleCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_app_id":
                            clientAppId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "rule_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ruleCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientAppId.IsSet && clientAppId.Value == null)
                throw new ArgumentNullException(nameof(clientAppId), "Property is not nullable for class AppRulesCount.");

            if (ruleCount.IsSet && ruleCount.Value == null)
                throw new ArgumentNullException(nameof(ruleCount), "Property is not nullable for class AppRulesCount.");

            return new AppRulesCount(clientAppId, ruleCount);
        }

        /// <summary>
        /// Serializes a <see cref="AppRulesCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appRulesCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AppRulesCount appRulesCount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, appRulesCount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AppRulesCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="appRulesCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AppRulesCount appRulesCount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (appRulesCount.ClientAppIdOption.IsSet && appRulesCount.ClientAppId == null)
                throw new ArgumentNullException(nameof(appRulesCount.ClientAppId), "Property is required for class AppRulesCount.");

            if (appRulesCount.ClientAppIdOption.IsSet)
                writer.WriteString("client_app_id", appRulesCount.ClientAppId);

            if (appRulesCount.RuleCountOption.IsSet)
                writer.WriteNumber("rule_count", appRulesCount.RuleCountOption.Value!.Value);
        }
    }
}
