// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A problem that indicates something is wrong with the connection.
    /// </summary>
    public partial class ConnectionExceptionProblem : Problem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionExceptionProblem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        /// <param name="connectionIssue">connectionIssue</param>
        [JsonConstructor]
        public ConnectionExceptionProblem(string title, Option<string?> detail = default, Option<int?> status = default, Option<ConnectionIssueEnum?> connectionIssue = default) : base(title, detail, status)
        {
            ConnectionIssueOption = connectionIssue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ConnectionIssue
        /// </summary>
        public enum ConnectionIssueEnum
        {
            /// <summary>
            /// Enum TooManyConnections for value: TooManyConnections
            /// </summary>
            TooManyConnections = 1,

            /// <summary>
            /// Enum ProvisioningSubscription for value: ProvisioningSubscription
            /// </summary>
            ProvisioningSubscription = 2,

            /// <summary>
            /// Enum RuleConfigurationIssue for value: RuleConfigurationIssue
            /// </summary>
            RuleConfigurationIssue = 3,

            /// <summary>
            /// Enum RulesInvalidIssue for value: RulesInvalidIssue
            /// </summary>
            RulesInvalidIssue = 4
        }

        /// <summary>
        /// Returns a <see cref="ConnectionIssueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConnectionIssueEnum ConnectionIssueEnumFromString(string value)
        {
            if (value.Equals("TooManyConnections"))
                return ConnectionIssueEnum.TooManyConnections;

            if (value.Equals("ProvisioningSubscription"))
                return ConnectionIssueEnum.ProvisioningSubscription;

            if (value.Equals("RuleConfigurationIssue"))
                return ConnectionIssueEnum.RuleConfigurationIssue;

            if (value.Equals("RulesInvalidIssue"))
                return ConnectionIssueEnum.RulesInvalidIssue;

            throw new NotImplementedException($"Could not convert value to type ConnectionIssueEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConnectionIssueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConnectionIssueEnum? ConnectionIssueEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TooManyConnections"))
                return ConnectionIssueEnum.TooManyConnections;

            if (value.Equals("ProvisioningSubscription"))
                return ConnectionIssueEnum.ProvisioningSubscription;

            if (value.Equals("RuleConfigurationIssue"))
                return ConnectionIssueEnum.RuleConfigurationIssue;

            if (value.Equals("RulesInvalidIssue"))
                return ConnectionIssueEnum.RulesInvalidIssue;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConnectionIssueEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ConnectionIssueEnumToJsonValue(ConnectionIssueEnum? value)
        {
            if (value == ConnectionIssueEnum.TooManyConnections)
                return "TooManyConnections";

            if (value == ConnectionIssueEnum.ProvisioningSubscription)
                return "ProvisioningSubscription";

            if (value == ConnectionIssueEnum.RuleConfigurationIssue)
                return "RuleConfigurationIssue";

            if (value == ConnectionIssueEnum.RulesInvalidIssue)
                return "RulesInvalidIssue";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ConnectionIssue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConnectionIssueEnum?> ConnectionIssueOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConnectionIssue
        /// </summary>
        [JsonPropertyName("connection_issue")]
        public ConnectionIssueEnum? ConnectionIssue { get { return this.ConnectionIssueOption; } set { this.ConnectionIssueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionExceptionProblem {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ConnectionIssue: ").Append(ConnectionIssue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConnectionExceptionProblem" />
    /// </summary>
    public class ConnectionExceptionProblemJsonConverter : JsonConverter<ConnectionExceptionProblem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConnectionExceptionProblem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConnectionExceptionProblem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> detail = default;
            Option<int?> status = default;
            Option<ConnectionExceptionProblem.ConnectionIssueEnum?> connectionIssue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "connection_issue":
                            string? connectionIssueRawValue = utf8JsonReader.GetString();
                            if (connectionIssueRawValue != null)
                                connectionIssue = new Option<ConnectionExceptionProblem.ConnectionIssueEnum?>(ConnectionExceptionProblem.ConnectionIssueEnumFromStringOrDefault(connectionIssueRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ConnectionExceptionProblem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ConnectionExceptionProblem.", nameof(type));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ConnectionExceptionProblem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ConnectionExceptionProblem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class ConnectionExceptionProblem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ConnectionExceptionProblem.");

            if (connectionIssue.IsSet && connectionIssue.Value == null)
                throw new ArgumentNullException(nameof(connectionIssue), "Property is not nullable for class ConnectionExceptionProblem.");

            return new ConnectionExceptionProblem(title.Value!, detail, status, connectionIssue);
        }

        /// <summary>
        /// Serializes a <see cref="ConnectionExceptionProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectionExceptionProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConnectionExceptionProblem connectionExceptionProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, connectionExceptionProblem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConnectionExceptionProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="connectionExceptionProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ConnectionExceptionProblem connectionExceptionProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (connectionExceptionProblem.Title == null)
                throw new ArgumentNullException(nameof(connectionExceptionProblem.Title), "Property is required for class ConnectionExceptionProblem.");

            if (connectionExceptionProblem.DetailOption.IsSet && connectionExceptionProblem.Detail == null)
                throw new ArgumentNullException(nameof(connectionExceptionProblem.Detail), "Property is required for class ConnectionExceptionProblem.");

            writer.WriteString("title", connectionExceptionProblem.Title);

            writer.WriteString("type", connectionExceptionProblem.Type);

            if (connectionExceptionProblem.DetailOption.IsSet)
                writer.WriteString("detail", connectionExceptionProblem.Detail);

            if (connectionExceptionProblem.StatusOption.IsSet)
                writer.WriteNumber("status", connectionExceptionProblem.StatusOption.Value!.Value);

            var connectionIssueRawValue = ConnectionExceptionProblem.ConnectionIssueEnumToJsonValue(connectionExceptionProblem.ConnectionIssueOption.Value!.Value);
            writer.WriteString("connection_issue", connectionIssueRawValue);
        }
    }
}
