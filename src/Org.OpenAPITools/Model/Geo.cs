// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Geo
    /// </summary>
    public partial class Geo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Geo" /> class.
        /// </summary>
        /// <param name="bbox">bbox</param>
        /// <param name="properties">properties</param>
        /// <param name="type">type</param>
        /// <param name="geometry">geometry</param>
        [JsonConstructor]
        public Geo(List<double> bbox, Object properties, TypeEnum type, Option<Point?> geometry = default)
        {
            Bbox = bbox;
            Properties = properties;
            Type = type;
            GeometryOption = geometry;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Feature for value: Feature
            /// </summary>
            Feature = 1
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("Feature"))
                return TypeEnum.Feature;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Feature"))
                return TypeEnum.Feature;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Feature)
                return "Feature";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Bbox
        /// </summary>
        /* <example>[-105.193475,39.60973,-105.053164,39.761974]</example> */
        [JsonPropertyName("bbox")]
        public List<double> Bbox { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [JsonPropertyName("properties")]
        public Object Properties { get; set; }

        /// <summary>
        /// Used to track the state of Geometry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Point?> GeometryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [JsonPropertyName("geometry")]
        public Point? Geometry { get { return this.GeometryOption; } set { this.GeometryOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Geo {\n");
            sb.Append("  Bbox: ").Append(Bbox).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Geo" />
    /// </summary>
    public class GeoJsonConverter : JsonConverter<Geo>
    {
        /// <summary>
        /// Deserializes json to <see cref="Geo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Geo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<double>?> bbox = default;
            Option<Object?> properties = default;
            Option<Geo.TypeEnum?> type = default;
            Option<Point?> geometry = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bbox":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bbox = new Option<List<double>?>(JsonSerializer.Deserialize<List<double>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "properties":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                properties = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<Geo.TypeEnum?>(Geo.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "geometry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                geometry = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!bbox.IsSet)
                throw new ArgumentException("Property is required for class Geo.", nameof(bbox));

            if (!properties.IsSet)
                throw new ArgumentException("Property is required for class Geo.", nameof(properties));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Geo.", nameof(type));

            if (bbox.IsSet && bbox.Value == null)
                throw new ArgumentNullException(nameof(bbox), "Property is not nullable for class Geo.");

            if (properties.IsSet && properties.Value == null)
                throw new ArgumentNullException(nameof(properties), "Property is not nullable for class Geo.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Geo.");

            if (geometry.IsSet && geometry.Value == null)
                throw new ArgumentNullException(nameof(geometry), "Property is not nullable for class Geo.");

            return new Geo(bbox.Value!, properties.Value!, type.Value!.Value!, geometry);
        }

        /// <summary>
        /// Serializes a <see cref="Geo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Geo geo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, geo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Geo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="geo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Geo geo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (geo.Bbox == null)
                throw new ArgumentNullException(nameof(geo.Bbox), "Property is required for class Geo.");

            if (geo.Properties == null)
                throw new ArgumentNullException(nameof(geo.Properties), "Property is required for class Geo.");

            if (geo.GeometryOption.IsSet && geo.Geometry == null)
                throw new ArgumentNullException(nameof(geo.Geometry), "Property is required for class Geo.");

            writer.WritePropertyName("bbox");
            JsonSerializer.Serialize(writer, geo.Bbox, jsonSerializerOptions);
            writer.WritePropertyName("properties");
            JsonSerializer.Serialize(writer, geo.Properties, jsonSerializerOptions);
            var typeRawValue = Geo.TypeEnumToJsonValue(geo.Type);
            writer.WriteString("type", typeRawValue);
            if (geo.GeometryOption.IsSet)
            {
                writer.WritePropertyName("geometry");
                JsonSerializer.Serialize(writer, geo.Geometry, jsonSerializerOptions);
            }
        }
    }
}
