// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The location tagged on the Tweet, if the user provided one.
    /// </summary>
    public partial class TweetGeo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetGeo" /> class.
        /// </summary>
        /// <param name="coordinates">coordinates</param>
        /// <param name="placeId">The identifier for this place.</param>
        [JsonConstructor]
        public TweetGeo(Option<Point?> coordinates = default, Option<string?> placeId = default)
        {
            CoordinatesOption = coordinates;
            PlaceIdOption = placeId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Coordinates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Point?> CoordinatesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [JsonPropertyName("coordinates")]
        public Point? Coordinates { get { return this.CoordinatesOption; } set { this.CoordinatesOption = new(value); } }

        /// <summary>
        /// Used to track the state of PlaceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PlaceIdOption { get; private set; }

        /// <summary>
        /// The identifier for this place.
        /// </summary>
        /// <value>The identifier for this place.</value>
        /* <example>f7eb2fa2fea288b1</example> */
        [JsonPropertyName("place_id")]
        public string? PlaceId { get { return this.PlaceIdOption; } set { this.PlaceIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetGeo {\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  PlaceId: ").Append(PlaceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetGeo" />
    /// </summary>
    public class TweetGeoJsonConverter : JsonConverter<TweetGeo>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetGeo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetGeo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Point?> coordinates = default;
            Option<string?> placeId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "coordinates":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                coordinates = new Option<Point?>(JsonSerializer.Deserialize<Point>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "place_id":
                            placeId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (coordinates.IsSet && coordinates.Value == null)
                throw new ArgumentNullException(nameof(coordinates), "Property is not nullable for class TweetGeo.");

            if (placeId.IsSet && placeId.Value == null)
                throw new ArgumentNullException(nameof(placeId), "Property is not nullable for class TweetGeo.");

            return new TweetGeo(coordinates, placeId);
        }

        /// <summary>
        /// Serializes a <see cref="TweetGeo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetGeo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetGeo tweetGeo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetGeo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetGeo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetGeo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetGeo tweetGeo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetGeo.CoordinatesOption.IsSet && tweetGeo.Coordinates == null)
                throw new ArgumentNullException(nameof(tweetGeo.Coordinates), "Property is required for class TweetGeo.");

            if (tweetGeo.PlaceIdOption.IsSet && tweetGeo.PlaceId == null)
                throw new ArgumentNullException(nameof(tweetGeo.PlaceId), "Property is required for class TweetGeo.");

            if (tweetGeo.CoordinatesOption.IsSet)
            {
                writer.WritePropertyName("coordinates");
                JsonSerializer.Serialize(writer, tweetGeo.Coordinates, jsonSerializerOptions);
            }
            if (tweetGeo.PlaceIdOption.IsSet)
                writer.WriteString("place_id", tweetGeo.PlaceId);
        }
    }
}
