// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The media category of uploaded media to which subtitles should be added/deleted
    /// </summary>
    /// <value>The media category of uploaded media to which subtitles should be added/deleted</value>
    public enum MediaCategorySubtitles
    {
        /// <summary>
        /// Enum AmplifyVideo for value: AmplifyVideo
        /// </summary>
        AmplifyVideo = 1,

        /// <summary>
        /// Enum TweetVideo for value: TweetVideo
        /// </summary>
        TweetVideo = 2
    }

    /// <summary>
    /// Converts <see cref="MediaCategorySubtitles"/> to and from the JSON value
    /// </summary>
    public static class MediaCategorySubtitlesValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="MediaCategorySubtitles"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MediaCategorySubtitles FromString(string value)
        {
            if (value.Equals("AmplifyVideo"))
                return MediaCategorySubtitles.AmplifyVideo;

            if (value.Equals("TweetVideo"))
                return MediaCategorySubtitles.TweetVideo;

            throw new NotImplementedException($"Could not convert value to type MediaCategorySubtitles: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="MediaCategorySubtitles"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MediaCategorySubtitles? FromStringOrDefault(string value)
        {
            if (value.Equals("AmplifyVideo"))
                return MediaCategorySubtitles.AmplifyVideo;

            if (value.Equals("TweetVideo"))
                return MediaCategorySubtitles.TweetVideo;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MediaCategorySubtitles"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(MediaCategorySubtitles value)
        {
            if (value == MediaCategorySubtitles.AmplifyVideo)
                return "AmplifyVideo";

            if (value == MediaCategorySubtitles.TweetVideo)
                return "TweetVideo";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MediaCategorySubtitles"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class MediaCategorySubtitlesJsonConverter : JsonConverter<MediaCategorySubtitles>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MediaCategorySubtitles Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MediaCategorySubtitles? result = rawValue == null
                ? null
                : MediaCategorySubtitlesValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the MediaCategorySubtitles to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mediaCategorySubtitles"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MediaCategorySubtitles mediaCategorySubtitles, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mediaCategorySubtitles.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MediaCategorySubtitles"/>
    /// </summary>
    public class MediaCategorySubtitlesNullableJsonConverter : JsonConverter<MediaCategorySubtitles?>
    {
        /// <summary>
        /// Returns a MediaCategorySubtitles from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override MediaCategorySubtitles? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            MediaCategorySubtitles? result = rawValue == null
                ? null
                : MediaCategorySubtitlesValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mediaCategorySubtitles"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, MediaCategorySubtitles? mediaCategorySubtitles, JsonSerializerOptions options)
        {
            writer.WriteStringValue(mediaCategorySubtitles?.ToString() ?? "null");
        }
    }
}
