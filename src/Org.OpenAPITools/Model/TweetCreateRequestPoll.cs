// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Poll options for a Tweet with a poll. This is mutually exclusive from Media, Quote Tweet Id, and Card URI.
    /// </summary>
    public partial class TweetCreateRequestPoll : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetCreateRequestPoll" /> class.
        /// </summary>
        /// <param name="durationMinutes">Duration of the poll in minutes.</param>
        /// <param name="options">options</param>
        /// <param name="replySettings">Settings to indicate who can reply to the Tweet.</param>
        [JsonConstructor]
        public TweetCreateRequestPoll(int durationMinutes, List<string> options, Option<ReplySettingsEnum?> replySettings = default)
        {
            DurationMinutes = durationMinutes;
            Options = options;
            ReplySettingsOption = replySettings;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Settings to indicate who can reply to the Tweet.
        /// </summary>
        /// <value>Settings to indicate who can reply to the Tweet.</value>
        public enum ReplySettingsEnum
        {
            /// <summary>
            /// Enum Following for value: following
            /// </summary>
            Following = 1,

            /// <summary>
            /// Enum MentionedUsers for value: mentionedUsers
            /// </summary>
            MentionedUsers = 2
        }

        /// <summary>
        /// Returns a <see cref="ReplySettingsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReplySettingsEnum ReplySettingsEnumFromString(string value)
        {
            if (value.Equals("following"))
                return ReplySettingsEnum.Following;

            if (value.Equals("mentionedUsers"))
                return ReplySettingsEnum.MentionedUsers;

            throw new NotImplementedException($"Could not convert value to type ReplySettingsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReplySettingsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReplySettingsEnum? ReplySettingsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("following"))
                return ReplySettingsEnum.Following;

            if (value.Equals("mentionedUsers"))
                return ReplySettingsEnum.MentionedUsers;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReplySettingsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReplySettingsEnumToJsonValue(ReplySettingsEnum? value)
        {
            if (value == ReplySettingsEnum.Following)
                return "following";

            if (value == ReplySettingsEnum.MentionedUsers)
                return "mentionedUsers";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ReplySettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReplySettingsEnum?> ReplySettingsOption { get; private set; }

        /// <summary>
        /// Settings to indicate who can reply to the Tweet.
        /// </summary>
        /// <value>Settings to indicate who can reply to the Tweet.</value>
        [JsonPropertyName("reply_settings")]
        public ReplySettingsEnum? ReplySettings { get { return this.ReplySettingsOption; } set { this.ReplySettingsOption = new(value); } }

        /// <summary>
        /// Duration of the poll in minutes.
        /// </summary>
        /// <value>Duration of the poll in minutes.</value>
        [JsonPropertyName("duration_minutes")]
        public int DurationMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public List<string> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetCreateRequestPoll {\n");
            sb.Append("  DurationMinutes: ").Append(DurationMinutes).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ReplySettings: ").Append(ReplySettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DurationMinutes (int) maximum
            if (this.DurationMinutes > (int)10080)
            {
                yield return new ValidationResult("Invalid value for DurationMinutes, must be a value less than or equal to 10080.", new [] { "DurationMinutes" });
            }

            // DurationMinutes (int) minimum
            if (this.DurationMinutes < (int)5)
            {
                yield return new ValidationResult("Invalid value for DurationMinutes, must be a value greater than or equal to 5.", new [] { "DurationMinutes" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetCreateRequestPoll" />
    /// </summary>
    public class TweetCreateRequestPollJsonConverter : JsonConverter<TweetCreateRequestPoll>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetCreateRequestPoll" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetCreateRequestPoll Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> durationMinutes = default;
            Option<List<string>?> options = default;
            Option<TweetCreateRequestPoll.ReplySettingsEnum?> replySettings = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "duration_minutes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                durationMinutes = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "options":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                options = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reply_settings":
                            string? replySettingsRawValue = utf8JsonReader.GetString();
                            if (replySettingsRawValue != null)
                                replySettings = new Option<TweetCreateRequestPoll.ReplySettingsEnum?>(TweetCreateRequestPoll.ReplySettingsEnumFromStringOrDefault(replySettingsRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!durationMinutes.IsSet)
                throw new ArgumentException("Property is required for class TweetCreateRequestPoll.", nameof(durationMinutes));

            if (!options.IsSet)
                throw new ArgumentException("Property is required for class TweetCreateRequestPoll.", nameof(options));

            if (durationMinutes.IsSet && durationMinutes.Value == null)
                throw new ArgumentNullException(nameof(durationMinutes), "Property is not nullable for class TweetCreateRequestPoll.");

            if (options.IsSet && options.Value == null)
                throw new ArgumentNullException(nameof(options), "Property is not nullable for class TweetCreateRequestPoll.");

            if (replySettings.IsSet && replySettings.Value == null)
                throw new ArgumentNullException(nameof(replySettings), "Property is not nullable for class TweetCreateRequestPoll.");

            return new TweetCreateRequestPoll(durationMinutes.Value!.Value!, options.Value!, replySettings);
        }

        /// <summary>
        /// Serializes a <see cref="TweetCreateRequestPoll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestPoll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetCreateRequestPoll tweetCreateRequestPoll, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetCreateRequestPoll, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetCreateRequestPoll" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestPoll"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetCreateRequestPoll tweetCreateRequestPoll, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetCreateRequestPoll.Options == null)
                throw new ArgumentNullException(nameof(tweetCreateRequestPoll.Options), "Property is required for class TweetCreateRequestPoll.");

            writer.WriteNumber("duration_minutes", tweetCreateRequestPoll.DurationMinutes);

            writer.WritePropertyName("options");
            JsonSerializer.Serialize(writer, tweetCreateRequestPoll.Options, jsonSerializerOptions);
            var replySettingsRawValue = TweetCreateRequestPoll.ReplySettingsEnumToJsonValue(tweetCreateRequestPoll.ReplySettingsOption.Value!.Value);
            writer.WriteString("reply_settings", replySettingsRawValue);
        }
    }
}
