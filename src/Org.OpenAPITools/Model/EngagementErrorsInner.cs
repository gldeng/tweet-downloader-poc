// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EngagementErrorsInner
    /// </summary>
    public partial class EngagementErrorsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementErrorsInner" /> class.
        /// </summary>
        /// <param name="error">error</param>
        /// <param name="tweets">tweets</param>
        [JsonConstructor]
        public EngagementErrorsInner(Option<string?> error = default, Option<List<string>?> tweets = default)
        {
            ErrorOption = error;
            TweetsOption = tweets;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public string? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tweets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TweetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tweets
        /// </summary>
        [JsonPropertyName("tweets")]
        public List<string>? Tweets { get { return this.TweetsOption; } set { this.TweetsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EngagementErrorsInner {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Tweets: ").Append(Tweets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EngagementErrorsInner" />
    /// </summary>
    public class EngagementErrorsInnerJsonConverter : JsonConverter<EngagementErrorsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="EngagementErrorsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EngagementErrorsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> error = default;
            Option<List<string>?> tweets = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tweets":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tweets = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class EngagementErrorsInner.");

            if (tweets.IsSet && tweets.Value == null)
                throw new ArgumentNullException(nameof(tweets), "Property is not nullable for class EngagementErrorsInner.");

            return new EngagementErrorsInner(error, tweets);
        }

        /// <summary>
        /// Serializes a <see cref="EngagementErrorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementErrorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EngagementErrorsInner engagementErrorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, engagementErrorsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EngagementErrorsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementErrorsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EngagementErrorsInner engagementErrorsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (engagementErrorsInner.ErrorOption.IsSet && engagementErrorsInner.Error == null)
                throw new ArgumentNullException(nameof(engagementErrorsInner.Error), "Property is required for class EngagementErrorsInner.");

            if (engagementErrorsInner.TweetsOption.IsSet && engagementErrorsInner.Tweets == null)
                throw new ArgumentNullException(nameof(engagementErrorsInner.Tweets), "Property is required for class EngagementErrorsInner.");

            if (engagementErrorsInner.ErrorOption.IsSet)
                writer.WriteString("error", engagementErrorsInner.Error);

            if (engagementErrorsInner.TweetsOption.IsSet)
            {
                writer.WritePropertyName("tweets");
                JsonSerializer.Serialize(writer, engagementErrorsInner.Tweets, jsonSerializerOptions);
            }
        }
    }
}
