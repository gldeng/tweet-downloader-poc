// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A X Community Note is a note on a Post.
    /// </summary>
    public partial class Note : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Note" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of this Community Note.</param>
        /// <param name="text">The text summary in the Community Note.</param>
        /// <param name="classification">classification</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="deleted">Whether the Community Note has been deleted or not.</param>
        /// <param name="ratingStatus">ratingStatus</param>
        [JsonConstructor]
        public Note(string id, string text, Option<NoteClassification?> classification = default, Option<DateTime?> createdAt = default, Option<bool?> deleted = default, Option<NoteRatingStatus?> ratingStatus = default)
        {
            Id = id;
            Text = text;
            ClassificationOption = classification;
            CreatedAtOption = createdAt;
            DeletedOption = deleted;
            RatingStatusOption = ratingStatus;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Classification
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NoteClassification?> ClassificationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [JsonPropertyName("classification")]
        public NoteClassification? Classification { get { return this.ClassificationOption; } set { this.ClassificationOption = new(value); } }

        /// <summary>
        /// Used to track the state of RatingStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NoteRatingStatus?> RatingStatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets RatingStatus
        /// </summary>
        [JsonPropertyName("rating_status")]
        public NoteRatingStatus? RatingStatus { get { return this.RatingStatusOption; } set { this.RatingStatusOption = new(value); } }

        /// <summary>
        /// The unique identifier of this Community Note.
        /// </summary>
        /// <value>The unique identifier of this Community Note.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The text summary in the Community Note.
        /// </summary>
        /// <value>The text summary in the Community Note.</value>
        [JsonPropertyName("text")]
        public string Text { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the Community Note has been deleted or not.
        /// </summary>
        /// <value>Whether the Community Note has been deleted or not.</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Note {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  RatingStatus: ").Append(RatingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Note" />
    /// </summary>
    public class NoteJsonConverter : JsonConverter<Note>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Note" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Note Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> text = default;
            Option<NoteClassification?> classification = default;
            Option<DateTime?> createdAt = default;
            Option<bool?> deleted = default;
            Option<NoteRatingStatus?> ratingStatus = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "classification":
                            string? classificationRawValue = utf8JsonReader.GetString();
                            if (classificationRawValue != null)
                                classification = new Option<NoteClassification?>(NoteClassificationValueConverter.FromStringOrDefault(classificationRawValue));
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "deleted":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deleted = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "rating_status":
                            string? ratingStatusRawValue = utf8JsonReader.GetString();
                            if (ratingStatusRawValue != null)
                                ratingStatus = new Option<NoteRatingStatus?>(NoteRatingStatusValueConverter.FromStringOrDefault(ratingStatusRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Note.", nameof(id));

            if (!text.IsSet)
                throw new ArgumentException("Property is required for class Note.", nameof(text));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Note.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class Note.");

            if (classification.IsSet && classification.Value == null)
                throw new ArgumentNullException(nameof(classification), "Property is not nullable for class Note.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Note.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class Note.");

            if (ratingStatus.IsSet && ratingStatus.Value == null)
                throw new ArgumentNullException(nameof(ratingStatus), "Property is not nullable for class Note.");

            return new Note(id.Value!, text.Value!, classification, createdAt, deleted, ratingStatus);
        }

        /// <summary>
        /// Serializes a <see cref="Note" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="note"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Note note, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, note, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Note" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="note"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Note note, JsonSerializerOptions jsonSerializerOptions)
        {
            if (note.Id == null)
                throw new ArgumentNullException(nameof(note.Id), "Property is required for class Note.");

            if (note.Text == null)
                throw new ArgumentNullException(nameof(note.Text), "Property is required for class Note.");

            writer.WriteString("id", note.Id);

            writer.WriteString("text", note.Text);

            if (note.ClassificationOption.IsSet)
            {
                var classificationRawValue = NoteClassificationValueConverter.ToJsonValue(note.Classification!.Value);
                writer.WriteString("classification", classificationRawValue);
            }
            if (note.CreatedAtOption.IsSet)
                writer.WriteString("created_at", note.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (note.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", note.DeletedOption.Value!.Value);

            if (note.RatingStatusOption.IsSet)
            {
                var ratingStatusRawValue = NoteRatingStatusValueConverter.ToJsonValue(note.RatingStatus!.Value);
                writer.WriteString("rating_status", ratingStatusRawValue);
            }
        }
    }
}
