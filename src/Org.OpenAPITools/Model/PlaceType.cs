// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines PlaceType
    /// </summary>
    public enum PlaceType
    {
        /// <summary>
        /// Enum Poi for value: poi
        /// </summary>
        Poi = 1,

        /// <summary>
        /// Enum Neighborhood for value: neighborhood
        /// </summary>
        Neighborhood = 2,

        /// <summary>
        /// Enum City for value: city
        /// </summary>
        City = 3,

        /// <summary>
        /// Enum Admin for value: admin
        /// </summary>
        Admin = 4,

        /// <summary>
        /// Enum Country for value: country
        /// </summary>
        Country = 5,

        /// <summary>
        /// Enum Unknown for value: unknown
        /// </summary>
        Unknown = 6
    }

    /// <summary>
    /// Converts <see cref="PlaceType"/> to and from the JSON value
    /// </summary>
    public static class PlaceTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PlaceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlaceType FromString(string value)
        {
            if (value.Equals("poi"))
                return PlaceType.Poi;

            if (value.Equals("neighborhood"))
                return PlaceType.Neighborhood;

            if (value.Equals("city"))
                return PlaceType.City;

            if (value.Equals("admin"))
                return PlaceType.Admin;

            if (value.Equals("country"))
                return PlaceType.Country;

            if (value.Equals("unknown"))
                return PlaceType.Unknown;

            throw new NotImplementedException($"Could not convert value to type PlaceType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PlaceType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlaceType? FromStringOrDefault(string value)
        {
            if (value.Equals("poi"))
                return PlaceType.Poi;

            if (value.Equals("neighborhood"))
                return PlaceType.Neighborhood;

            if (value.Equals("city"))
                return PlaceType.City;

            if (value.Equals("admin"))
                return PlaceType.Admin;

            if (value.Equals("country"))
                return PlaceType.Country;

            if (value.Equals("unknown"))
                return PlaceType.Unknown;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PlaceType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PlaceType value)
        {
            if (value == PlaceType.Poi)
                return "poi";

            if (value == PlaceType.Neighborhood)
                return "neighborhood";

            if (value == PlaceType.City)
                return "city";

            if (value == PlaceType.Admin)
                return "admin";

            if (value == PlaceType.Country)
                return "country";

            if (value == PlaceType.Unknown)
                return "unknown";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlaceType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PlaceTypeJsonConverter : JsonConverter<PlaceType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PlaceType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PlaceType? result = rawValue == null
                ? null
                : PlaceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PlaceType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PlaceType placeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(placeType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlaceType"/>
    /// </summary>
    public class PlaceTypeNullableJsonConverter : JsonConverter<PlaceType?>
    {
        /// <summary>
        /// Returns a PlaceType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PlaceType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PlaceType? result = rawValue == null
                ? null
                : PlaceTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PlaceType? placeType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(placeType?.ToString() ?? "null");
        }
    }
}
