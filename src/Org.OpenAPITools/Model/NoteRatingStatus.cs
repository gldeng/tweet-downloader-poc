// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Community Note rating status.
    /// </summary>
    /// <value>Community Note rating status.</value>
    public enum NoteRatingStatus
    {
        /// <summary>
        /// Enum CurrentlyRatedHelpful for value: CurrentlyRatedHelpful
        /// </summary>
        CurrentlyRatedHelpful = 1,

        /// <summary>
        /// Enum CurrentlyRatedNotHelpful for value: CurrentlyRatedNotHelpful
        /// </summary>
        CurrentlyRatedNotHelpful = 2,

        /// <summary>
        /// Enum InsufficientConsensus for value: InsufficientConsensus
        /// </summary>
        InsufficientConsensus = 3,

        /// <summary>
        /// Enum MinimumRatingsNotMet for value: MinimumRatingsNotMet
        /// </summary>
        MinimumRatingsNotMet = 4,

        /// <summary>
        /// Enum NeedsMoreRatings for value: NeedsMoreRatings
        /// </summary>
        NeedsMoreRatings = 5
    }

    /// <summary>
    /// Converts <see cref="NoteRatingStatus"/> to and from the JSON value
    /// </summary>
    public static class NoteRatingStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="NoteRatingStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NoteRatingStatus FromString(string value)
        {
            if (value.Equals("CurrentlyRatedHelpful"))
                return NoteRatingStatus.CurrentlyRatedHelpful;

            if (value.Equals("CurrentlyRatedNotHelpful"))
                return NoteRatingStatus.CurrentlyRatedNotHelpful;

            if (value.Equals("InsufficientConsensus"))
                return NoteRatingStatus.InsufficientConsensus;

            if (value.Equals("MinimumRatingsNotMet"))
                return NoteRatingStatus.MinimumRatingsNotMet;

            if (value.Equals("NeedsMoreRatings"))
                return NoteRatingStatus.NeedsMoreRatings;

            throw new NotImplementedException($"Could not convert value to type NoteRatingStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="NoteRatingStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NoteRatingStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("CurrentlyRatedHelpful"))
                return NoteRatingStatus.CurrentlyRatedHelpful;

            if (value.Equals("CurrentlyRatedNotHelpful"))
                return NoteRatingStatus.CurrentlyRatedNotHelpful;

            if (value.Equals("InsufficientConsensus"))
                return NoteRatingStatus.InsufficientConsensus;

            if (value.Equals("MinimumRatingsNotMet"))
                return NoteRatingStatus.MinimumRatingsNotMet;

            if (value.Equals("NeedsMoreRatings"))
                return NoteRatingStatus.NeedsMoreRatings;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NoteRatingStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(NoteRatingStatus value)
        {
            if (value == NoteRatingStatus.CurrentlyRatedHelpful)
                return "CurrentlyRatedHelpful";

            if (value == NoteRatingStatus.CurrentlyRatedNotHelpful)
                return "CurrentlyRatedNotHelpful";

            if (value == NoteRatingStatus.InsufficientConsensus)
                return "InsufficientConsensus";

            if (value == NoteRatingStatus.MinimumRatingsNotMet)
                return "MinimumRatingsNotMet";

            if (value == NoteRatingStatus.NeedsMoreRatings)
                return "NeedsMoreRatings";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NoteRatingStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class NoteRatingStatusJsonConverter : JsonConverter<NoteRatingStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NoteRatingStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NoteRatingStatus? result = rawValue == null
                ? null
                : NoteRatingStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the NoteRatingStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="noteRatingStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NoteRatingStatus noteRatingStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(noteRatingStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="NoteRatingStatus"/>
    /// </summary>
    public class NoteRatingStatusNullableJsonConverter : JsonConverter<NoteRatingStatus?>
    {
        /// <summary>
        /// Returns a NoteRatingStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override NoteRatingStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            NoteRatingStatus? result = rawValue == null
                ? null
                : NoteRatingStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="noteRatingStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, NoteRatingStatus? noteRatingStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(noteRatingStatus?.ToString() ?? "null");
        }
    }
}
