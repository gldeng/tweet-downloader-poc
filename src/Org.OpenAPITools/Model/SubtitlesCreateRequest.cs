// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubtitlesCreateRequest
    /// </summary>
    public partial class SubtitlesCreateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitlesCreateRequest" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of this Media.</param>
        /// <param name="mediaCategory">mediaCategory</param>
        /// <param name="subtitles">subtitles</param>
        [JsonConstructor]
        public SubtitlesCreateRequest(Option<string?> id = default, Option<MediaCategorySubtitles?> mediaCategory = default, Option<Subtitles?> subtitles = default)
        {
            IdOption = id;
            MediaCategoryOption = mediaCategory;
            SubtitlesOption = subtitles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MediaCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MediaCategorySubtitles?> MediaCategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets MediaCategory
        /// </summary>
        [JsonPropertyName("media_category")]
        public MediaCategorySubtitles? MediaCategory { get { return this.MediaCategoryOption; } set { this.MediaCategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Media.
        /// </summary>
        /// <value>The unique identifier of this Media.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subtitles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Subtitles?> SubtitlesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subtitles
        /// </summary>
        [JsonPropertyName("subtitles")]
        public Subtitles? Subtitles { get { return this.SubtitlesOption; } set { this.SubtitlesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubtitlesCreateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MediaCategory: ").Append(MediaCategory).Append("\n");
            sb.Append("  Subtitles: ").Append(Subtitles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.IdOption.Value != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.IdOption.Value != null &&!regexId.Match(this.IdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubtitlesCreateRequest" />
    /// </summary>
    public class SubtitlesCreateRequestJsonConverter : JsonConverter<SubtitlesCreateRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubtitlesCreateRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubtitlesCreateRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<MediaCategorySubtitles?> mediaCategory = default;
            Option<Subtitles?> subtitles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "media_category":
                            string? mediaCategoryRawValue = utf8JsonReader.GetString();
                            if (mediaCategoryRawValue != null)
                                mediaCategory = new Option<MediaCategorySubtitles?>(MediaCategorySubtitlesValueConverter.FromStringOrDefault(mediaCategoryRawValue));
                            break;
                        case "subtitles":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subtitles = new Option<Subtitles?>(JsonSerializer.Deserialize<Subtitles>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SubtitlesCreateRequest.");

            if (mediaCategory.IsSet && mediaCategory.Value == null)
                throw new ArgumentNullException(nameof(mediaCategory), "Property is not nullable for class SubtitlesCreateRequest.");

            if (subtitles.IsSet && subtitles.Value == null)
                throw new ArgumentNullException(nameof(subtitles), "Property is not nullable for class SubtitlesCreateRequest.");

            return new SubtitlesCreateRequest(id, mediaCategory, subtitles);
        }

        /// <summary>
        /// Serializes a <see cref="SubtitlesCreateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subtitlesCreateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubtitlesCreateRequest subtitlesCreateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subtitlesCreateRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubtitlesCreateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subtitlesCreateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubtitlesCreateRequest subtitlesCreateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subtitlesCreateRequest.IdOption.IsSet && subtitlesCreateRequest.Id == null)
                throw new ArgumentNullException(nameof(subtitlesCreateRequest.Id), "Property is required for class SubtitlesCreateRequest.");

            if (subtitlesCreateRequest.SubtitlesOption.IsSet && subtitlesCreateRequest.Subtitles == null)
                throw new ArgumentNullException(nameof(subtitlesCreateRequest.Subtitles), "Property is required for class SubtitlesCreateRequest.");

            if (subtitlesCreateRequest.IdOption.IsSet)
                writer.WriteString("id", subtitlesCreateRequest.Id);

            if (subtitlesCreateRequest.MediaCategoryOption.IsSet)
            {
                var mediaCategoryRawValue = MediaCategorySubtitlesValueConverter.ToJsonValue(subtitlesCreateRequest.MediaCategory!.Value);
                writer.WriteString("media_category", mediaCategoryRawValue);
            }
            if (subtitlesCreateRequest.SubtitlesOption.IsSet)
            {
                writer.WritePropertyName("subtitles");
                JsonSerializer.Serialize(writer, subtitlesCreateRequest.Subtitles, jsonSerializerOptions);
            }
        }
    }
}
