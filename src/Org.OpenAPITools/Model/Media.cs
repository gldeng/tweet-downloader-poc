// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Media
    /// </summary>
    public partial class Media : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="height">The height of the media in pixels.</param>
        /// <param name="mediaKey">The Media Key identifier for this attachment.</param>
        /// <param name="width">The width of the media in pixels.</param>
        [JsonConstructor]
        public Media(Option<int?> height = default, Option<string?> mediaKey = default, Option<int?> width = default)
        {
            Type = this.GetType().Name;
            HeightOption = height;
            MediaKeyOption = mediaKey;
            WidthOption = width;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The discriminator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public string Type { get; }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HeightOption { get; private set; }

        /// <summary>
        /// The height of the media in pixels.
        /// </summary>
        /// <value>The height of the media in pixels.</value>
        [JsonPropertyName("height")]
        public int? Height { get { return this.HeightOption; } set { this.HeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MediaKeyOption { get; private set; }

        /// <summary>
        /// The Media Key identifier for this attachment.
        /// </summary>
        /// <value>The Media Key identifier for this attachment.</value>
        [JsonPropertyName("media_key")]
        public string? MediaKey { get { return this.MediaKeyOption; } set { this.MediaKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WidthOption { get; private set; }

        /// <summary>
        /// The width of the media in pixels.
        /// </summary>
        /// <value>The width of the media in pixels.</value>
        [JsonPropertyName("width")]
        public int? Width { get { return this.WidthOption; } set { this.WidthOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MediaKey: ").Append(MediaKey).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Height (int) minimum
            if (this.HeightOption.IsSet && this.HeightOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 0.", new [] { "Height" });
            }

            if (this.MediaKeyOption.Value != null) {
                // MediaKey (string) pattern
                Regex regexMediaKey = new Regex(@"^([0-9]+)_([0-9]+)$", RegexOptions.CultureInvariant);

                if (this.MediaKeyOption.Value != null &&!regexMediaKey.Match(this.MediaKeyOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MediaKey, must match a pattern of " + regexMediaKey, new [] { "MediaKey" });
                }
            }

            // Width (int) minimum
            if (this.WidthOption.IsSet && this.WidthOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 0.", new [] { "Width" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Media" />
    /// </summary>
    public class MediaJsonConverter : JsonConverter<Media>
    {
        /// <summary>
        /// Deserializes json to <see cref="Media" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Media Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<int?> height = default;
            Option<string?> mediaKey = default;
            Option<int?> width = default;

            string? discriminator = ClientUtils.GetDiscriminator(utf8JsonReader, "type");

            if (discriminator != null && discriminator.Equals("AnimatedGif"))
                return JsonSerializer.Deserialize<AnimatedGif>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("Photo"))
                return JsonSerializer.Deserialize<Photo>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            if (discriminator != null && discriminator.Equals("Video"))
                return JsonSerializer.Deserialize<Video>(ref utf8JsonReader, jsonSerializerOptions) ?? throw new JsonException("The result was an unexpected value.");

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "media_key":
                            mediaKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Media.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Media.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class Media.");

            if (mediaKey.IsSet && mediaKey.Value == null)
                throw new ArgumentNullException(nameof(mediaKey), "Property is not nullable for class Media.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class Media.");

            return new Media(height, mediaKey, width);
        }

        /// <summary>
        /// Serializes a <see cref="Media" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="media"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Media media, JsonSerializerOptions jsonSerializerOptions)
        {
            if (media is AnimatedGif animatedGif){
                JsonSerializer.Serialize<AnimatedGif>(writer, animatedGif, jsonSerializerOptions);
                return;
            }

            if (media is Photo photo){
                JsonSerializer.Serialize<Photo>(writer, photo, jsonSerializerOptions);
                return;
            }

            if (media is Video video){
                JsonSerializer.Serialize<Video>(writer, video, jsonSerializerOptions);
                return;
            }

            writer.WriteStartObject();

            WriteProperties(writer, media, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Media" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="media"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Media media, JsonSerializerOptions jsonSerializerOptions)
        {
            if (media.MediaKeyOption.IsSet && media.MediaKey == null)
                throw new ArgumentNullException(nameof(media.MediaKey), "Property is required for class Media.");

            writer.WriteString("type", media.Type);

            if (media.HeightOption.IsSet)
                writer.WriteNumber("height", media.HeightOption.Value!.Value);

            if (media.MediaKeyOption.IsSet)
                writer.WriteString("media_key", media.MediaKey);

            if (media.WidthOption.IsSet)
                writer.WriteNumber("width", media.WidthOption.Value!.Value);
        }
    }
}
