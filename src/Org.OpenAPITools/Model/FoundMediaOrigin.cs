// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FoundMediaOrigin
    /// </summary>
    public partial class FoundMediaOrigin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FoundMediaOrigin" /> class.
        /// </summary>
        /// <param name="id">Unique Identifier of media within provider ( &lt;&#x3D; 24 characters ))</param>
        /// <param name="provider">The media provider (e.g., &#39;giphy&#39;) that sourced the media ( &lt;&#x3D; 8 Characters )</param>
        [JsonConstructor]
        public FoundMediaOrigin(Option<string?> id = default, Option<string?> provider = default)
        {
            IdOption = id;
            ProviderOption = provider;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Unique Identifier of media within provider ( &lt;&#x3D; 24 characters ))
        /// </summary>
        /// <value>Unique Identifier of media within provider ( &lt;&#x3D; 24 characters ))</value>
        /* <example>u5BzatR15TZ04</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Provider
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProviderOption { get; private set; }

        /// <summary>
        /// The media provider (e.g., &#39;giphy&#39;) that sourced the media ( &lt;&#x3D; 8 Characters )
        /// </summary>
        /// <value>The media provider (e.g., &#39;giphy&#39;) that sourced the media ( &lt;&#x3D; 8 Characters )</value>
        /* <example>giphy</example> */
        [JsonPropertyName("provider")]
        public string? Provider { get { return this.ProviderOption; } set { this.ProviderOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FoundMediaOrigin {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FoundMediaOrigin" />
    /// </summary>
    public class FoundMediaOriginJsonConverter : JsonConverter<FoundMediaOrigin>
    {
        /// <summary>
        /// Deserializes json to <see cref="FoundMediaOrigin" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FoundMediaOrigin Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> provider = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provider":
                            provider = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FoundMediaOrigin.");

            if (provider.IsSet && provider.Value == null)
                throw new ArgumentNullException(nameof(provider), "Property is not nullable for class FoundMediaOrigin.");

            return new FoundMediaOrigin(id, provider);
        }

        /// <summary>
        /// Serializes a <see cref="FoundMediaOrigin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="foundMediaOrigin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FoundMediaOrigin foundMediaOrigin, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, foundMediaOrigin, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FoundMediaOrigin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="foundMediaOrigin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FoundMediaOrigin foundMediaOrigin, JsonSerializerOptions jsonSerializerOptions)
        {
            if (foundMediaOrigin.IdOption.IsSet && foundMediaOrigin.Id == null)
                throw new ArgumentNullException(nameof(foundMediaOrigin.Id), "Property is required for class FoundMediaOrigin.");

            if (foundMediaOrigin.ProviderOption.IsSet && foundMediaOrigin.Provider == null)
                throw new ArgumentNullException(nameof(foundMediaOrigin.Provider), "Property is required for class FoundMediaOrigin.");

            if (foundMediaOrigin.IdOption.IsSet)
                writer.WriteString("id", foundMediaOrigin.Id);

            if (foundMediaOrigin.ProviderOption.IsSet)
                writer.WriteString("provider", foundMediaOrigin.Provider);
        }
    }
}
