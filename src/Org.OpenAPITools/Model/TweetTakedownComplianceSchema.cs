// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TweetTakedownComplianceSchema
    /// </summary>
    public partial class TweetTakedownComplianceSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetTakedownComplianceSchema" /> class.
        /// </summary>
        /// <param name="eventAt">Event time.</param>
        /// <param name="tweet">tweet</param>
        /// <param name="withheldInCountries">withheldInCountries</param>
        /// <param name="quoteTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        [JsonConstructor]
        public TweetTakedownComplianceSchema(DateTime eventAt, TweetComplianceSchemaTweet tweet, List<string> withheldInCountries, Option<string?> quoteTweetId = default)
        {
            EventAt = eventAt;
            Tweet = tweet;
            WithheldInCountries = withheldInCountries;
            QuoteTweetIdOption = quoteTweetId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Event time.
        /// </summary>
        /// <value>Event time.</value>
        /* <example>2021-07-06T18:40:40Z</example> */
        [JsonPropertyName("event_at")]
        public DateTime EventAt { get; set; }

        /// <summary>
        /// Gets or Sets Tweet
        /// </summary>
        [JsonPropertyName("tweet")]
        public TweetComplianceSchemaTweet Tweet { get; set; }

        /// <summary>
        /// Gets or Sets WithheldInCountries
        /// </summary>
        [JsonPropertyName("withheld_in_countries")]
        public List<string> WithheldInCountries { get; set; }

        /// <summary>
        /// Used to track the state of QuoteTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QuoteTweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("quote_tweet_id")]
        public string? QuoteTweetId { get { return this.QuoteTweetIdOption; } set { this.QuoteTweetIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetTakedownComplianceSchema {\n");
            sb.Append("  EventAt: ").Append(EventAt).Append("\n");
            sb.Append("  Tweet: ").Append(Tweet).Append("\n");
            sb.Append("  WithheldInCountries: ").Append(WithheldInCountries).Append("\n");
            sb.Append("  QuoteTweetId: ").Append(QuoteTweetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.QuoteTweetIdOption.Value != null) {
                // QuoteTweetId (string) pattern
                Regex regexQuoteTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.QuoteTweetIdOption.Value != null &&!regexQuoteTweetId.Match(this.QuoteTweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteTweetId, must match a pattern of " + regexQuoteTweetId, new [] { "QuoteTweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetTakedownComplianceSchema" />
    /// </summary>
    public class TweetTakedownComplianceSchemaJsonConverter : JsonConverter<TweetTakedownComplianceSchema>
    {
        /// <summary>
        /// The format to use to serialize EventAt
        /// </summary>
        public static string EventAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TweetTakedownComplianceSchema" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetTakedownComplianceSchema Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> eventAt = default;
            Option<TweetComplianceSchemaTweet?> tweet = default;
            Option<List<string>?> withheldInCountries = default;
            Option<string?> quoteTweetId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eventAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tweet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tweet = new Option<TweetComplianceSchemaTweet?>(JsonSerializer.Deserialize<TweetComplianceSchemaTweet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "withheld_in_countries":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                withheldInCountries = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "quote_tweet_id":
                            quoteTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!eventAt.IsSet)
                throw new ArgumentException("Property is required for class TweetTakedownComplianceSchema.", nameof(eventAt));

            if (!tweet.IsSet)
                throw new ArgumentException("Property is required for class TweetTakedownComplianceSchema.", nameof(tweet));

            if (!withheldInCountries.IsSet)
                throw new ArgumentException("Property is required for class TweetTakedownComplianceSchema.", nameof(withheldInCountries));

            if (eventAt.IsSet && eventAt.Value == null)
                throw new ArgumentNullException(nameof(eventAt), "Property is not nullable for class TweetTakedownComplianceSchema.");

            if (tweet.IsSet && tweet.Value == null)
                throw new ArgumentNullException(nameof(tweet), "Property is not nullable for class TweetTakedownComplianceSchema.");

            if (withheldInCountries.IsSet && withheldInCountries.Value == null)
                throw new ArgumentNullException(nameof(withheldInCountries), "Property is not nullable for class TweetTakedownComplianceSchema.");

            if (quoteTweetId.IsSet && quoteTweetId.Value == null)
                throw new ArgumentNullException(nameof(quoteTweetId), "Property is not nullable for class TweetTakedownComplianceSchema.");

            return new TweetTakedownComplianceSchema(eventAt.Value!.Value!, tweet.Value!, withheldInCountries.Value!, quoteTweetId);
        }

        /// <summary>
        /// Serializes a <see cref="TweetTakedownComplianceSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetTakedownComplianceSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetTakedownComplianceSchema tweetTakedownComplianceSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetTakedownComplianceSchema, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetTakedownComplianceSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetTakedownComplianceSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetTakedownComplianceSchema tweetTakedownComplianceSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetTakedownComplianceSchema.Tweet == null)
                throw new ArgumentNullException(nameof(tweetTakedownComplianceSchema.Tweet), "Property is required for class TweetTakedownComplianceSchema.");

            if (tweetTakedownComplianceSchema.WithheldInCountries == null)
                throw new ArgumentNullException(nameof(tweetTakedownComplianceSchema.WithheldInCountries), "Property is required for class TweetTakedownComplianceSchema.");

            if (tweetTakedownComplianceSchema.QuoteTweetIdOption.IsSet && tweetTakedownComplianceSchema.QuoteTweetId == null)
                throw new ArgumentNullException(nameof(tweetTakedownComplianceSchema.QuoteTweetId), "Property is required for class TweetTakedownComplianceSchema.");

            writer.WriteString("event_at", tweetTakedownComplianceSchema.EventAt.ToString(EventAtFormat));

            writer.WritePropertyName("tweet");
            JsonSerializer.Serialize(writer, tweetTakedownComplianceSchema.Tweet, jsonSerializerOptions);
            writer.WritePropertyName("withheld_in_countries");
            JsonSerializer.Serialize(writer, tweetTakedownComplianceSchema.WithheldInCountries, jsonSerializerOptions);
            if (tweetTakedownComplianceSchema.QuoteTweetIdOption.IsSet)
                writer.WriteString("quote_tweet_id", tweetTakedownComplianceSchema.QuoteTweetId);
        }
    }
}
