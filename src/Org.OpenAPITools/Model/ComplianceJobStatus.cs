// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Status of a compliance job.
    /// </summary>
    /// <value>Status of a compliance job.</value>
    public enum ComplianceJobStatus
    {
        /// <summary>
        /// Enum Created for value: created
        /// </summary>
        Created = 1,

        /// <summary>
        /// Enum InProgress for value: in_progress
        /// </summary>
        InProgress = 2,

        /// <summary>
        /// Enum Failed for value: failed
        /// </summary>
        Failed = 3,

        /// <summary>
        /// Enum Complete for value: complete
        /// </summary>
        Complete = 4,

        /// <summary>
        /// Enum Expired for value: expired
        /// </summary>
        Expired = 5
    }

    /// <summary>
    /// Converts <see cref="ComplianceJobStatus"/> to and from the JSON value
    /// </summary>
    public static class ComplianceJobStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ComplianceJobStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ComplianceJobStatus FromString(string value)
        {
            if (value.Equals("created"))
                return ComplianceJobStatus.Created;

            if (value.Equals("in_progress"))
                return ComplianceJobStatus.InProgress;

            if (value.Equals("failed"))
                return ComplianceJobStatus.Failed;

            if (value.Equals("complete"))
                return ComplianceJobStatus.Complete;

            if (value.Equals("expired"))
                return ComplianceJobStatus.Expired;

            throw new NotImplementedException($"Could not convert value to type ComplianceJobStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ComplianceJobStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ComplianceJobStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("created"))
                return ComplianceJobStatus.Created;

            if (value.Equals("in_progress"))
                return ComplianceJobStatus.InProgress;

            if (value.Equals("failed"))
                return ComplianceJobStatus.Failed;

            if (value.Equals("complete"))
                return ComplianceJobStatus.Complete;

            if (value.Equals("expired"))
                return ComplianceJobStatus.Expired;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ComplianceJobStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ComplianceJobStatus value)
        {
            if (value == ComplianceJobStatus.Created)
                return "created";

            if (value == ComplianceJobStatus.InProgress)
                return "in_progress";

            if (value == ComplianceJobStatus.Failed)
                return "failed";

            if (value == ComplianceJobStatus.Complete)
                return "complete";

            if (value == ComplianceJobStatus.Expired)
                return "expired";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComplianceJobStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ComplianceJobStatusJsonConverter : JsonConverter<ComplianceJobStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ComplianceJobStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ComplianceJobStatus? result = rawValue == null
                ? null
                : ComplianceJobStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ComplianceJobStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJobStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ComplianceJobStatus complianceJobStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(complianceJobStatus.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComplianceJobStatus"/>
    /// </summary>
    public class ComplianceJobStatusNullableJsonConverter : JsonConverter<ComplianceJobStatus?>
    {
        /// <summary>
        /// Returns a ComplianceJobStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ComplianceJobStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ComplianceJobStatus? result = rawValue == null
                ? null
                : ComplianceJobStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJobStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ComplianceJobStatus? complianceJobStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(complianceJobStatus?.ToString() ?? "null");
        }
    }
}
