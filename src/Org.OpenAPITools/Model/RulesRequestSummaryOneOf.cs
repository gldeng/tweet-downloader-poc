// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A summary of the results of the addition of user-specified stream filtering rules.
    /// </summary>
    public partial class RulesRequestSummaryOneOf : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulesRequestSummaryOneOf" /> class.
        /// </summary>
        /// <param name="created">Number of user-specified stream filtering rules that were created.</param>
        /// <param name="invalid">Number of invalid user-specified stream filtering rules.</param>
        /// <param name="notCreated">Number of user-specified stream filtering rules that were not created.</param>
        /// <param name="valid">Number of valid user-specified stream filtering rules.</param>
        [JsonConstructor]
        public RulesRequestSummaryOneOf(int created, int invalid, int notCreated, int valid)
        {
            Created = created;
            Invalid = invalid;
            NotCreated = notCreated;
            Valid = valid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of user-specified stream filtering rules that were created.
        /// </summary>
        /// <value>Number of user-specified stream filtering rules that were created.</value>
        /* <example>1</example> */
        [JsonPropertyName("created")]
        public int Created { get; set; }

        /// <summary>
        /// Number of invalid user-specified stream filtering rules.
        /// </summary>
        /// <value>Number of invalid user-specified stream filtering rules.</value>
        /* <example>1</example> */
        [JsonPropertyName("invalid")]
        public int Invalid { get; set; }

        /// <summary>
        /// Number of user-specified stream filtering rules that were not created.
        /// </summary>
        /// <value>Number of user-specified stream filtering rules that were not created.</value>
        /* <example>1</example> */
        [JsonPropertyName("not_created")]
        public int NotCreated { get; set; }

        /// <summary>
        /// Number of valid user-specified stream filtering rules.
        /// </summary>
        /// <value>Number of valid user-specified stream filtering rules.</value>
        /* <example>1</example> */
        [JsonPropertyName("valid")]
        public int Valid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulesRequestSummaryOneOf {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  NotCreated: ").Append(NotCreated).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RulesRequestSummaryOneOf" />
    /// </summary>
    public class RulesRequestSummaryOneOfJsonConverter : JsonConverter<RulesRequestSummaryOneOf>
    {
        /// <summary>
        /// Deserializes json to <see cref="RulesRequestSummaryOneOf" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RulesRequestSummaryOneOf Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> created = default;
            Option<int?> invalid = default;
            Option<int?> notCreated = default;
            Option<int?> valid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                created = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "invalid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                invalid = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "not_created":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                notCreated = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "valid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                valid = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!created.IsSet)
                throw new ArgumentException("Property is required for class RulesRequestSummaryOneOf.", nameof(created));

            if (!invalid.IsSet)
                throw new ArgumentException("Property is required for class RulesRequestSummaryOneOf.", nameof(invalid));

            if (!notCreated.IsSet)
                throw new ArgumentException("Property is required for class RulesRequestSummaryOneOf.", nameof(notCreated));

            if (!valid.IsSet)
                throw new ArgumentException("Property is required for class RulesRequestSummaryOneOf.", nameof(valid));

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class RulesRequestSummaryOneOf.");

            if (invalid.IsSet && invalid.Value == null)
                throw new ArgumentNullException(nameof(invalid), "Property is not nullable for class RulesRequestSummaryOneOf.");

            if (notCreated.IsSet && notCreated.Value == null)
                throw new ArgumentNullException(nameof(notCreated), "Property is not nullable for class RulesRequestSummaryOneOf.");

            if (valid.IsSet && valid.Value == null)
                throw new ArgumentNullException(nameof(valid), "Property is not nullable for class RulesRequestSummaryOneOf.");

            return new RulesRequestSummaryOneOf(created.Value!.Value!, invalid.Value!.Value!, notCreated.Value!.Value!, valid.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RulesRequestSummaryOneOf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesRequestSummaryOneOf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RulesRequestSummaryOneOf rulesRequestSummaryOneOf, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rulesRequestSummaryOneOf, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RulesRequestSummaryOneOf" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesRequestSummaryOneOf"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RulesRequestSummaryOneOf rulesRequestSummaryOneOf, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("created", rulesRequestSummaryOneOf.Created);

            writer.WriteNumber("invalid", rulesRequestSummaryOneOf.Invalid);

            writer.WriteNumber("not_created", rulesRequestSummaryOneOf.NotCreated);

            writer.WriteNumber("valid", rulesRequestSummaryOneOf.Valid);
        }
    }
}
