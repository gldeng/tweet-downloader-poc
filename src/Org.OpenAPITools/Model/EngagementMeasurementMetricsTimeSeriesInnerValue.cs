// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EngagementMeasurementMetricsTimeSeriesInnerValue
    /// </summary>
    public partial class EngagementMeasurementMetricsTimeSeriesInnerValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementMeasurementMetricsTimeSeriesInnerValue" /> class.
        /// </summary>
        /// <param name="metricValues">metricValues</param>
        /// <param name="timestamp">timestamp</param>
        [JsonConstructor]
        public EngagementMeasurementMetricsTimeSeriesInnerValue(Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> metricValues = default, Option<EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp?> timestamp = default)
        {
            MetricValuesOption = metricValues;
            TimestampOption = timestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MetricValues
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> MetricValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetricValues
        /// </summary>
        [JsonPropertyName("metric_values")]
        public List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>? MetricValues { get { return this.MetricValuesOption; } set { this.MetricValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EngagementMeasurementMetricsTimeSeriesInnerValue {\n");
            sb.Append("  MetricValues: ").Append(MetricValues).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EngagementMeasurementMetricsTimeSeriesInnerValue" />
    /// </summary>
    public class EngagementMeasurementMetricsTimeSeriesInnerValueJsonConverter : JsonConverter<EngagementMeasurementMetricsTimeSeriesInnerValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="EngagementMeasurementMetricsTimeSeriesInnerValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EngagementMeasurementMetricsTimeSeriesInnerValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> metricValues = default;
            Option<EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp?> timestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metric_values":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metricValues = new Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?>(JsonSerializer.Deserialize<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "timestamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timestamp = new Option<EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp?>(JsonSerializer.Deserialize<EngagementMeasurementMetricsTimeSeriesInnerValueTimestamp>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metricValues.IsSet && metricValues.Value == null)
                throw new ArgumentNullException(nameof(metricValues), "Property is not nullable for class EngagementMeasurementMetricsTimeSeriesInnerValue.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class EngagementMeasurementMetricsTimeSeriesInnerValue.");

            return new EngagementMeasurementMetricsTimeSeriesInnerValue(metricValues, timestamp);
        }

        /// <summary>
        /// Serializes a <see cref="EngagementMeasurementMetricsTimeSeriesInnerValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTimeSeriesInnerValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EngagementMeasurementMetricsTimeSeriesInnerValue engagementMeasurementMetricsTimeSeriesInnerValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, engagementMeasurementMetricsTimeSeriesInnerValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EngagementMeasurementMetricsTimeSeriesInnerValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTimeSeriesInnerValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EngagementMeasurementMetricsTimeSeriesInnerValue engagementMeasurementMetricsTimeSeriesInnerValue, JsonSerializerOptions jsonSerializerOptions)
        {
            if (engagementMeasurementMetricsTimeSeriesInnerValue.MetricValuesOption.IsSet && engagementMeasurementMetricsTimeSeriesInnerValue.MetricValues == null)
                throw new ArgumentNullException(nameof(engagementMeasurementMetricsTimeSeriesInnerValue.MetricValues), "Property is required for class EngagementMeasurementMetricsTimeSeriesInnerValue.");

            if (engagementMeasurementMetricsTimeSeriesInnerValue.TimestampOption.IsSet && engagementMeasurementMetricsTimeSeriesInnerValue.Timestamp == null)
                throw new ArgumentNullException(nameof(engagementMeasurementMetricsTimeSeriesInnerValue.Timestamp), "Property is required for class EngagementMeasurementMetricsTimeSeriesInnerValue.");

            if (engagementMeasurementMetricsTimeSeriesInnerValue.MetricValuesOption.IsSet)
            {
                writer.WritePropertyName("metric_values");
                JsonSerializer.Serialize(writer, engagementMeasurementMetricsTimeSeriesInnerValue.MetricValues, jsonSerializerOptions);
            }
            if (engagementMeasurementMetricsTimeSeriesInnerValue.TimestampOption.IsSet)
            {
                writer.WritePropertyName("timestamp");
                JsonSerializer.Serialize(writer, engagementMeasurementMetricsTimeSeriesInnerValue.Timestamp, jsonSerializerOptions);
            }
        }
    }
}
