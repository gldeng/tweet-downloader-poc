// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A count of user-provided stream filtering rules at the application and project levels.
    /// </summary>
    public partial class RulesCount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulesCount" /> class.
        /// </summary>
        /// <param name="allProjectClientApps">Client App Rule Counts for all applications in the project</param>
        /// <param name="capPerClientApp">Cap of number of rules allowed per client application</param>
        /// <param name="capPerProject">Cap of number of rules allowed per project</param>
        /// <param name="clientAppRulesCount">clientAppRulesCount</param>
        /// <param name="projectRulesCount">Number of rules for project</param>
        [JsonConstructor]
        public RulesCount(Option<List<AppRulesCount>?> allProjectClientApps = default, Option<int?> capPerClientApp = default, Option<int?> capPerProject = default, Option<AppRulesCount?> clientAppRulesCount = default, Option<int?> projectRulesCount = default)
        {
            AllProjectClientAppsOption = allProjectClientApps;
            CapPerClientAppOption = capPerClientApp;
            CapPerProjectOption = capPerProject;
            ClientAppRulesCountOption = clientAppRulesCount;
            ProjectRulesCountOption = projectRulesCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AllProjectClientApps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AppRulesCount>?> AllProjectClientAppsOption { get; private set; }

        /// <summary>
        /// Client App Rule Counts for all applications in the project
        /// </summary>
        /// <value>Client App Rule Counts for all applications in the project</value>
        [JsonPropertyName("all_project_client_apps")]
        public List<AppRulesCount>? AllProjectClientApps { get { return this.AllProjectClientAppsOption; } set { this.AllProjectClientAppsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CapPerClientApp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CapPerClientAppOption { get; private set; }

        /// <summary>
        /// Cap of number of rules allowed per client application
        /// </summary>
        /// <value>Cap of number of rules allowed per client application</value>
        [JsonPropertyName("cap_per_client_app")]
        public int? CapPerClientApp { get { return this.CapPerClientAppOption; } set { this.CapPerClientAppOption = new(value); } }

        /// <summary>
        /// Used to track the state of CapPerProject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CapPerProjectOption { get; private set; }

        /// <summary>
        /// Cap of number of rules allowed per project
        /// </summary>
        /// <value>Cap of number of rules allowed per project</value>
        [JsonPropertyName("cap_per_project")]
        public int? CapPerProject { get { return this.CapPerProjectOption; } set { this.CapPerProjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClientAppRulesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AppRulesCount?> ClientAppRulesCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClientAppRulesCount
        /// </summary>
        [JsonPropertyName("client_app_rules_count")]
        public AppRulesCount? ClientAppRulesCount { get { return this.ClientAppRulesCountOption; } set { this.ClientAppRulesCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProjectRulesCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProjectRulesCountOption { get; private set; }

        /// <summary>
        /// Number of rules for project
        /// </summary>
        /// <value>Number of rules for project</value>
        [JsonPropertyName("project_rules_count")]
        public int? ProjectRulesCount { get { return this.ProjectRulesCountOption; } set { this.ProjectRulesCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulesCount {\n");
            sb.Append("  AllProjectClientApps: ").Append(AllProjectClientApps).Append("\n");
            sb.Append("  CapPerClientApp: ").Append(CapPerClientApp).Append("\n");
            sb.Append("  CapPerProject: ").Append(CapPerProject).Append("\n");
            sb.Append("  ClientAppRulesCount: ").Append(ClientAppRulesCount).Append("\n");
            sb.Append("  ProjectRulesCount: ").Append(ProjectRulesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RulesCount" />
    /// </summary>
    public class RulesCountJsonConverter : JsonConverter<RulesCount>
    {
        /// <summary>
        /// Deserializes json to <see cref="RulesCount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RulesCount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<AppRulesCount>?> allProjectClientApps = default;
            Option<int?> capPerClientApp = default;
            Option<int?> capPerProject = default;
            Option<AppRulesCount?> clientAppRulesCount = default;
            Option<int?> projectRulesCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "all_project_client_apps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                allProjectClientApps = new Option<List<AppRulesCount>?>(JsonSerializer.Deserialize<List<AppRulesCount>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cap_per_client_app":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                capPerClientApp = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "cap_per_project":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                capPerProject = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "client_app_rules_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clientAppRulesCount = new Option<AppRulesCount?>(JsonSerializer.Deserialize<AppRulesCount>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "project_rules_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                projectRulesCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (allProjectClientApps.IsSet && allProjectClientApps.Value == null)
                throw new ArgumentNullException(nameof(allProjectClientApps), "Property is not nullable for class RulesCount.");

            if (capPerClientApp.IsSet && capPerClientApp.Value == null)
                throw new ArgumentNullException(nameof(capPerClientApp), "Property is not nullable for class RulesCount.");

            if (capPerProject.IsSet && capPerProject.Value == null)
                throw new ArgumentNullException(nameof(capPerProject), "Property is not nullable for class RulesCount.");

            if (clientAppRulesCount.IsSet && clientAppRulesCount.Value == null)
                throw new ArgumentNullException(nameof(clientAppRulesCount), "Property is not nullable for class RulesCount.");

            if (projectRulesCount.IsSet && projectRulesCount.Value == null)
                throw new ArgumentNullException(nameof(projectRulesCount), "Property is not nullable for class RulesCount.");

            return new RulesCount(allProjectClientApps, capPerClientApp, capPerProject, clientAppRulesCount, projectRulesCount);
        }

        /// <summary>
        /// Serializes a <see cref="RulesCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RulesCount rulesCount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rulesCount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RulesCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RulesCount rulesCount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rulesCount.AllProjectClientAppsOption.IsSet && rulesCount.AllProjectClientApps == null)
                throw new ArgumentNullException(nameof(rulesCount.AllProjectClientApps), "Property is required for class RulesCount.");

            if (rulesCount.ClientAppRulesCountOption.IsSet && rulesCount.ClientAppRulesCount == null)
                throw new ArgumentNullException(nameof(rulesCount.ClientAppRulesCount), "Property is required for class RulesCount.");

            if (rulesCount.AllProjectClientAppsOption.IsSet)
            {
                writer.WritePropertyName("all_project_client_apps");
                JsonSerializer.Serialize(writer, rulesCount.AllProjectClientApps, jsonSerializerOptions);
            }
            if (rulesCount.CapPerClientAppOption.IsSet)
                writer.WriteNumber("cap_per_client_app", rulesCount.CapPerClientAppOption.Value!.Value);

            if (rulesCount.CapPerProjectOption.IsSet)
                writer.WriteNumber("cap_per_project", rulesCount.CapPerProjectOption.Value!.Value);

            if (rulesCount.ClientAppRulesCountOption.IsSet)
            {
                writer.WritePropertyName("client_app_rules_count");
                JsonSerializer.Serialize(writer, rulesCount.ClientAppRulesCount, jsonSerializerOptions);
            }
            if (rulesCount.ProjectRulesCountOption.IsSet)
                writer.WriteNumber("project_rules_count", rulesCount.ProjectRulesCountOption.Value!.Value);
        }
    }
}
