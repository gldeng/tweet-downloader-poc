// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TweetEditControls
    /// </summary>
    public partial class TweetEditControls : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetEditControls" /> class.
        /// </summary>
        /// <param name="editableUntil">Time when Tweet is no longer editable.</param>
        /// <param name="editsRemaining">Number of times this Tweet can be edited.</param>
        /// <param name="isEditEligible">Indicates if this Tweet is eligible to be edited.</param>
        [JsonConstructor]
        public TweetEditControls(DateTime editableUntil, int editsRemaining, bool isEditEligible)
        {
            EditableUntil = editableUntil;
            EditsRemaining = editsRemaining;
            IsEditEligible = isEditEligible;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Time when Tweet is no longer editable.
        /// </summary>
        /// <value>Time when Tweet is no longer editable.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("editable_until")]
        public DateTime EditableUntil { get; set; }

        /// <summary>
        /// Number of times this Tweet can be edited.
        /// </summary>
        /// <value>Number of times this Tweet can be edited.</value>
        [JsonPropertyName("edits_remaining")]
        public int EditsRemaining { get; set; }

        /// <summary>
        /// Indicates if this Tweet is eligible to be edited.
        /// </summary>
        /// <value>Indicates if this Tweet is eligible to be edited.</value>
        /* <example>false</example> */
        [JsonPropertyName("is_edit_eligible")]
        public bool IsEditEligible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetEditControls {\n");
            sb.Append("  EditableUntil: ").Append(EditableUntil).Append("\n");
            sb.Append("  EditsRemaining: ").Append(EditsRemaining).Append("\n");
            sb.Append("  IsEditEligible: ").Append(IsEditEligible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetEditControls" />
    /// </summary>
    public class TweetEditControlsJsonConverter : JsonConverter<TweetEditControls>
    {
        /// <summary>
        /// The format to use to serialize EditableUntil
        /// </summary>
        public static string EditableUntilFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TweetEditControls" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetEditControls Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> editableUntil = default;
            Option<int?> editsRemaining = default;
            Option<bool?> isEditEligible = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "editable_until":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                editableUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "edits_remaining":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                editsRemaining = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "is_edit_eligible":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isEditEligible = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!editableUntil.IsSet)
                throw new ArgumentException("Property is required for class TweetEditControls.", nameof(editableUntil));

            if (!editsRemaining.IsSet)
                throw new ArgumentException("Property is required for class TweetEditControls.", nameof(editsRemaining));

            if (!isEditEligible.IsSet)
                throw new ArgumentException("Property is required for class TweetEditControls.", nameof(isEditEligible));

            if (editableUntil.IsSet && editableUntil.Value == null)
                throw new ArgumentNullException(nameof(editableUntil), "Property is not nullable for class TweetEditControls.");

            if (editsRemaining.IsSet && editsRemaining.Value == null)
                throw new ArgumentNullException(nameof(editsRemaining), "Property is not nullable for class TweetEditControls.");

            if (isEditEligible.IsSet && isEditEligible.Value == null)
                throw new ArgumentNullException(nameof(isEditEligible), "Property is not nullable for class TweetEditControls.");

            return new TweetEditControls(editableUntil.Value!.Value!, editsRemaining.Value!.Value!, isEditEligible.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TweetEditControls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetEditControls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetEditControls tweetEditControls, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetEditControls, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetEditControls" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetEditControls"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetEditControls tweetEditControls, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("editable_until", tweetEditControls.EditableUntil.ToString(EditableUntilFormat));

            writer.WriteNumber("edits_remaining", tweetEditControls.EditsRemaining);

            writer.WriteBoolean("is_edit_eligible", tweetEditControls.IsEditEligible);
        }
    }
}
