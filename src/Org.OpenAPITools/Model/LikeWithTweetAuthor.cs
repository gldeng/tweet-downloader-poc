// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A Like event, with the tweet author user and the tweet being liked
    /// </summary>
    public partial class LikeWithTweetAuthor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LikeWithTweetAuthor" /> class.
        /// </summary>
        /// <param name="createdAt">Creation time of the Tweet.</param>
        /// <param name="id">The unique identifier of this Like.</param>
        /// <param name="likedTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="timestampMs">Timestamp in milliseconds of creation.</param>
        /// <param name="tweetAuthorId">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        [JsonConstructor]
        public LikeWithTweetAuthor(Option<DateTime?> createdAt = default, Option<string?> id = default, Option<string?> likedTweetId = default, Option<int?> timestampMs = default, Option<string?> tweetAuthorId = default)
        {
            CreatedAtOption = createdAt;
            IdOption = id;
            LikedTweetIdOption = likedTweetId;
            TimestampMsOption = timestampMs;
            TweetAuthorIdOption = tweetAuthorId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Creation time of the Tweet.
        /// </summary>
        /// <value>Creation time of the Tweet.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Like.
        /// </summary>
        /// <value>The unique identifier of this Like.</value>
        /* <example>8ba4f34e6235d905a46bac021d98e923</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of LikedTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LikedTweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("liked_tweet_id")]
        public string? LikedTweetId { get { return this.LikedTweetIdOption; } set { this.LikedTweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimestampMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampMsOption { get; private set; }

        /// <summary>
        /// Timestamp in milliseconds of creation.
        /// </summary>
        /// <value>Timestamp in milliseconds of creation.</value>
        [JsonPropertyName("timestamp_ms")]
        public int? TimestampMs { get { return this.TimestampMsOption; } set { this.TimestampMsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TweetAuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TweetAuthorIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("tweet_author_id")]
        public string? TweetAuthorId { get { return this.TweetAuthorIdOption; } set { this.TweetAuthorIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LikeWithTweetAuthor {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LikedTweetId: ").Append(LikedTweetId).Append("\n");
            sb.Append("  TimestampMs: ").Append(TimestampMs).Append("\n");
            sb.Append("  TweetAuthorId: ").Append(TweetAuthorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.IdOption.Value != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[A-Za-z0-9_]{1,40}$", RegexOptions.CultureInvariant);

                if (this.IdOption.Value != null &&!regexId.Match(this.IdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.LikedTweetIdOption.Value != null) {
                // LikedTweetId (string) pattern
                Regex regexLikedTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.LikedTweetIdOption.Value != null &&!regexLikedTweetId.Match(this.LikedTweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LikedTweetId, must match a pattern of " + regexLikedTweetId, new [] { "LikedTweetId" });
                }
            }

            if (this.TweetAuthorIdOption.Value != null) {
                // TweetAuthorId (string) pattern
                Regex regexTweetAuthorId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.TweetAuthorIdOption.Value != null &&!regexTweetAuthorId.Match(this.TweetAuthorIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TweetAuthorId, must match a pattern of " + regexTweetAuthorId, new [] { "TweetAuthorId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LikeWithTweetAuthor" />
    /// </summary>
    public class LikeWithTweetAuthorJsonConverter : JsonConverter<LikeWithTweetAuthor>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="LikeWithTweetAuthor" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LikeWithTweetAuthor Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<string?> likedTweetId = default;
            Option<int?> timestampMs = default;
            Option<string?> tweetAuthorId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "liked_tweet_id":
                            likedTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp_ms":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timestampMs = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tweet_author_id":
                            tweetAuthorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class LikeWithTweetAuthor.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class LikeWithTweetAuthor.");

            if (likedTweetId.IsSet && likedTweetId.Value == null)
                throw new ArgumentNullException(nameof(likedTweetId), "Property is not nullable for class LikeWithTweetAuthor.");

            if (timestampMs.IsSet && timestampMs.Value == null)
                throw new ArgumentNullException(nameof(timestampMs), "Property is not nullable for class LikeWithTweetAuthor.");

            if (tweetAuthorId.IsSet && tweetAuthorId.Value == null)
                throw new ArgumentNullException(nameof(tweetAuthorId), "Property is not nullable for class LikeWithTweetAuthor.");

            return new LikeWithTweetAuthor(createdAt, id, likedTweetId, timestampMs, tweetAuthorId);
        }

        /// <summary>
        /// Serializes a <see cref="LikeWithTweetAuthor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="likeWithTweetAuthor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LikeWithTweetAuthor likeWithTweetAuthor, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, likeWithTweetAuthor, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LikeWithTweetAuthor" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="likeWithTweetAuthor"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LikeWithTweetAuthor likeWithTweetAuthor, JsonSerializerOptions jsonSerializerOptions)
        {
            if (likeWithTweetAuthor.IdOption.IsSet && likeWithTweetAuthor.Id == null)
                throw new ArgumentNullException(nameof(likeWithTweetAuthor.Id), "Property is required for class LikeWithTweetAuthor.");

            if (likeWithTweetAuthor.LikedTweetIdOption.IsSet && likeWithTweetAuthor.LikedTweetId == null)
                throw new ArgumentNullException(nameof(likeWithTweetAuthor.LikedTweetId), "Property is required for class LikeWithTweetAuthor.");

            if (likeWithTweetAuthor.TweetAuthorIdOption.IsSet && likeWithTweetAuthor.TweetAuthorId == null)
                throw new ArgumentNullException(nameof(likeWithTweetAuthor.TweetAuthorId), "Property is required for class LikeWithTweetAuthor.");

            if (likeWithTweetAuthor.CreatedAtOption.IsSet)
                writer.WriteString("created_at", likeWithTweetAuthor.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (likeWithTweetAuthor.IdOption.IsSet)
                writer.WriteString("id", likeWithTweetAuthor.Id);

            if (likeWithTweetAuthor.LikedTweetIdOption.IsSet)
                writer.WriteString("liked_tweet_id", likeWithTweetAuthor.LikedTweetId);

            if (likeWithTweetAuthor.TimestampMsOption.IsSet)
                writer.WriteNumber("timestamp_ms", likeWithTweetAuthor.TimestampMsOption.Value!.Value);

            if (likeWithTweetAuthor.TweetAuthorIdOption.IsSet)
                writer.WriteString("tweet_author_id", likeWithTweetAuthor.TweetAuthorId);
        }
    }
}
