// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Sticker
    /// </summary>
    public partial class Sticker : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sticker" /> class.
        /// </summary>
        /// <param name="aspectRatio">width-to-height ratio of the media</param>
        /// <param name="groupAnnotationId">A unique identifier for the group of annotations associated with the media</param>
        /// <param name="id">Unique identifier for sticker</param>
        /// <param name="stickerSetAnnotationId">A unique identifier for the sticker set associated with the media</param>
        /// <param name="transformA">Scale or rotate the media on the x-axis</param>
        /// <param name="transformB">Skew the media on the x-axis</param>
        /// <param name="transformC">Skew the media on the y-axis</param>
        /// <param name="transformD">Scale or rotate the media on the y-axis</param>
        /// <param name="transformTx">Scale or rotate the media on the x-axis</param>
        /// <param name="transformTy">The vertical translation (shift) value for the media</param>
        [JsonConstructor]
        public Sticker(Option<double?> aspectRatio = default, Option<decimal?> groupAnnotationId = default, Option<string?> id = default, Option<decimal?> stickerSetAnnotationId = default, Option<double?> transformA = default, Option<double?> transformB = default, Option<double?> transformC = default, Option<double?> transformD = default, Option<double?> transformTx = default, Option<double?> transformTy = default)
        {
            AspectRatioOption = aspectRatio;
            GroupAnnotationIdOption = groupAnnotationId;
            IdOption = id;
            StickerSetAnnotationIdOption = stickerSetAnnotationId;
            TransformAOption = transformA;
            TransformBOption = transformB;
            TransformCOption = transformC;
            TransformDOption = transformD;
            TransformTxOption = transformTx;
            TransformTyOption = transformTy;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AspectRatio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> AspectRatioOption { get; private set; }

        /// <summary>
        /// width-to-height ratio of the media
        /// </summary>
        /// <value>width-to-height ratio of the media</value>
        /* <example>1.78</example> */
        [JsonPropertyName("aspect_ratio")]
        public double? AspectRatio { get { return this.AspectRatioOption; } set { this.AspectRatioOption = new(value); } }

        /// <summary>
        /// Used to track the state of GroupAnnotationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> GroupAnnotationIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for the group of annotations associated with the media
        /// </summary>
        /// <value>A unique identifier for the group of annotations associated with the media</value>
        /* <example>987654321098765</example> */
        [JsonPropertyName("group_annotation_id")]
        public decimal? GroupAnnotationId { get { return this.GroupAnnotationIdOption; } set { this.GroupAnnotationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Unique identifier for sticker
        /// </summary>
        /// <value>Unique identifier for sticker</value>
        /* <example>12345</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StickerSetAnnotationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StickerSetAnnotationIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for the sticker set associated with the media
        /// </summary>
        /// <value>A unique identifier for the sticker set associated with the media</value>
        /* <example>123456789012345</example> */
        [JsonPropertyName("sticker_set_annotation_id")]
        public decimal? StickerSetAnnotationId { get { return this.StickerSetAnnotationIdOption; } set { this.StickerSetAnnotationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformA
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformAOption { get; private set; }

        /// <summary>
        /// Scale or rotate the media on the x-axis
        /// </summary>
        /// <value>Scale or rotate the media on the x-axis</value>
        /* <example>1.0</example> */
        [JsonPropertyName("transform_a")]
        public double? TransformA { get { return this.TransformAOption; } set { this.TransformAOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformB
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformBOption { get; private set; }

        /// <summary>
        /// Skew the media on the x-axis
        /// </summary>
        /// <value>Skew the media on the x-axis</value>
        /* <example>0.0</example> */
        [JsonPropertyName("transform_b")]
        public double? TransformB { get { return this.TransformBOption; } set { this.TransformBOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformC
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformCOption { get; private set; }

        /// <summary>
        /// Skew the media on the y-axis
        /// </summary>
        /// <value>Skew the media on the y-axis</value>
        /* <example>0.0</example> */
        [JsonPropertyName("transform_c")]
        public double? TransformC { get { return this.TransformCOption; } set { this.TransformCOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformDOption { get; private set; }

        /// <summary>
        /// Scale or rotate the media on the y-axis
        /// </summary>
        /// <value>Scale or rotate the media on the y-axis</value>
        /* <example>1.0</example> */
        [JsonPropertyName("transform_d")]
        public double? TransformD { get { return this.TransformDOption; } set { this.TransformDOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformTx
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformTxOption { get; private set; }

        /// <summary>
        /// Scale or rotate the media on the x-axis
        /// </summary>
        /// <value>Scale or rotate the media on the x-axis</value>
        /* <example>10.5</example> */
        [JsonPropertyName("transform_tx")]
        public double? TransformTx { get { return this.TransformTxOption; } set { this.TransformTxOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransformTy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> TransformTyOption { get; private set; }

        /// <summary>
        /// The vertical translation (shift) value for the media
        /// </summary>
        /// <value>The vertical translation (shift) value for the media</value>
        /* <example>-5.2</example> */
        [JsonPropertyName("transform_ty")]
        public double? TransformTy { get { return this.TransformTyOption; } set { this.TransformTyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sticker {\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  GroupAnnotationId: ").Append(GroupAnnotationId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StickerSetAnnotationId: ").Append(StickerSetAnnotationId).Append("\n");
            sb.Append("  TransformA: ").Append(TransformA).Append("\n");
            sb.Append("  TransformB: ").Append(TransformB).Append("\n");
            sb.Append("  TransformC: ").Append(TransformC).Append("\n");
            sb.Append("  TransformD: ").Append(TransformD).Append("\n");
            sb.Append("  TransformTx: ").Append(TransformTx).Append("\n");
            sb.Append("  TransformTy: ").Append(TransformTy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Sticker" />
    /// </summary>
    public class StickerJsonConverter : JsonConverter<Sticker>
    {
        /// <summary>
        /// Deserializes json to <see cref="Sticker" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Sticker Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> aspectRatio = default;
            Option<decimal?> groupAnnotationId = default;
            Option<string?> id = default;
            Option<decimal?> stickerSetAnnotationId = default;
            Option<double?> transformA = default;
            Option<double?> transformB = default;
            Option<double?> transformC = default;
            Option<double?> transformD = default;
            Option<double?> transformTx = default;
            Option<double?> transformTy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aspect_ratio":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                aspectRatio = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "group_annotation_id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                groupAnnotationId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sticker_set_annotation_id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stickerSetAnnotationId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "transform_a":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformA = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "transform_b":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformB = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "transform_c":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformC = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "transform_d":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformD = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "transform_tx":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformTx = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "transform_ty":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transformTy = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aspectRatio.IsSet && aspectRatio.Value == null)
                throw new ArgumentNullException(nameof(aspectRatio), "Property is not nullable for class Sticker.");

            if (groupAnnotationId.IsSet && groupAnnotationId.Value == null)
                throw new ArgumentNullException(nameof(groupAnnotationId), "Property is not nullable for class Sticker.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Sticker.");

            if (stickerSetAnnotationId.IsSet && stickerSetAnnotationId.Value == null)
                throw new ArgumentNullException(nameof(stickerSetAnnotationId), "Property is not nullable for class Sticker.");

            if (transformA.IsSet && transformA.Value == null)
                throw new ArgumentNullException(nameof(transformA), "Property is not nullable for class Sticker.");

            if (transformB.IsSet && transformB.Value == null)
                throw new ArgumentNullException(nameof(transformB), "Property is not nullable for class Sticker.");

            if (transformC.IsSet && transformC.Value == null)
                throw new ArgumentNullException(nameof(transformC), "Property is not nullable for class Sticker.");

            if (transformD.IsSet && transformD.Value == null)
                throw new ArgumentNullException(nameof(transformD), "Property is not nullable for class Sticker.");

            if (transformTx.IsSet && transformTx.Value == null)
                throw new ArgumentNullException(nameof(transformTx), "Property is not nullable for class Sticker.");

            if (transformTy.IsSet && transformTy.Value == null)
                throw new ArgumentNullException(nameof(transformTy), "Property is not nullable for class Sticker.");

            return new Sticker(aspectRatio, groupAnnotationId, id, stickerSetAnnotationId, transformA, transformB, transformC, transformD, transformTx, transformTy);
        }

        /// <summary>
        /// Serializes a <see cref="Sticker" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sticker"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Sticker sticker, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sticker, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Sticker" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sticker"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Sticker sticker, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sticker.IdOption.IsSet && sticker.Id == null)
                throw new ArgumentNullException(nameof(sticker.Id), "Property is required for class Sticker.");

            if (sticker.AspectRatioOption.IsSet)
                writer.WriteNumber("aspect_ratio", sticker.AspectRatioOption.Value!.Value);

            if (sticker.GroupAnnotationIdOption.IsSet)
                writer.WriteNumber("group_annotation_id", sticker.GroupAnnotationIdOption.Value!.Value);

            if (sticker.IdOption.IsSet)
                writer.WriteString("id", sticker.Id);

            if (sticker.StickerSetAnnotationIdOption.IsSet)
                writer.WriteNumber("sticker_set_annotation_id", sticker.StickerSetAnnotationIdOption.Value!.Value);

            if (sticker.TransformAOption.IsSet)
                writer.WriteNumber("transform_a", sticker.TransformAOption.Value!.Value);

            if (sticker.TransformBOption.IsSet)
                writer.WriteNumber("transform_b", sticker.TransformBOption.Value!.Value);

            if (sticker.TransformCOption.IsSet)
                writer.WriteNumber("transform_c", sticker.TransformCOption.Value!.Value);

            if (sticker.TransformDOption.IsSet)
                writer.WriteNumber("transform_d", sticker.TransformDOption.Value!.Value);

            if (sticker.TransformTxOption.IsSet)
                writer.WriteNumber("transform_tx", sticker.TransformTxOption.Value!.Value);

            if (sticker.TransformTyOption.IsSet)
                writer.WriteNumber("transform_ty", sticker.TransformTyOption.Value!.Value);
        }
    }
}
