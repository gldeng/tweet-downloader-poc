// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Place
    /// </summary>
    public partial class Place : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Place" /> class.
        /// </summary>
        /// <param name="fullName">The full name of this place.</param>
        /// <param name="id">The identifier for this place.</param>
        /// <param name="containedWithin">containedWithin</param>
        /// <param name="country">The full name of the county in which this place exists.</param>
        /// <param name="countryCode">A two-letter ISO 3166-1 alpha-2 country code.</param>
        /// <param name="geo">geo</param>
        /// <param name="name">The human readable name of this place.</param>
        /// <param name="placeType">placeType</param>
        [JsonConstructor]
        public Place(string fullName, string id, Option<List<string>?> containedWithin = default, Option<string?> country = default, Option<string?> countryCode = default, Option<Geo?> geo = default, Option<string?> name = default, Option<PlaceType?> placeType = default)
        {
            FullName = fullName;
            Id = id;
            ContainedWithinOption = containedWithin;
            CountryOption = country;
            CountryCodeOption = countryCode;
            GeoOption = geo;
            NameOption = name;
            PlaceTypeOption = placeType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PlaceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlaceType?> PlaceTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PlaceType
        /// </summary>
        [JsonPropertyName("place_type")]
        public PlaceType? PlaceType { get { return this.PlaceTypeOption; } set { this.PlaceTypeOption = new(value); } }

        /// <summary>
        /// The full name of this place.
        /// </summary>
        /// <value>The full name of this place.</value>
        /* <example>Lakewood, CO</example> */
        [JsonPropertyName("full_name")]
        public string FullName { get; set; }

        /// <summary>
        /// The identifier for this place.
        /// </summary>
        /// <value>The identifier for this place.</value>
        /* <example>f7eb2fa2fea288b1</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of ContainedWithin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ContainedWithinOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContainedWithin
        /// </summary>
        [JsonPropertyName("contained_within")]
        public List<string>? ContainedWithin { get { return this.ContainedWithinOption; } set { this.ContainedWithinOption = new(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// The full name of the county in which this place exists.
        /// </summary>
        /// <value>The full name of the county in which this place exists.</value>
        /* <example>United States</example> */
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; private set; }

        /// <summary>
        /// A two-letter ISO 3166-1 alpha-2 country code.
        /// </summary>
        /// <value>A two-letter ISO 3166-1 alpha-2 country code.</value>
        /* <example>US</example> */
        [JsonPropertyName("country_code")]
        public string? CountryCode { get { return this.CountryCodeOption; } set { this.CountryCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Geo?> GeoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geo
        /// </summary>
        [JsonPropertyName("geo")]
        public Geo? Geo { get { return this.GeoOption; } set { this.GeoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// The human readable name of this place.
        /// </summary>
        /// <value>The human readable name of this place.</value>
        /* <example>Lakewood</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Place {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContainedWithin: ").Append(ContainedWithin).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Geo: ").Append(Geo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlaceType: ").Append(PlaceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CountryCodeOption.Value != null) {
                // CountryCode (string) pattern
                Regex regexCountryCode = new Regex(@"^[A-Z]{2}$", RegexOptions.CultureInvariant);

                if (this.CountryCodeOption.Value != null &&!regexCountryCode.Match(this.CountryCodeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, must match a pattern of " + regexCountryCode, new [] { "CountryCode" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Place" />
    /// </summary>
    public class PlaceJsonConverter : JsonConverter<Place>
    {
        /// <summary>
        /// Deserializes json to <see cref="Place" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Place Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fullName = default;
            Option<string?> id = default;
            Option<List<string>?> containedWithin = default;
            Option<string?> country = default;
            Option<string?> countryCode = default;
            Option<Geo?> geo = default;
            Option<string?> name = default;
            Option<PlaceType?> placeType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "full_name":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contained_within":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                containedWithin = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "country_code":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "geo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                geo = new Option<Geo?>(JsonSerializer.Deserialize<Geo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "place_type":
                            string? placeTypeRawValue = utf8JsonReader.GetString();
                            if (placeTypeRawValue != null)
                                placeType = new Option<PlaceType?>(PlaceTypeValueConverter.FromStringOrDefault(placeTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fullName.IsSet)
                throw new ArgumentException("Property is required for class Place.", nameof(fullName));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Place.", nameof(id));

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class Place.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Place.");

            if (containedWithin.IsSet && containedWithin.Value == null)
                throw new ArgumentNullException(nameof(containedWithin), "Property is not nullable for class Place.");

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class Place.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class Place.");

            if (geo.IsSet && geo.Value == null)
                throw new ArgumentNullException(nameof(geo), "Property is not nullable for class Place.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Place.");

            if (placeType.IsSet && placeType.Value == null)
                throw new ArgumentNullException(nameof(placeType), "Property is not nullable for class Place.");

            return new Place(fullName.Value!, id.Value!, containedWithin, country, countryCode, geo, name, placeType);
        }

        /// <summary>
        /// Serializes a <see cref="Place" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="place"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Place place, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, place, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Place" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="place"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Place place, JsonSerializerOptions jsonSerializerOptions)
        {
            if (place.FullName == null)
                throw new ArgumentNullException(nameof(place.FullName), "Property is required for class Place.");

            if (place.Id == null)
                throw new ArgumentNullException(nameof(place.Id), "Property is required for class Place.");

            if (place.ContainedWithinOption.IsSet && place.ContainedWithin == null)
                throw new ArgumentNullException(nameof(place.ContainedWithin), "Property is required for class Place.");

            if (place.CountryOption.IsSet && place.Country == null)
                throw new ArgumentNullException(nameof(place.Country), "Property is required for class Place.");

            if (place.CountryCodeOption.IsSet && place.CountryCode == null)
                throw new ArgumentNullException(nameof(place.CountryCode), "Property is required for class Place.");

            if (place.GeoOption.IsSet && place.Geo == null)
                throw new ArgumentNullException(nameof(place.Geo), "Property is required for class Place.");

            if (place.NameOption.IsSet && place.Name == null)
                throw new ArgumentNullException(nameof(place.Name), "Property is required for class Place.");

            writer.WriteString("full_name", place.FullName);

            writer.WriteString("id", place.Id);

            if (place.ContainedWithinOption.IsSet)
            {
                writer.WritePropertyName("contained_within");
                JsonSerializer.Serialize(writer, place.ContainedWithin, jsonSerializerOptions);
            }
            if (place.CountryOption.IsSet)
                writer.WriteString("country", place.Country);

            if (place.CountryCodeOption.IsSet)
                writer.WriteString("country_code", place.CountryCode);

            if (place.GeoOption.IsSet)
            {
                writer.WritePropertyName("geo");
                JsonSerializer.Serialize(writer, place.Geo, jsonSerializerOptions);
            }
            if (place.NameOption.IsSet)
                writer.WriteString("name", place.Name);

            if (place.PlaceTypeOption.IsSet)
            {
                var placeTypeRawValue = PlaceTypeValueConverter.ToJsonValue(place.PlaceType!.Value);
                writer.WriteString("place_type", placeTypeRawValue);
            }
        }
    }
}
