// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
    /// </summary>
    public partial class UserWithheld : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserWithheld" /> class.
        /// </summary>
        /// <param name="countryCodes">Provides a list of countries where this content is not available.</param>
        /// <param name="scope">Indicates that the content being withheld is a &#x60;user&#x60;.</param>
        [JsonConstructor]
        public UserWithheld(List<string> countryCodes, Option<ScopeEnum?> scope = default)
        {
            CountryCodes = countryCodes;
            ScopeOption = scope;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Indicates that the content being withheld is a &#x60;user&#x60;.
        /// </summary>
        /// <value>Indicates that the content being withheld is a &#x60;user&#x60;.</value>
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            User = 1
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScopeEnum ScopeEnumFromString(string value)
        {
            if (value.Equals("user"))
                return ScopeEnum.User;

            throw new NotImplementedException($"Could not convert value to type ScopeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScopeEnum? ScopeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("user"))
                return ScopeEnum.User;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScopeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScopeEnumToJsonValue(ScopeEnum? value)
        {
            if (value == ScopeEnum.User)
                return "user";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ScopeEnum?> ScopeOption { get; private set; }

        /// <summary>
        /// Indicates that the content being withheld is a &#x60;user&#x60;.
        /// </summary>
        /// <value>Indicates that the content being withheld is a &#x60;user&#x60;.</value>
        [JsonPropertyName("scope")]
        public ScopeEnum? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new(value); } }

        /// <summary>
        /// Provides a list of countries where this content is not available.
        /// </summary>
        /// <value>Provides a list of countries where this content is not available.</value>
        [JsonPropertyName("country_codes")]
        public List<string> CountryCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserWithheld {\n");
            sb.Append("  CountryCodes: ").Append(CountryCodes).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserWithheld" />
    /// </summary>
    public class UserWithheldJsonConverter : JsonConverter<UserWithheld>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserWithheld" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserWithheld Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> countryCodes = default;
            Option<UserWithheld.ScopeEnum?> scope = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "country_codes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                countryCodes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "scope":
                            string? scopeRawValue = utf8JsonReader.GetString();
                            if (scopeRawValue != null)
                                scope = new Option<UserWithheld.ScopeEnum?>(UserWithheld.ScopeEnumFromStringOrDefault(scopeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!countryCodes.IsSet)
                throw new ArgumentException("Property is required for class UserWithheld.", nameof(countryCodes));

            if (countryCodes.IsSet && countryCodes.Value == null)
                throw new ArgumentNullException(nameof(countryCodes), "Property is not nullable for class UserWithheld.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class UserWithheld.");

            return new UserWithheld(countryCodes.Value!, scope);
        }

        /// <summary>
        /// Serializes a <see cref="UserWithheld" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userWithheld"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserWithheld userWithheld, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userWithheld, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserWithheld" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userWithheld"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserWithheld userWithheld, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userWithheld.CountryCodes == null)
                throw new ArgumentNullException(nameof(userWithheld.CountryCodes), "Property is required for class UserWithheld.");

            writer.WritePropertyName("country_codes");
            JsonSerializer.Serialize(writer, userWithheld.CountryCodes, jsonSerializerOptions);
            var scopeRawValue = UserWithheld.ScopeEnumToJsonValue(userWithheld.ScopeOption.Value!.Value);
            writer.WriteString("scope", scopeRawValue);
        }
    }
}
