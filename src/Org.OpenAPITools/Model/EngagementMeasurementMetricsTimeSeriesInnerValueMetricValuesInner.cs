// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner
    /// </summary>
    public partial class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner" /> class.
        /// </summary>
        /// <param name="metricType">metricType</param>
        /// <param name="metricValue">metricValue</param>
        [JsonConstructor]
        public EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner(Option<string?> metricType = default, Option<decimal?> metricValue = default)
        {
            MetricTypeOption = metricType;
            MetricValueOption = metricValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MetricType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MetricTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetricType
        /// </summary>
        [JsonPropertyName("metric_type")]
        public string? MetricType { get { return this.MetricTypeOption; } set { this.MetricTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MetricValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MetricValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetricValue
        /// </summary>
        [JsonPropertyName("metric_value")]
        public decimal? MetricValue { get { return this.MetricValueOption; } set { this.MetricValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner {\n");
            sb.Append("  MetricType: ").Append(MetricType).Append("\n");
            sb.Append("  MetricValue: ").Append(MetricValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner" />
    /// </summary>
    public class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInnerJsonConverter : JsonConverter<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> metricType = default;
            Option<decimal?> metricValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metric_type":
                            metricType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "metric_value":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metricValue = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metricType.IsSet && metricType.Value == null)
                throw new ArgumentNullException(nameof(metricType), "Property is not nullable for class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.");

            if (metricValue.IsSet && metricValue.Value == null)
                throw new ArgumentNullException(nameof(metricValue), "Property is not nullable for class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.");

            return new EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner(metricType, metricValue);
        }

        /// <summary>
        /// Serializes a <see cref="EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricTypeOption.IsSet && engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricType == null)
                throw new ArgumentNullException(nameof(engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricType), "Property is required for class EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.");

            if (engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricTypeOption.IsSet)
                writer.WriteString("metric_type", engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricType);

            if (engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricValueOption.IsSet)
                writer.WriteNumber("metric_value", engagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner.MetricValueOption.Value!.Value);
        }
    }
}
