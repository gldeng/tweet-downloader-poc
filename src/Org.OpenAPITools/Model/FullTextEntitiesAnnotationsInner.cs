// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Annotation for entities based on the Tweet text.
    /// </summary>
    public partial class FullTextEntitiesAnnotationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FullTextEntitiesAnnotationsInner" /> class.
        /// </summary>
        /// <param name="end">Index (zero-based) at which position this entity ends.  The index is inclusive.</param>
        /// <param name="start">Index (zero-based) at which position this entity starts.  The index is inclusive.</param>
        /// <param name="normalizedText">Text used to determine annotation.</param>
        /// <param name="probability">Confidence factor for annotation type.</param>
        /// <param name="type">Annotation type.</param>
        [JsonConstructor]
        public FullTextEntitiesAnnotationsInner(int end, int start, Option<string?> normalizedText = default, Option<double?> probability = default, Option<string?> type = default)
        {
            End = end;
            Start = start;
            NormalizedTextOption = normalizedText;
            ProbabilityOption = probability;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Index (zero-based) at which position this entity ends.  The index is inclusive.
        /// </summary>
        /// <value>Index (zero-based) at which position this entity ends.  The index is inclusive.</value>
        /* <example>61</example> */
        [JsonPropertyName("end")]
        public int End { get; set; }

        /// <summary>
        /// Index (zero-based) at which position this entity starts.  The index is inclusive.
        /// </summary>
        /// <value>Index (zero-based) at which position this entity starts.  The index is inclusive.</value>
        /* <example>50</example> */
        [JsonPropertyName("start")]
        public int Start { get; set; }

        /// <summary>
        /// Used to track the state of NormalizedText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NormalizedTextOption { get; private set; }

        /// <summary>
        /// Text used to determine annotation.
        /// </summary>
        /// <value>Text used to determine annotation.</value>
        /* <example>Barack Obama</example> */
        [JsonPropertyName("normalized_text")]
        public string? NormalizedText { get { return this.NormalizedTextOption; } set { this.NormalizedTextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Probability
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> ProbabilityOption { get; private set; }

        /// <summary>
        /// Confidence factor for annotation type.
        /// </summary>
        /// <value>Confidence factor for annotation type.</value>
        [JsonPropertyName("probability")]
        public double? Probability { get { return this.ProbabilityOption; } set { this.ProbabilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Annotation type.
        /// </summary>
        /// <value>Annotation type.</value>
        /* <example>Person</example> */
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FullTextEntitiesAnnotationsInner {\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  NormalizedText: ").Append(NormalizedText).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // End (int) minimum
            if (this.End < (int)0)
            {
                yield return new ValidationResult("Invalid value for End, must be a value greater than or equal to 0.", new [] { "End" });
            }

            // Start (int) minimum
            if (this.Start < (int)0)
            {
                yield return new ValidationResult("Invalid value for Start, must be a value greater than or equal to 0.", new [] { "Start" });
            }

            // Probability (double) maximum
            if (this.ProbabilityOption.IsSet && this.ProbabilityOption.Value > (double)1)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value less than or equal to 1.", new [] { "Probability" });
            }

            // Probability (double) minimum
            if (this.ProbabilityOption.IsSet && this.ProbabilityOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for Probability, must be a value greater than or equal to 0.", new [] { "Probability" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FullTextEntitiesAnnotationsInner" />
    /// </summary>
    public class FullTextEntitiesAnnotationsInnerJsonConverter : JsonConverter<FullTextEntitiesAnnotationsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="FullTextEntitiesAnnotationsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FullTextEntitiesAnnotationsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> end = default;
            Option<int?> start = default;
            Option<string?> normalizedText = default;
            Option<double?> probability = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "end":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                end = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "start":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                start = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "normalized_text":
                            normalizedText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "probability":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                probability = new Option<double?>(utf8JsonReader.GetDouble());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!end.IsSet)
                throw new ArgumentException("Property is required for class FullTextEntitiesAnnotationsInner.", nameof(end));

            if (!start.IsSet)
                throw new ArgumentException("Property is required for class FullTextEntitiesAnnotationsInner.", nameof(start));

            if (end.IsSet && end.Value == null)
                throw new ArgumentNullException(nameof(end), "Property is not nullable for class FullTextEntitiesAnnotationsInner.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class FullTextEntitiesAnnotationsInner.");

            if (normalizedText.IsSet && normalizedText.Value == null)
                throw new ArgumentNullException(nameof(normalizedText), "Property is not nullable for class FullTextEntitiesAnnotationsInner.");

            if (probability.IsSet && probability.Value == null)
                throw new ArgumentNullException(nameof(probability), "Property is not nullable for class FullTextEntitiesAnnotationsInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FullTextEntitiesAnnotationsInner.");

            return new FullTextEntitiesAnnotationsInner(end.Value!.Value!, start.Value!.Value!, normalizedText, probability, type);
        }

        /// <summary>
        /// Serializes a <see cref="FullTextEntitiesAnnotationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fullTextEntitiesAnnotationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FullTextEntitiesAnnotationsInner fullTextEntitiesAnnotationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fullTextEntitiesAnnotationsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FullTextEntitiesAnnotationsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fullTextEntitiesAnnotationsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FullTextEntitiesAnnotationsInner fullTextEntitiesAnnotationsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fullTextEntitiesAnnotationsInner.NormalizedTextOption.IsSet && fullTextEntitiesAnnotationsInner.NormalizedText == null)
                throw new ArgumentNullException(nameof(fullTextEntitiesAnnotationsInner.NormalizedText), "Property is required for class FullTextEntitiesAnnotationsInner.");

            if (fullTextEntitiesAnnotationsInner.TypeOption.IsSet && fullTextEntitiesAnnotationsInner.Type == null)
                throw new ArgumentNullException(nameof(fullTextEntitiesAnnotationsInner.Type), "Property is required for class FullTextEntitiesAnnotationsInner.");

            writer.WriteNumber("end", fullTextEntitiesAnnotationsInner.End);

            writer.WriteNumber("start", fullTextEntitiesAnnotationsInner.Start);

            if (fullTextEntitiesAnnotationsInner.NormalizedTextOption.IsSet)
                writer.WriteString("normalized_text", fullTextEntitiesAnnotationsInner.NormalizedText);

            if (fullTextEntitiesAnnotationsInner.ProbabilityOption.IsSet)
                writer.WriteNumber("probability", fullTextEntitiesAnnotationsInner.ProbabilityOption.Value!.Value);

            if (fullTextEntitiesAnnotationsInner.TypeOption.IsSet)
                writer.WriteString("type", fullTextEntitiesAnnotationsInner.Type);
        }
    }
}
