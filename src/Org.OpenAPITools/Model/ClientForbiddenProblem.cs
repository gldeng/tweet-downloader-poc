// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A problem that indicates your client is forbidden from making this request.
    /// </summary>
    public partial class ClientForbiddenProblem : Problem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientForbiddenProblem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        /// <param name="reason">reason</param>
        /// <param name="registrationUrl">registrationUrl</param>
        [JsonConstructor]
        public ClientForbiddenProblem(string title, Option<string?> detail = default, Option<int?> status = default, Option<ReasonEnum?> reason = default, Option<string?> registrationUrl = default) : base(title, detail, status)
        {
            ReasonOption = reason;
            RegistrationUrlOption = registrationUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Reason
        /// </summary>
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum OfficialClientForbidden for value: official-client-forbidden
            /// </summary>
            OfficialClientForbidden = 1,

            /// <summary>
            /// Enum ClientNotEnrolled for value: client-not-enrolled
            /// </summary>
            ClientNotEnrolled = 2
        }

        /// <summary>
        /// Returns a <see cref="ReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReasonEnum ReasonEnumFromString(string value)
        {
            if (value.Equals("official-client-forbidden"))
                return ReasonEnum.OfficialClientForbidden;

            if (value.Equals("client-not-enrolled"))
                return ReasonEnum.ClientNotEnrolled;

            throw new NotImplementedException($"Could not convert value to type ReasonEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReasonEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReasonEnum? ReasonEnumFromStringOrDefault(string value)
        {
            if (value.Equals("official-client-forbidden"))
                return ReasonEnum.OfficialClientForbidden;

            if (value.Equals("client-not-enrolled"))
                return ReasonEnum.ClientNotEnrolled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReasonEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReasonEnumToJsonValue(ReasonEnum? value)
        {
            if (value == ReasonEnum.OfficialClientForbidden)
                return "official-client-forbidden";

            if (value == ReasonEnum.ClientNotEnrolled)
                return "client-not-enrolled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReasonEnum?> ReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [JsonPropertyName("reason")]
        public ReasonEnum? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegistrationUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrationUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets RegistrationUrl
        /// </summary>
        [JsonPropertyName("registration_url")]
        public string? RegistrationUrl { get { return this.RegistrationUrlOption; } set { this.RegistrationUrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientForbiddenProblem {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RegistrationUrl: ").Append(RegistrationUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientForbiddenProblem" />
    /// </summary>
    public class ClientForbiddenProblemJsonConverter : JsonConverter<ClientForbiddenProblem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClientForbiddenProblem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClientForbiddenProblem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> detail = default;
            Option<int?> status = default;
            Option<ClientForbiddenProblem.ReasonEnum?> reason = default;
            Option<string?> registrationUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "reason":
                            string? reasonRawValue = utf8JsonReader.GetString();
                            if (reasonRawValue != null)
                                reason = new Option<ClientForbiddenProblem.ReasonEnum?>(ClientForbiddenProblem.ReasonEnumFromStringOrDefault(reasonRawValue));
                            break;
                        case "registration_url":
                            registrationUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ClientForbiddenProblem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ClientForbiddenProblem.", nameof(type));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ClientForbiddenProblem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ClientForbiddenProblem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class ClientForbiddenProblem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ClientForbiddenProblem.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class ClientForbiddenProblem.");

            if (registrationUrl.IsSet && registrationUrl.Value == null)
                throw new ArgumentNullException(nameof(registrationUrl), "Property is not nullable for class ClientForbiddenProblem.");

            return new ClientForbiddenProblem(title.Value!, detail, status, reason, registrationUrl);
        }

        /// <summary>
        /// Serializes a <see cref="ClientForbiddenProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientForbiddenProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClientForbiddenProblem clientForbiddenProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clientForbiddenProblem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClientForbiddenProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientForbiddenProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClientForbiddenProblem clientForbiddenProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clientForbiddenProblem.Title == null)
                throw new ArgumentNullException(nameof(clientForbiddenProblem.Title), "Property is required for class ClientForbiddenProblem.");

            if (clientForbiddenProblem.DetailOption.IsSet && clientForbiddenProblem.Detail == null)
                throw new ArgumentNullException(nameof(clientForbiddenProblem.Detail), "Property is required for class ClientForbiddenProblem.");

            if (clientForbiddenProblem.RegistrationUrlOption.IsSet && clientForbiddenProblem.RegistrationUrl == null)
                throw new ArgumentNullException(nameof(clientForbiddenProblem.RegistrationUrl), "Property is required for class ClientForbiddenProblem.");

            writer.WriteString("title", clientForbiddenProblem.Title);

            writer.WriteString("type", clientForbiddenProblem.Type);

            if (clientForbiddenProblem.DetailOption.IsSet)
                writer.WriteString("detail", clientForbiddenProblem.Detail);

            if (clientForbiddenProblem.StatusOption.IsSet)
                writer.WriteNumber("status", clientForbiddenProblem.StatusOption.Value!.Value);

            var reasonRawValue = ClientForbiddenProblem.ReasonEnumToJsonValue(clientForbiddenProblem.ReasonOption.Value!.Value);
            writer.WriteString("reason", reasonRawValue);
            if (clientForbiddenProblem.RegistrationUrlOption.IsSet)
                writer.WriteString("registration_url", clientForbiddenProblem.RegistrationUrl);
        }
    }
}
