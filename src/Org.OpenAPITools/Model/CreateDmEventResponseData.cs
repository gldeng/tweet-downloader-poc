// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateDmEventResponseData
    /// </summary>
    public partial class CreateDmEventResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDmEventResponseData" /> class.
        /// </summary>
        /// <param name="dmConversationId">Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.</param>
        /// <param name="dmEventId">Unique identifier of a DM Event.</param>
        [JsonConstructor]
        public CreateDmEventResponseData(string dmConversationId, string dmEventId)
        {
            DmConversationId = dmConversationId;
            DmEventId = dmEventId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.
        /// </summary>
        /// <value>Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.</value>
        /* <example>123123123-456456456</example> */
        [JsonPropertyName("dm_conversation_id")]
        public string DmConversationId { get; set; }

        /// <summary>
        /// Unique identifier of a DM Event.
        /// </summary>
        /// <value>Unique identifier of a DM Event.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("dm_event_id")]
        public string DmEventId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDmEventResponseData {\n");
            sb.Append("  DmConversationId: ").Append(DmConversationId).Append("\n");
            sb.Append("  DmEventId: ").Append(DmEventId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DmConversationId != null) {
                // DmConversationId (string) pattern
                Regex regexDmConversationId = new Regex(@"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$", RegexOptions.CultureInvariant);

                if (!regexDmConversationId.Match(this.DmConversationId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DmConversationId, must match a pattern of " + regexDmConversationId, new [] { "DmConversationId" });
                }
            }

            if (this.DmEventId != null) {
                // DmEventId (string) pattern
                Regex regexDmEventId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexDmEventId.Match(this.DmEventId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DmEventId, must match a pattern of " + regexDmEventId, new [] { "DmEventId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDmEventResponseData" />
    /// </summary>
    public class CreateDmEventResponseDataJsonConverter : JsonConverter<CreateDmEventResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateDmEventResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDmEventResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> dmConversationId = default;
            Option<string?> dmEventId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dm_conversation_id":
                            dmConversationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dm_event_id":
                            dmEventId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!dmConversationId.IsSet)
                throw new ArgumentException("Property is required for class CreateDmEventResponseData.", nameof(dmConversationId));

            if (!dmEventId.IsSet)
                throw new ArgumentException("Property is required for class CreateDmEventResponseData.", nameof(dmEventId));

            if (dmConversationId.IsSet && dmConversationId.Value == null)
                throw new ArgumentNullException(nameof(dmConversationId), "Property is not nullable for class CreateDmEventResponseData.");

            if (dmEventId.IsSet && dmEventId.Value == null)
                throw new ArgumentNullException(nameof(dmEventId), "Property is not nullable for class CreateDmEventResponseData.");

            return new CreateDmEventResponseData(dmConversationId.Value!, dmEventId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDmEventResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDmEventResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDmEventResponseData createDmEventResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDmEventResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDmEventResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDmEventResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDmEventResponseData createDmEventResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDmEventResponseData.DmConversationId == null)
                throw new ArgumentNullException(nameof(createDmEventResponseData.DmConversationId), "Property is required for class CreateDmEventResponseData.");

            if (createDmEventResponseData.DmEventId == null)
                throw new ArgumentNullException(nameof(createDmEventResponseData.DmEventId), "Property is required for class CreateDmEventResponseData.");

            writer.WriteString("dm_conversation_id", createDmEventResponseData.DmConversationId);

            writer.WriteString("dm_event_id", createDmEventResponseData.DmEventId);
        }
    }
}
