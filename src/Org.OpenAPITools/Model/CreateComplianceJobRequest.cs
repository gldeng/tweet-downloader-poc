// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A request to create a new batch compliance job.
    /// </summary>
    public partial class CreateComplianceJobRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateComplianceJobRequest" /> class.
        /// </summary>
        /// <param name="type">Type of compliance job to list.</param>
        /// <param name="name">User-provided name for a compliance job.</param>
        /// <param name="resumable">If true, this endpoint will return a pre-signed URL with resumable uploads enabled.</param>
        [JsonConstructor]
        public CreateComplianceJobRequest(TypeEnum type, Option<string?> name = default, Option<bool?> resumable = default)
        {
            Type = type;
            NameOption = name;
            ResumableOption = resumable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of compliance job to list.
        /// </summary>
        /// <value>Type of compliance job to list.</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Tweets for value: tweets
            /// </summary>
            Tweets = 1,

            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            Users = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("tweets"))
                return TypeEnum.Tweets;

            if (value.Equals("users"))
                return TypeEnum.Users;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("tweets"))
                return TypeEnum.Tweets;

            if (value.Equals("users"))
                return TypeEnum.Users;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Tweets)
                return "tweets";

            if (value == TypeEnum.Users)
                return "users";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of compliance job to list.
        /// </summary>
        /// <value>Type of compliance job to list.</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// User-provided name for a compliance job.
        /// </summary>
        /// <value>User-provided name for a compliance job.</value>
        /* <example>my-job</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Resumable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ResumableOption { get; private set; }

        /// <summary>
        /// If true, this endpoint will return a pre-signed URL with resumable uploads enabled.
        /// </summary>
        /// <value>If true, this endpoint will return a pre-signed URL with resumable uploads enabled.</value>
        [JsonPropertyName("resumable")]
        public bool? Resumable { get { return this.ResumableOption; } set { this.ResumableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateComplianceJobRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Resumable: ").Append(Resumable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateComplianceJobRequest" />
    /// </summary>
    public class CreateComplianceJobRequestJsonConverter : JsonConverter<CreateComplianceJobRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateComplianceJobRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateComplianceJobRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateComplianceJobRequest.TypeEnum?> type = default;
            Option<string?> name = default;
            Option<bool?> resumable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CreateComplianceJobRequest.TypeEnum?>(CreateComplianceJobRequest.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resumable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                resumable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class CreateComplianceJobRequest.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CreateComplianceJobRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateComplianceJobRequest.");

            if (resumable.IsSet && resumable.Value == null)
                throw new ArgumentNullException(nameof(resumable), "Property is not nullable for class CreateComplianceJobRequest.");

            return new CreateComplianceJobRequest(type.Value!.Value!, name, resumable);
        }

        /// <summary>
        /// Serializes a <see cref="CreateComplianceJobRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateComplianceJobRequest createComplianceJobRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createComplianceJobRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateComplianceJobRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateComplianceJobRequest createComplianceJobRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createComplianceJobRequest.NameOption.IsSet && createComplianceJobRequest.Name == null)
                throw new ArgumentNullException(nameof(createComplianceJobRequest.Name), "Property is required for class CreateComplianceJobRequest.");

            var typeRawValue = CreateComplianceJobRequest.TypeEnumToJsonValue(createComplianceJobRequest.Type);
            writer.WriteString("type", typeRawValue);
            if (createComplianceJobRequest.NameOption.IsSet)
                writer.WriteString("name", createComplianceJobRequest.Name);

            if (createComplianceJobRequest.ResumableOption.IsSet)
                writer.WriteBoolean("resumable", createComplianceJobRequest.ResumableOption.Value!.Value);
        }
    }
}
