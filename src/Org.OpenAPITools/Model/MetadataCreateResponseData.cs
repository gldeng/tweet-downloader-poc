// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MetadataCreateResponseData
    /// </summary>
    public partial class MetadataCreateResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataCreateResponseData" /> class.
        /// </summary>
        /// <param name="associatedMetadata">associatedMetadata</param>
        /// <param name="id">The unique identifier of this Media.</param>
        [JsonConstructor]
        public MetadataCreateResponseData(Option<MetadataCreateResponseDataAssociatedMetadata?> associatedMetadata = default, Option<string?> id = default)
        {
            AssociatedMetadataOption = associatedMetadata;
            IdOption = id;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AssociatedMetadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MetadataCreateResponseDataAssociatedMetadata?> AssociatedMetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssociatedMetadata
        /// </summary>
        [JsonPropertyName("associated_metadata")]
        public MetadataCreateResponseDataAssociatedMetadata? AssociatedMetadata { get { return this.AssociatedMetadataOption; } set { this.AssociatedMetadataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Media.
        /// </summary>
        /// <value>The unique identifier of this Media.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataCreateResponseData {\n");
            sb.Append("  AssociatedMetadata: ").Append(AssociatedMetadata).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.IdOption.Value != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.IdOption.Value != null &&!regexId.Match(this.IdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MetadataCreateResponseData" />
    /// </summary>
    public class MetadataCreateResponseDataJsonConverter : JsonConverter<MetadataCreateResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="MetadataCreateResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MetadataCreateResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MetadataCreateResponseDataAssociatedMetadata?> associatedMetadata = default;
            Option<string?> id = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "associated_metadata":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                associatedMetadata = new Option<MetadataCreateResponseDataAssociatedMetadata?>(JsonSerializer.Deserialize<MetadataCreateResponseDataAssociatedMetadata>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (associatedMetadata.IsSet && associatedMetadata.Value == null)
                throw new ArgumentNullException(nameof(associatedMetadata), "Property is not nullable for class MetadataCreateResponseData.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MetadataCreateResponseData.");

            return new MetadataCreateResponseData(associatedMetadata, id);
        }

        /// <summary>
        /// Serializes a <see cref="MetadataCreateResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metadataCreateResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MetadataCreateResponseData metadataCreateResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, metadataCreateResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MetadataCreateResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="metadataCreateResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MetadataCreateResponseData metadataCreateResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (metadataCreateResponseData.AssociatedMetadataOption.IsSet && metadataCreateResponseData.AssociatedMetadata == null)
                throw new ArgumentNullException(nameof(metadataCreateResponseData.AssociatedMetadata), "Property is required for class MetadataCreateResponseData.");

            if (metadataCreateResponseData.IdOption.IsSet && metadataCreateResponseData.Id == null)
                throw new ArgumentNullException(nameof(metadataCreateResponseData.Id), "Property is required for class MetadataCreateResponseData.");

            if (metadataCreateResponseData.AssociatedMetadataOption.IsSet)
            {
                writer.WritePropertyName("associated_metadata");
                JsonSerializer.Serialize(writer, metadataCreateResponseData.AssociatedMetadata, jsonSerializerOptions);
            }
            if (metadataCreateResponseData.IdOption.IsSet)
                writer.WriteString("id", metadataCreateResponseData.Id);
        }
    }
}
