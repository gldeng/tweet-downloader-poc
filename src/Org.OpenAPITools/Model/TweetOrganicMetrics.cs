// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Organic nonpublic engagement metrics for the Tweet at the time of the request.
    /// </summary>
    public partial class TweetOrganicMetrics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetOrganicMetrics" /> class.
        /// </summary>
        /// <param name="impressionCount">Number of times this Tweet has been viewed.</param>
        /// <param name="likeCount">Number of times this Tweet has been liked.</param>
        /// <param name="replyCount">Number of times this Tweet has been replied to.</param>
        /// <param name="retweetCount">Number of times this Tweet has been Retweeted.</param>
        [JsonConstructor]
        public TweetOrganicMetrics(int impressionCount, int likeCount, int replyCount, int retweetCount)
        {
            ImpressionCount = impressionCount;
            LikeCount = likeCount;
            ReplyCount = replyCount;
            RetweetCount = retweetCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of times this Tweet has been viewed.
        /// </summary>
        /// <value>Number of times this Tweet has been viewed.</value>
        [JsonPropertyName("impression_count")]
        public int ImpressionCount { get; set; }

        /// <summary>
        /// Number of times this Tweet has been liked.
        /// </summary>
        /// <value>Number of times this Tweet has been liked.</value>
        [JsonPropertyName("like_count")]
        public int LikeCount { get; set; }

        /// <summary>
        /// Number of times this Tweet has been replied to.
        /// </summary>
        /// <value>Number of times this Tweet has been replied to.</value>
        [JsonPropertyName("reply_count")]
        public int ReplyCount { get; set; }

        /// <summary>
        /// Number of times this Tweet has been Retweeted.
        /// </summary>
        /// <value>Number of times this Tweet has been Retweeted.</value>
        [JsonPropertyName("retweet_count")]
        public int RetweetCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetOrganicMetrics {\n");
            sb.Append("  ImpressionCount: ").Append(ImpressionCount).Append("\n");
            sb.Append("  LikeCount: ").Append(LikeCount).Append("\n");
            sb.Append("  ReplyCount: ").Append(ReplyCount).Append("\n");
            sb.Append("  RetweetCount: ").Append(RetweetCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetOrganicMetrics" />
    /// </summary>
    public class TweetOrganicMetricsJsonConverter : JsonConverter<TweetOrganicMetrics>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetOrganicMetrics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetOrganicMetrics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> impressionCount = default;
            Option<int?> likeCount = default;
            Option<int?> replyCount = default;
            Option<int?> retweetCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "impression_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                impressionCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "like_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                likeCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "reply_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                replyCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "retweet_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                retweetCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!impressionCount.IsSet)
                throw new ArgumentException("Property is required for class TweetOrganicMetrics.", nameof(impressionCount));

            if (!likeCount.IsSet)
                throw new ArgumentException("Property is required for class TweetOrganicMetrics.", nameof(likeCount));

            if (!replyCount.IsSet)
                throw new ArgumentException("Property is required for class TweetOrganicMetrics.", nameof(replyCount));

            if (!retweetCount.IsSet)
                throw new ArgumentException("Property is required for class TweetOrganicMetrics.", nameof(retweetCount));

            if (impressionCount.IsSet && impressionCount.Value == null)
                throw new ArgumentNullException(nameof(impressionCount), "Property is not nullable for class TweetOrganicMetrics.");

            if (likeCount.IsSet && likeCount.Value == null)
                throw new ArgumentNullException(nameof(likeCount), "Property is not nullable for class TweetOrganicMetrics.");

            if (replyCount.IsSet && replyCount.Value == null)
                throw new ArgumentNullException(nameof(replyCount), "Property is not nullable for class TweetOrganicMetrics.");

            if (retweetCount.IsSet && retweetCount.Value == null)
                throw new ArgumentNullException(nameof(retweetCount), "Property is not nullable for class TweetOrganicMetrics.");

            return new TweetOrganicMetrics(impressionCount.Value!.Value!, likeCount.Value!.Value!, replyCount.Value!.Value!, retweetCount.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TweetOrganicMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetOrganicMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetOrganicMetrics tweetOrganicMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetOrganicMetrics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetOrganicMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetOrganicMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetOrganicMetrics tweetOrganicMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("impression_count", tweetOrganicMetrics.ImpressionCount);

            writer.WriteNumber("like_count", tweetOrganicMetrics.LikeCount);

            writer.WriteNumber("reply_count", tweetOrganicMetrics.ReplyCount);

            writer.WriteNumber("retweet_count", tweetOrganicMetrics.RetweetCount);
        }
    }
}
