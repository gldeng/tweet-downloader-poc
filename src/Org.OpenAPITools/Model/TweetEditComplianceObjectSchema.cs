// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TweetEditComplianceObjectSchema
    /// </summary>
    public partial class TweetEditComplianceObjectSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetEditComplianceObjectSchema" /> class.
        /// </summary>
        /// <param name="editTweetIds">editTweetIds</param>
        /// <param name="eventAt">Event time.</param>
        /// <param name="initialTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="tweet">tweet</param>
        [JsonConstructor]
        public TweetEditComplianceObjectSchema(List<string> editTweetIds, DateTime eventAt, string initialTweetId, DmEventReferencedTweetsInner tweet)
        {
            EditTweetIds = editTweetIds;
            EventAt = eventAt;
            InitialTweetId = initialTweetId;
            Tweet = tweet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EditTweetIds
        /// </summary>
        [JsonPropertyName("edit_tweet_ids")]
        public List<string> EditTweetIds { get; set; }

        /// <summary>
        /// Event time.
        /// </summary>
        /// <value>Event time.</value>
        /* <example>2021-07-06T18:40:40Z</example> */
        [JsonPropertyName("event_at")]
        public DateTime EventAt { get; set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("initial_tweet_id")]
        public string InitialTweetId { get; set; }

        /// <summary>
        /// Gets or Sets Tweet
        /// </summary>
        [JsonPropertyName("tweet")]
        public DmEventReferencedTweetsInner Tweet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetEditComplianceObjectSchema {\n");
            sb.Append("  EditTweetIds: ").Append(EditTweetIds).Append("\n");
            sb.Append("  EventAt: ").Append(EventAt).Append("\n");
            sb.Append("  InitialTweetId: ").Append(InitialTweetId).Append("\n");
            sb.Append("  Tweet: ").Append(Tweet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.InitialTweetId != null) {
                // InitialTweetId (string) pattern
                Regex regexInitialTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexInitialTweetId.Match(this.InitialTweetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InitialTweetId, must match a pattern of " + regexInitialTweetId, new [] { "InitialTweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetEditComplianceObjectSchema" />
    /// </summary>
    public class TweetEditComplianceObjectSchemaJsonConverter : JsonConverter<TweetEditComplianceObjectSchema>
    {
        /// <summary>
        /// The format to use to serialize EventAt
        /// </summary>
        public static string EventAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="TweetEditComplianceObjectSchema" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetEditComplianceObjectSchema Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> editTweetIds = default;
            Option<DateTime?> eventAt = default;
            Option<string?> initialTweetId = default;
            Option<DmEventReferencedTweetsInner?> tweet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "edit_tweet_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                editTweetIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "event_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eventAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "initial_tweet_id":
                            initialTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tweet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tweet = new Option<DmEventReferencedTweetsInner?>(JsonSerializer.Deserialize<DmEventReferencedTweetsInner>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!editTweetIds.IsSet)
                throw new ArgumentException("Property is required for class TweetEditComplianceObjectSchema.", nameof(editTweetIds));

            if (!eventAt.IsSet)
                throw new ArgumentException("Property is required for class TweetEditComplianceObjectSchema.", nameof(eventAt));

            if (!initialTweetId.IsSet)
                throw new ArgumentException("Property is required for class TweetEditComplianceObjectSchema.", nameof(initialTweetId));

            if (!tweet.IsSet)
                throw new ArgumentException("Property is required for class TweetEditComplianceObjectSchema.", nameof(tweet));

            if (editTweetIds.IsSet && editTweetIds.Value == null)
                throw new ArgumentNullException(nameof(editTweetIds), "Property is not nullable for class TweetEditComplianceObjectSchema.");

            if (eventAt.IsSet && eventAt.Value == null)
                throw new ArgumentNullException(nameof(eventAt), "Property is not nullable for class TweetEditComplianceObjectSchema.");

            if (initialTweetId.IsSet && initialTweetId.Value == null)
                throw new ArgumentNullException(nameof(initialTweetId), "Property is not nullable for class TweetEditComplianceObjectSchema.");

            if (tweet.IsSet && tweet.Value == null)
                throw new ArgumentNullException(nameof(tweet), "Property is not nullable for class TweetEditComplianceObjectSchema.");

            return new TweetEditComplianceObjectSchema(editTweetIds.Value!, eventAt.Value!.Value!, initialTweetId.Value!, tweet.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TweetEditComplianceObjectSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetEditComplianceObjectSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetEditComplianceObjectSchema tweetEditComplianceObjectSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetEditComplianceObjectSchema, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetEditComplianceObjectSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetEditComplianceObjectSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetEditComplianceObjectSchema tweetEditComplianceObjectSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetEditComplianceObjectSchema.EditTweetIds == null)
                throw new ArgumentNullException(nameof(tweetEditComplianceObjectSchema.EditTweetIds), "Property is required for class TweetEditComplianceObjectSchema.");

            if (tweetEditComplianceObjectSchema.InitialTweetId == null)
                throw new ArgumentNullException(nameof(tweetEditComplianceObjectSchema.InitialTweetId), "Property is required for class TweetEditComplianceObjectSchema.");

            if (tweetEditComplianceObjectSchema.Tweet == null)
                throw new ArgumentNullException(nameof(tweetEditComplianceObjectSchema.Tweet), "Property is required for class TweetEditComplianceObjectSchema.");

            writer.WritePropertyName("edit_tweet_ids");
            JsonSerializer.Serialize(writer, tweetEditComplianceObjectSchema.EditTweetIds, jsonSerializerOptions);
            writer.WriteString("event_at", tweetEditComplianceObjectSchema.EventAt.ToString(EventAtFormat));

            writer.WriteString("initial_tweet_id", tweetEditComplianceObjectSchema.InitialTweetId);

            writer.WritePropertyName("tweet");
            JsonSerializer.Serialize(writer, tweetEditComplianceObjectSchema.Tweet, jsonSerializerOptions);
        }
    }
}
