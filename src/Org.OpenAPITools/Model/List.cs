// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A X List is a curated group of accounts.
    /// </summary>
    public partial class List : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="List" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of this List.</param>
        /// <param name="name">The name of this List.</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="followerCount">followerCount</param>
        /// <param name="memberCount">memberCount</param>
        /// <param name="ownerId">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="private">private</param>
        [JsonConstructor]
        public List(string id, string name, Option<DateTime?> createdAt = default, Option<string?> description = default, Option<int?> followerCount = default, Option<int?> memberCount = default, Option<string?> ownerId = default, Option<bool?> @private = default)
        {
            Id = id;
            Name = name;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            FollowerCountOption = followerCount;
            MemberCountOption = memberCount;
            OwnerIdOption = ownerId;
            PrivateOption = @private;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The unique identifier of this List.
        /// </summary>
        /// <value>The unique identifier of this List.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The name of this List.
        /// </summary>
        /// <value>The name of this List.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of FollowerCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FollowerCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets FollowerCount
        /// </summary>
        [JsonPropertyName("follower_count")]
        public int? FollowerCount { get { return this.FollowerCountOption; } set { this.FollowerCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of MemberCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MemberCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets MemberCount
        /// </summary>
        [JsonPropertyName("member_count")]
        public int? MemberCount { get { return this.MemberCountOption; } set { this.MemberCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of OwnerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OwnerIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("owner_id")]
        public string? OwnerId { get { return this.OwnerIdOption; } set { this.OwnerIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Private
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrivateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [JsonPropertyName("private")]
        public bool? Private { get { return this.PrivateOption; } set { this.PrivateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class List {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FollowerCount: ").Append(FollowerCount).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.OwnerIdOption.Value != null) {
                // OwnerId (string) pattern
                Regex regexOwnerId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.OwnerIdOption.Value != null &&!regexOwnerId.Match(this.OwnerIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, must match a pattern of " + regexOwnerId, new [] { "OwnerId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="List" />
    /// </summary>
    public class ListJsonConverter : JsonConverter<List>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="List" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override List Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<DateTime?> createdAt = default;
            Option<string?> description = default;
            Option<int?> followerCount = default;
            Option<int?> memberCount = default;
            Option<string?> ownerId = default;
            Option<bool?> varPrivate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "follower_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followerCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "member_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                memberCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "owner_id":
                            ownerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "private":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varPrivate = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class List.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class List.", nameof(name));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class List.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class List.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class List.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class List.");

            if (followerCount.IsSet && followerCount.Value == null)
                throw new ArgumentNullException(nameof(followerCount), "Property is not nullable for class List.");

            if (memberCount.IsSet && memberCount.Value == null)
                throw new ArgumentNullException(nameof(memberCount), "Property is not nullable for class List.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class List.");

            if (varPrivate.IsSet && varPrivate.Value == null)
                throw new ArgumentNullException(nameof(varPrivate), "Property is not nullable for class List.");

            return new List(id.Value!, name.Value!, createdAt, description, followerCount, memberCount, ownerId, varPrivate);
        }

        /// <summary>
        /// Serializes a <see cref="List" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="list"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, List list, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, list, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="List" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="list"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, List list, JsonSerializerOptions jsonSerializerOptions)
        {
            if (list.Id == null)
                throw new ArgumentNullException(nameof(list.Id), "Property is required for class List.");

            if (list.Name == null)
                throw new ArgumentNullException(nameof(list.Name), "Property is required for class List.");

            if (list.DescriptionOption.IsSet && list.Description == null)
                throw new ArgumentNullException(nameof(list.Description), "Property is required for class List.");

            if (list.OwnerIdOption.IsSet && list.OwnerId == null)
                throw new ArgumentNullException(nameof(list.OwnerId), "Property is required for class List.");

            writer.WriteString("id", list.Id);

            writer.WriteString("name", list.Name);

            if (list.CreatedAtOption.IsSet)
                writer.WriteString("created_at", list.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (list.DescriptionOption.IsSet)
                writer.WriteString("description", list.Description);

            if (list.FollowerCountOption.IsSet)
                writer.WriteNumber("follower_count", list.FollowerCountOption.Value!.Value);

            if (list.MemberCountOption.IsSet)
                writer.WriteNumber("member_count", list.MemberCountOption.Value!.Value);

            if (list.OwnerIdOption.IsSet)
                writer.WriteString("owner_id", list.OwnerId);

            if (list.PrivateOption.IsSet)
                writer.WriteBoolean("private", list.PrivateOption.Value!.Value);
        }
    }
}
