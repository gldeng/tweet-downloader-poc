// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A list of metrics for this User.
    /// </summary>
    public partial class UserPublicMetrics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPublicMetrics" /> class.
        /// </summary>
        /// <param name="followersCount">Number of Users who are following this User.</param>
        /// <param name="followingCount">Number of Users this User is following.</param>
        /// <param name="listedCount">The number of lists that include this User.</param>
        /// <param name="tweetCount">The number of Posts (including Retweets) posted by this User.</param>
        /// <param name="likeCount">The number of likes created by this User.</param>
        [JsonConstructor]
        public UserPublicMetrics(int followersCount, int followingCount, int listedCount, int tweetCount, Option<int?> likeCount = default)
        {
            FollowersCount = followersCount;
            FollowingCount = followingCount;
            ListedCount = listedCount;
            TweetCount = tweetCount;
            LikeCountOption = likeCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Number of Users who are following this User.
        /// </summary>
        /// <value>Number of Users who are following this User.</value>
        [JsonPropertyName("followers_count")]
        public int FollowersCount { get; set; }

        /// <summary>
        /// Number of Users this User is following.
        /// </summary>
        /// <value>Number of Users this User is following.</value>
        [JsonPropertyName("following_count")]
        public int FollowingCount { get; set; }

        /// <summary>
        /// The number of lists that include this User.
        /// </summary>
        /// <value>The number of lists that include this User.</value>
        [JsonPropertyName("listed_count")]
        public int ListedCount { get; set; }

        /// <summary>
        /// The number of Posts (including Retweets) posted by this User.
        /// </summary>
        /// <value>The number of Posts (including Retweets) posted by this User.</value>
        [JsonPropertyName("tweet_count")]
        public int TweetCount { get; set; }

        /// <summary>
        /// Used to track the state of LikeCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LikeCountOption { get; private set; }

        /// <summary>
        /// The number of likes created by this User.
        /// </summary>
        /// <value>The number of likes created by this User.</value>
        [JsonPropertyName("like_count")]
        public int? LikeCount { get { return this.LikeCountOption; } set { this.LikeCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPublicMetrics {\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  ListedCount: ").Append(ListedCount).Append("\n");
            sb.Append("  TweetCount: ").Append(TweetCount).Append("\n");
            sb.Append("  LikeCount: ").Append(LikeCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPublicMetrics" />
    /// </summary>
    public class UserPublicMetricsJsonConverter : JsonConverter<UserPublicMetrics>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserPublicMetrics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserPublicMetrics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> followersCount = default;
            Option<int?> followingCount = default;
            Option<int?> listedCount = default;
            Option<int?> tweetCount = default;
            Option<int?> likeCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "followers_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followersCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "following_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                followingCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "listed_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listedCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "tweet_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tweetCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "like_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                likeCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!followersCount.IsSet)
                throw new ArgumentException("Property is required for class UserPublicMetrics.", nameof(followersCount));

            if (!followingCount.IsSet)
                throw new ArgumentException("Property is required for class UserPublicMetrics.", nameof(followingCount));

            if (!listedCount.IsSet)
                throw new ArgumentException("Property is required for class UserPublicMetrics.", nameof(listedCount));

            if (!tweetCount.IsSet)
                throw new ArgumentException("Property is required for class UserPublicMetrics.", nameof(tweetCount));

            if (followersCount.IsSet && followersCount.Value == null)
                throw new ArgumentNullException(nameof(followersCount), "Property is not nullable for class UserPublicMetrics.");

            if (followingCount.IsSet && followingCount.Value == null)
                throw new ArgumentNullException(nameof(followingCount), "Property is not nullable for class UserPublicMetrics.");

            if (listedCount.IsSet && listedCount.Value == null)
                throw new ArgumentNullException(nameof(listedCount), "Property is not nullable for class UserPublicMetrics.");

            if (tweetCount.IsSet && tweetCount.Value == null)
                throw new ArgumentNullException(nameof(tweetCount), "Property is not nullable for class UserPublicMetrics.");

            if (likeCount.IsSet && likeCount.Value == null)
                throw new ArgumentNullException(nameof(likeCount), "Property is not nullable for class UserPublicMetrics.");

            return new UserPublicMetrics(followersCount.Value!.Value!, followingCount.Value!.Value!, listedCount.Value!.Value!, tweetCount.Value!.Value!, likeCount);
        }

        /// <summary>
        /// Serializes a <see cref="UserPublicMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPublicMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserPublicMetrics userPublicMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userPublicMetrics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserPublicMetrics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPublicMetrics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserPublicMetrics userPublicMetrics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("followers_count", userPublicMetrics.FollowersCount);

            writer.WriteNumber("following_count", userPublicMetrics.FollowingCount);

            writer.WriteNumber("listed_count", userPublicMetrics.ListedCount);

            writer.WriteNumber("tweet_count", userPublicMetrics.TweetCount);

            if (userPublicMetrics.LikeCountOption.IsSet)
                writer.WriteNumber("like_count", userPublicMetrics.LikeCountOption.Value!.Value);
        }
    }
}
