// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Variant
    /// </summary>
    public partial class Variant : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Variant" /> class.
        /// </summary>
        /// <param name="bitRate">The bit rate of the media.</param>
        /// <param name="contentType">The content type of the media.</param>
        /// <param name="url">The url to the media.</param>
        [JsonConstructor]
        public Variant(Option<int?> bitRate = default, Option<string?> contentType = default, Option<string?> url = default)
        {
            BitRateOption = bitRate;
            ContentTypeOption = contentType;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BitRate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BitRateOption { get; private set; }

        /// <summary>
        /// The bit rate of the media.
        /// </summary>
        /// <value>The bit rate of the media.</value>
        [JsonPropertyName("bit_rate")]
        public int? BitRate { get { return this.BitRateOption; } set { this.BitRateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentTypeOption { get; private set; }

        /// <summary>
        /// The content type of the media.
        /// </summary>
        /// <value>The content type of the media.</value>
        [JsonPropertyName("content_type")]
        public string? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The url to the media.
        /// </summary>
        /// <value>The url to the media.</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Variant {\n");
            sb.Append("  BitRate: ").Append(BitRate).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Variant" />
    /// </summary>
    public class VariantJsonConverter : JsonConverter<Variant>
    {
        /// <summary>
        /// Deserializes json to <see cref="Variant" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Variant Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> bitRate = default;
            Option<string?> contentType = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "bit_rate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bitRate = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "content_type":
                            contentType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (bitRate.IsSet && bitRate.Value == null)
                throw new ArgumentNullException(nameof(bitRate), "Property is not nullable for class Variant.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class Variant.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class Variant.");

            return new Variant(bitRate, contentType, url);
        }

        /// <summary>
        /// Serializes a <see cref="Variant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="variant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Variant variant, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, variant, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Variant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="variant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Variant variant, JsonSerializerOptions jsonSerializerOptions)
        {
            if (variant.ContentTypeOption.IsSet && variant.ContentType == null)
                throw new ArgumentNullException(nameof(variant.ContentType), "Property is required for class Variant.");

            if (variant.UrlOption.IsSet && variant.Url == null)
                throw new ArgumentNullException(nameof(variant.Url), "Property is required for class Variant.");

            if (variant.BitRateOption.IsSet)
                writer.WriteNumber("bit_rate", variant.BitRateOption.Value!.Value);

            if (variant.ContentTypeOption.IsSet)
                writer.WriteString("content_type", variant.ContentType);

            if (variant.UrlOption.IsSet)
                writer.WriteString("url", variant.Url);
        }
    }
}
