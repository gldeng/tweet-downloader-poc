// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Tweet information of the Tweet being replied to.
    /// </summary>
    public partial class TweetCreateRequestReply : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetCreateRequestReply" /> class.
        /// </summary>
        /// <param name="inReplyToTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="excludeReplyUserIds">A list of User Ids to be excluded from the reply Tweet.</param>
        [JsonConstructor]
        public TweetCreateRequestReply(string inReplyToTweetId, Option<List<string>?> excludeReplyUserIds = default)
        {
            InReplyToTweetId = inReplyToTweetId;
            ExcludeReplyUserIdsOption = excludeReplyUserIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("in_reply_to_tweet_id")]
        public string InReplyToTweetId { get; set; }

        /// <summary>
        /// Used to track the state of ExcludeReplyUserIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ExcludeReplyUserIdsOption { get; private set; }

        /// <summary>
        /// A list of User Ids to be excluded from the reply Tweet.
        /// </summary>
        /// <value>A list of User Ids to be excluded from the reply Tweet.</value>
        [JsonPropertyName("exclude_reply_user_ids")]
        public List<string>? ExcludeReplyUserIds { get { return this.ExcludeReplyUserIdsOption; } set { this.ExcludeReplyUserIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetCreateRequestReply {\n");
            sb.Append("  InReplyToTweetId: ").Append(InReplyToTweetId).Append("\n");
            sb.Append("  ExcludeReplyUserIds: ").Append(ExcludeReplyUserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.InReplyToTweetId != null) {
                // InReplyToTweetId (string) pattern
                Regex regexInReplyToTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexInReplyToTweetId.Match(this.InReplyToTweetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InReplyToTweetId, must match a pattern of " + regexInReplyToTweetId, new [] { "InReplyToTweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetCreateRequestReply" />
    /// </summary>
    public class TweetCreateRequestReplyJsonConverter : JsonConverter<TweetCreateRequestReply>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetCreateRequestReply" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetCreateRequestReply Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> inReplyToTweetId = default;
            Option<List<string>?> excludeReplyUserIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "in_reply_to_tweet_id":
                            inReplyToTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "exclude_reply_user_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                excludeReplyUserIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!inReplyToTweetId.IsSet)
                throw new ArgumentException("Property is required for class TweetCreateRequestReply.", nameof(inReplyToTweetId));

            if (inReplyToTweetId.IsSet && inReplyToTweetId.Value == null)
                throw new ArgumentNullException(nameof(inReplyToTweetId), "Property is not nullable for class TweetCreateRequestReply.");

            if (excludeReplyUserIds.IsSet && excludeReplyUserIds.Value == null)
                throw new ArgumentNullException(nameof(excludeReplyUserIds), "Property is not nullable for class TweetCreateRequestReply.");

            return new TweetCreateRequestReply(inReplyToTweetId.Value!, excludeReplyUserIds);
        }

        /// <summary>
        /// Serializes a <see cref="TweetCreateRequestReply" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestReply"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetCreateRequestReply tweetCreateRequestReply, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetCreateRequestReply, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetCreateRequestReply" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestReply"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetCreateRequestReply tweetCreateRequestReply, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetCreateRequestReply.InReplyToTweetId == null)
                throw new ArgumentNullException(nameof(tweetCreateRequestReply.InReplyToTweetId), "Property is required for class TweetCreateRequestReply.");

            if (tweetCreateRequestReply.ExcludeReplyUserIdsOption.IsSet && tweetCreateRequestReply.ExcludeReplyUserIds == null)
                throw new ArgumentNullException(nameof(tweetCreateRequestReply.ExcludeReplyUserIds), "Property is required for class TweetCreateRequestReply.");

            writer.WriteString("in_reply_to_tweet_id", tweetCreateRequestReply.InReplyToTweetId);

            if (tweetCreateRequestReply.ExcludeReplyUserIdsOption.IsSet)
            {
                writer.WritePropertyName("exclude_reply_user_ids");
                JsonSerializer.Serialize(writer, tweetCreateRequestReply.ExcludeReplyUserIds, jsonSerializerOptions);
            }
        }
    }
}
