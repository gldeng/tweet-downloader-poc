// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Type of compliance job to list.
    /// </summary>
    /// <value>Type of compliance job to list.</value>
    public enum ComplianceJobType
    {
        /// <summary>
        /// Enum Tweets for value: tweets
        /// </summary>
        Tweets = 1,

        /// <summary>
        /// Enum Users for value: users
        /// </summary>
        Users = 2
    }

    /// <summary>
    /// Converts <see cref="ComplianceJobType"/> to and from the JSON value
    /// </summary>
    public static class ComplianceJobTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ComplianceJobType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ComplianceJobType FromString(string value)
        {
            if (value.Equals("tweets"))
                return ComplianceJobType.Tweets;

            if (value.Equals("users"))
                return ComplianceJobType.Users;

            throw new NotImplementedException($"Could not convert value to type ComplianceJobType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ComplianceJobType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ComplianceJobType? FromStringOrDefault(string value)
        {
            if (value.Equals("tweets"))
                return ComplianceJobType.Tweets;

            if (value.Equals("users"))
                return ComplianceJobType.Users;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ComplianceJobType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ComplianceJobType value)
        {
            if (value == ComplianceJobType.Tweets)
                return "tweets";

            if (value == ComplianceJobType.Users)
                return "users";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComplianceJobType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ComplianceJobTypeJsonConverter : JsonConverter<ComplianceJobType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ComplianceJobType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ComplianceJobType? result = rawValue == null
                ? null
                : ComplianceJobTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ComplianceJobType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJobType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ComplianceJobType complianceJobType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(complianceJobType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComplianceJobType"/>
    /// </summary>
    public class ComplianceJobTypeNullableJsonConverter : JsonConverter<ComplianceJobType?>
    {
        /// <summary>
        /// Returns a ComplianceJobType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ComplianceJobType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ComplianceJobType? result = rawValue == null
                ? null
                : ComplianceJobTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJobType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ComplianceJobType? complianceJobType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(complianceJobType?.ToString() ?? "null");
        }
    }
}
