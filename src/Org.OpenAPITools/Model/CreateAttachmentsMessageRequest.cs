// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateAttachmentsMessageRequest
    /// </summary>
    public partial class CreateAttachmentsMessageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAttachmentsMessageRequest" /> class.
        /// </summary>
        /// <param name="attachments">Attachments to a DM Event.</param>
        /// <param name="text">Text of the message.</param>
        [JsonConstructor]
        public CreateAttachmentsMessageRequest(List<DmMediaAttachment> attachments, Option<string?> text = default)
        {
            Attachments = attachments;
            TextOption = text;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Attachments to a DM Event.
        /// </summary>
        /// <value>Attachments to a DM Event.</value>
        [JsonPropertyName("attachments")]
        public List<DmMediaAttachment> Attachments { get; set; }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Text of the message.
        /// </summary>
        /// <value>Text of the message.</value>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAttachmentsMessageRequest {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) minLength
            if (this.Text != null && this.Text.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Text, length must be greater than 1.", new [] { "Text" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateAttachmentsMessageRequest" />
    /// </summary>
    public class CreateAttachmentsMessageRequestJsonConverter : JsonConverter<CreateAttachmentsMessageRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateAttachmentsMessageRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateAttachmentsMessageRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DmMediaAttachment>?> attachments = default;
            Option<string?> text = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attachments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachments = new Option<List<DmMediaAttachment>?>(JsonSerializer.Deserialize<List<DmMediaAttachment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!attachments.IsSet)
                throw new ArgumentException("Property is required for class CreateAttachmentsMessageRequest.", nameof(attachments));

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class CreateAttachmentsMessageRequest.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class CreateAttachmentsMessageRequest.");

            return new CreateAttachmentsMessageRequest(attachments.Value!, text);
        }

        /// <summary>
        /// Serializes a <see cref="CreateAttachmentsMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAttachmentsMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateAttachmentsMessageRequest createAttachmentsMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createAttachmentsMessageRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateAttachmentsMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createAttachmentsMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateAttachmentsMessageRequest createAttachmentsMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createAttachmentsMessageRequest.Attachments == null)
                throw new ArgumentNullException(nameof(createAttachmentsMessageRequest.Attachments), "Property is required for class CreateAttachmentsMessageRequest.");

            if (createAttachmentsMessageRequest.TextOption.IsSet && createAttachmentsMessageRequest.Text == null)
                throw new ArgumentNullException(nameof(createAttachmentsMessageRequest.Text), "Property is required for class CreateAttachmentsMessageRequest.");

            writer.WritePropertyName("attachments");
            JsonSerializer.Serialize(writer, createAttachmentsMessageRequest.Attachments, jsonSerializerOptions);
            if (createAttachmentsMessageRequest.TextOption.IsSet)
                writer.WriteString("text", createAttachmentsMessageRequest.Text);
        }
    }
}
