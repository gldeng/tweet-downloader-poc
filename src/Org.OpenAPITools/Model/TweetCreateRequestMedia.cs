// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI.
    /// </summary>
    public partial class TweetCreateRequestMedia : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetCreateRequestMedia" /> class.
        /// </summary>
        /// <param name="mediaIds">A list of Media Ids to be attached to a created Tweet.</param>
        /// <param name="taggedUserIds">A list of User Ids to be tagged in the media for created Tweet.</param>
        [JsonConstructor]
        public TweetCreateRequestMedia(List<string> mediaIds, Option<List<string>?> taggedUserIds = default)
        {
            MediaIds = mediaIds;
            TaggedUserIdsOption = taggedUserIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// A list of Media Ids to be attached to a created Tweet.
        /// </summary>
        /// <value>A list of Media Ids to be attached to a created Tweet.</value>
        [JsonPropertyName("media_ids")]
        public List<string> MediaIds { get; set; }

        /// <summary>
        /// Used to track the state of TaggedUserIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> TaggedUserIdsOption { get; private set; }

        /// <summary>
        /// A list of User Ids to be tagged in the media for created Tweet.
        /// </summary>
        /// <value>A list of User Ids to be tagged in the media for created Tweet.</value>
        [JsonPropertyName("tagged_user_ids")]
        public List<string>? TaggedUserIds { get { return this.TaggedUserIdsOption; } set { this.TaggedUserIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetCreateRequestMedia {\n");
            sb.Append("  MediaIds: ").Append(MediaIds).Append("\n");
            sb.Append("  TaggedUserIds: ").Append(TaggedUserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetCreateRequestMedia" />
    /// </summary>
    public class TweetCreateRequestMediaJsonConverter : JsonConverter<TweetCreateRequestMedia>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetCreateRequestMedia" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetCreateRequestMedia Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> mediaIds = default;
            Option<List<string>?> taggedUserIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "media_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mediaIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tagged_user_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                taggedUserIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mediaIds.IsSet)
                throw new ArgumentException("Property is required for class TweetCreateRequestMedia.", nameof(mediaIds));

            if (mediaIds.IsSet && mediaIds.Value == null)
                throw new ArgumentNullException(nameof(mediaIds), "Property is not nullable for class TweetCreateRequestMedia.");

            if (taggedUserIds.IsSet && taggedUserIds.Value == null)
                throw new ArgumentNullException(nameof(taggedUserIds), "Property is not nullable for class TweetCreateRequestMedia.");

            return new TweetCreateRequestMedia(mediaIds.Value!, taggedUserIds);
        }

        /// <summary>
        /// Serializes a <see cref="TweetCreateRequestMedia" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestMedia"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetCreateRequestMedia tweetCreateRequestMedia, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetCreateRequestMedia, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetCreateRequestMedia" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequestMedia"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetCreateRequestMedia tweetCreateRequestMedia, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetCreateRequestMedia.MediaIds == null)
                throw new ArgumentNullException(nameof(tweetCreateRequestMedia.MediaIds), "Property is required for class TweetCreateRequestMedia.");

            if (tweetCreateRequestMedia.TaggedUserIdsOption.IsSet && tweetCreateRequestMedia.TaggedUserIds == null)
                throw new ArgumentNullException(nameof(tweetCreateRequestMedia.TaggedUserIds), "Property is required for class TweetCreateRequestMedia.");

            writer.WritePropertyName("media_ids");
            JsonSerializer.Serialize(writer, tweetCreateRequestMedia.MediaIds, jsonSerializerOptions);
            if (tweetCreateRequestMedia.TaggedUserIdsOption.IsSet)
            {
                writer.WritePropertyName("tagged_user_ids");
                JsonSerializer.Serialize(writer, tweetCreateRequestMedia.TaggedUserIds, jsonSerializerOptions);
            }
        }
    }
}
