// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TweetCreateRequest
    /// </summary>
    public partial class TweetCreateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetCreateRequest" /> class.
        /// </summary>
        /// <param name="cardUri">Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.</param>
        /// <param name="communityId">The unique identifier of this Community.</param>
        /// <param name="directMessageDeepLink">Link to take the conversation from the public timeline to a private Direct Message.</param>
        /// <param name="forSuperFollowersOnly">Exclusive Tweet for super followers. (default to false)</param>
        /// <param name="geo">geo</param>
        /// <param name="media">media</param>
        /// <param name="nullcast">Nullcasted (promoted-only) Posts do not appear in the public timeline and are not served to followers. (default to false)</param>
        /// <param name="poll">poll</param>
        /// <param name="quoteTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="reply">reply</param>
        /// <param name="replySettings">Settings to indicate who can reply to the Tweet.</param>
        /// <param name="text">The content of the Tweet.</param>
        [JsonConstructor]
        public TweetCreateRequest(Option<string?> cardUri = default, Option<string?> communityId = default, Option<string?> directMessageDeepLink = default, Option<bool?> forSuperFollowersOnly = default, Option<TweetCreateRequestGeo?> geo = default, Option<TweetCreateRequestMedia?> media = default, Option<bool?> nullcast = default, Option<TweetCreateRequestPoll?> poll = default, Option<string?> quoteTweetId = default, Option<TweetCreateRequestReply?> reply = default, Option<ReplySettingsEnum?> replySettings = default, Option<string?> text = default)
        {
            CardUriOption = cardUri;
            CommunityIdOption = communityId;
            DirectMessageDeepLinkOption = directMessageDeepLink;
            ForSuperFollowersOnlyOption = forSuperFollowersOnly;
            GeoOption = geo;
            MediaOption = media;
            NullcastOption = nullcast;
            PollOption = poll;
            QuoteTweetIdOption = quoteTweetId;
            ReplyOption = reply;
            ReplySettingsOption = replySettings;
            TextOption = text;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Settings to indicate who can reply to the Tweet.
        /// </summary>
        /// <value>Settings to indicate who can reply to the Tweet.</value>
        public enum ReplySettingsEnum
        {
            /// <summary>
            /// Enum Following for value: following
            /// </summary>
            Following = 1,

            /// <summary>
            /// Enum MentionedUsers for value: mentionedUsers
            /// </summary>
            MentionedUsers = 2,

            /// <summary>
            /// Enum Subscribers for value: subscribers
            /// </summary>
            Subscribers = 3
        }

        /// <summary>
        /// Returns a <see cref="ReplySettingsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ReplySettingsEnum ReplySettingsEnumFromString(string value)
        {
            if (value.Equals("following"))
                return ReplySettingsEnum.Following;

            if (value.Equals("mentionedUsers"))
                return ReplySettingsEnum.MentionedUsers;

            if (value.Equals("subscribers"))
                return ReplySettingsEnum.Subscribers;

            throw new NotImplementedException($"Could not convert value to type ReplySettingsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ReplySettingsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReplySettingsEnum? ReplySettingsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("following"))
                return ReplySettingsEnum.Following;

            if (value.Equals("mentionedUsers"))
                return ReplySettingsEnum.MentionedUsers;

            if (value.Equals("subscribers"))
                return ReplySettingsEnum.Subscribers;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReplySettingsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ReplySettingsEnumToJsonValue(ReplySettingsEnum? value)
        {
            if (value == ReplySettingsEnum.Following)
                return "following";

            if (value == ReplySettingsEnum.MentionedUsers)
                return "mentionedUsers";

            if (value == ReplySettingsEnum.Subscribers)
                return "subscribers";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ReplySettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReplySettingsEnum?> ReplySettingsOption { get; private set; }

        /// <summary>
        /// Settings to indicate who can reply to the Tweet.
        /// </summary>
        /// <value>Settings to indicate who can reply to the Tweet.</value>
        [JsonPropertyName("reply_settings")]
        public ReplySettingsEnum? ReplySettings { get { return this.ReplySettingsOption; } set { this.ReplySettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CardUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CardUriOption { get; private set; }

        /// <summary>
        /// Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.
        /// </summary>
        /// <value>Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.</value>
        [JsonPropertyName("card_uri")]
        public string? CardUri { get { return this.CardUriOption; } set { this.CardUriOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommunityId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommunityIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Community.
        /// </summary>
        /// <value>The unique identifier of this Community.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("community_id")]
        public string? CommunityId { get { return this.CommunityIdOption; } set { this.CommunityIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DirectMessageDeepLink
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DirectMessageDeepLinkOption { get; private set; }

        /// <summary>
        /// Link to take the conversation from the public timeline to a private Direct Message.
        /// </summary>
        /// <value>Link to take the conversation from the public timeline to a private Direct Message.</value>
        [JsonPropertyName("direct_message_deep_link")]
        public string? DirectMessageDeepLink { get { return this.DirectMessageDeepLinkOption; } set { this.DirectMessageDeepLinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of ForSuperFollowersOnly
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ForSuperFollowersOnlyOption { get; private set; }

        /// <summary>
        /// Exclusive Tweet for super followers.
        /// </summary>
        /// <value>Exclusive Tweet for super followers.</value>
        [JsonPropertyName("for_super_followers_only")]
        public bool? ForSuperFollowersOnly { get { return this.ForSuperFollowersOnlyOption; } set { this.ForSuperFollowersOnlyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetCreateRequestGeo?> GeoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geo
        /// </summary>
        [JsonPropertyName("geo")]
        public TweetCreateRequestGeo? Geo { get { return this.GeoOption; } set { this.GeoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Media
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetCreateRequestMedia?> MediaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [JsonPropertyName("media")]
        public TweetCreateRequestMedia? Media { get { return this.MediaOption; } set { this.MediaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nullcast
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NullcastOption { get; private set; }

        /// <summary>
        /// Nullcasted (promoted-only) Posts do not appear in the public timeline and are not served to followers.
        /// </summary>
        /// <value>Nullcasted (promoted-only) Posts do not appear in the public timeline and are not served to followers.</value>
        [JsonPropertyName("nullcast")]
        public bool? Nullcast { get { return this.NullcastOption; } set { this.NullcastOption = new(value); } }

        /// <summary>
        /// Used to track the state of Poll
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetCreateRequestPoll?> PollOption { get; private set; }

        /// <summary>
        /// Gets or Sets Poll
        /// </summary>
        [JsonPropertyName("poll")]
        public TweetCreateRequestPoll? Poll { get { return this.PollOption; } set { this.PollOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuoteTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QuoteTweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("quote_tweet_id")]
        public string? QuoteTweetId { get { return this.QuoteTweetIdOption; } set { this.QuoteTweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reply
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetCreateRequestReply?> ReplyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reply
        /// </summary>
        [JsonPropertyName("reply")]
        public TweetCreateRequestReply? Reply { get { return this.ReplyOption; } set { this.ReplyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// The content of the Tweet.
        /// </summary>
        /// <value>The content of the Tweet.</value>
        /* <example>Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\u2026 https:\/\/t.co\/56a0vZUx7i</example> */
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetCreateRequest {\n");
            sb.Append("  CardUri: ").Append(CardUri).Append("\n");
            sb.Append("  CommunityId: ").Append(CommunityId).Append("\n");
            sb.Append("  DirectMessageDeepLink: ").Append(DirectMessageDeepLink).Append("\n");
            sb.Append("  ForSuperFollowersOnly: ").Append(ForSuperFollowersOnly).Append("\n");
            sb.Append("  Geo: ").Append(Geo).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Nullcast: ").Append(Nullcast).Append("\n");
            sb.Append("  Poll: ").Append(Poll).Append("\n");
            sb.Append("  QuoteTweetId: ").Append(QuoteTweetId).Append("\n");
            sb.Append("  Reply: ").Append(Reply).Append("\n");
            sb.Append("  ReplySettings: ").Append(ReplySettings).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CommunityIdOption.Value != null) {
                // CommunityId (string) pattern
                Regex regexCommunityId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.CommunityIdOption.Value != null &&!regexCommunityId.Match(this.CommunityIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CommunityId, must match a pattern of " + regexCommunityId, new [] { "CommunityId" });
                }
            }

            if (this.QuoteTweetIdOption.Value != null) {
                // QuoteTweetId (string) pattern
                Regex regexQuoteTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.QuoteTweetIdOption.Value != null &&!regexQuoteTweetId.Match(this.QuoteTweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for QuoteTweetId, must match a pattern of " + regexQuoteTweetId, new [] { "QuoteTweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetCreateRequest" />
    /// </summary>
    public class TweetCreateRequestJsonConverter : JsonConverter<TweetCreateRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetCreateRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetCreateRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> cardUri = default;
            Option<string?> communityId = default;
            Option<string?> directMessageDeepLink = default;
            Option<bool?> forSuperFollowersOnly = default;
            Option<TweetCreateRequestGeo?> geo = default;
            Option<TweetCreateRequestMedia?> media = default;
            Option<bool?> nullcast = default;
            Option<TweetCreateRequestPoll?> poll = default;
            Option<string?> quoteTweetId = default;
            Option<TweetCreateRequestReply?> reply = default;
            Option<TweetCreateRequest.ReplySettingsEnum?> replySettings = default;
            Option<string?> text = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "card_uri":
                            cardUri = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "community_id":
                            communityId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "direct_message_deep_link":
                            directMessageDeepLink = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "for_super_followers_only":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                forSuperFollowersOnly = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "geo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                geo = new Option<TweetCreateRequestGeo?>(JsonSerializer.Deserialize<TweetCreateRequestGeo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "media":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                media = new Option<TweetCreateRequestMedia?>(JsonSerializer.Deserialize<TweetCreateRequestMedia>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "nullcast":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nullcast = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "poll":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                poll = new Option<TweetCreateRequestPoll?>(JsonSerializer.Deserialize<TweetCreateRequestPoll>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "quote_tweet_id":
                            quoteTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reply":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                reply = new Option<TweetCreateRequestReply?>(JsonSerializer.Deserialize<TweetCreateRequestReply>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reply_settings":
                            string? replySettingsRawValue = utf8JsonReader.GetString();
                            if (replySettingsRawValue != null)
                                replySettings = new Option<TweetCreateRequest.ReplySettingsEnum?>(TweetCreateRequest.ReplySettingsEnumFromStringOrDefault(replySettingsRawValue));
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cardUri.IsSet && cardUri.Value == null)
                throw new ArgumentNullException(nameof(cardUri), "Property is not nullable for class TweetCreateRequest.");

            if (communityId.IsSet && communityId.Value == null)
                throw new ArgumentNullException(nameof(communityId), "Property is not nullable for class TweetCreateRequest.");

            if (directMessageDeepLink.IsSet && directMessageDeepLink.Value == null)
                throw new ArgumentNullException(nameof(directMessageDeepLink), "Property is not nullable for class TweetCreateRequest.");

            if (forSuperFollowersOnly.IsSet && forSuperFollowersOnly.Value == null)
                throw new ArgumentNullException(nameof(forSuperFollowersOnly), "Property is not nullable for class TweetCreateRequest.");

            if (geo.IsSet && geo.Value == null)
                throw new ArgumentNullException(nameof(geo), "Property is not nullable for class TweetCreateRequest.");

            if (media.IsSet && media.Value == null)
                throw new ArgumentNullException(nameof(media), "Property is not nullable for class TweetCreateRequest.");

            if (nullcast.IsSet && nullcast.Value == null)
                throw new ArgumentNullException(nameof(nullcast), "Property is not nullable for class TweetCreateRequest.");

            if (poll.IsSet && poll.Value == null)
                throw new ArgumentNullException(nameof(poll), "Property is not nullable for class TweetCreateRequest.");

            if (quoteTweetId.IsSet && quoteTweetId.Value == null)
                throw new ArgumentNullException(nameof(quoteTweetId), "Property is not nullable for class TweetCreateRequest.");

            if (reply.IsSet && reply.Value == null)
                throw new ArgumentNullException(nameof(reply), "Property is not nullable for class TweetCreateRequest.");

            if (replySettings.IsSet && replySettings.Value == null)
                throw new ArgumentNullException(nameof(replySettings), "Property is not nullable for class TweetCreateRequest.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class TweetCreateRequest.");

            return new TweetCreateRequest(cardUri, communityId, directMessageDeepLink, forSuperFollowersOnly, geo, media, nullcast, poll, quoteTweetId, reply, replySettings, text);
        }

        /// <summary>
        /// Serializes a <see cref="TweetCreateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetCreateRequest tweetCreateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetCreateRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetCreateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetCreateRequest tweetCreateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetCreateRequest.CardUriOption.IsSet && tweetCreateRequest.CardUri == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.CardUri), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.CommunityIdOption.IsSet && tweetCreateRequest.CommunityId == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.CommunityId), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.DirectMessageDeepLinkOption.IsSet && tweetCreateRequest.DirectMessageDeepLink == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.DirectMessageDeepLink), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.GeoOption.IsSet && tweetCreateRequest.Geo == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.Geo), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.MediaOption.IsSet && tweetCreateRequest.Media == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.Media), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.PollOption.IsSet && tweetCreateRequest.Poll == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.Poll), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.QuoteTweetIdOption.IsSet && tweetCreateRequest.QuoteTweetId == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.QuoteTweetId), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.ReplyOption.IsSet && tweetCreateRequest.Reply == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.Reply), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.TextOption.IsSet && tweetCreateRequest.Text == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest.Text), "Property is required for class TweetCreateRequest.");

            if (tweetCreateRequest.CardUriOption.IsSet)
                writer.WriteString("card_uri", tweetCreateRequest.CardUri);

            if (tweetCreateRequest.CommunityIdOption.IsSet)
                writer.WriteString("community_id", tweetCreateRequest.CommunityId);

            if (tweetCreateRequest.DirectMessageDeepLinkOption.IsSet)
                writer.WriteString("direct_message_deep_link", tweetCreateRequest.DirectMessageDeepLink);

            if (tweetCreateRequest.ForSuperFollowersOnlyOption.IsSet)
                writer.WriteBoolean("for_super_followers_only", tweetCreateRequest.ForSuperFollowersOnlyOption.Value!.Value);

            if (tweetCreateRequest.GeoOption.IsSet)
            {
                writer.WritePropertyName("geo");
                JsonSerializer.Serialize(writer, tweetCreateRequest.Geo, jsonSerializerOptions);
            }
            if (tweetCreateRequest.MediaOption.IsSet)
            {
                writer.WritePropertyName("media");
                JsonSerializer.Serialize(writer, tweetCreateRequest.Media, jsonSerializerOptions);
            }
            if (tweetCreateRequest.NullcastOption.IsSet)
                writer.WriteBoolean("nullcast", tweetCreateRequest.NullcastOption.Value!.Value);

            if (tweetCreateRequest.PollOption.IsSet)
            {
                writer.WritePropertyName("poll");
                JsonSerializer.Serialize(writer, tweetCreateRequest.Poll, jsonSerializerOptions);
            }
            if (tweetCreateRequest.QuoteTweetIdOption.IsSet)
                writer.WriteString("quote_tweet_id", tweetCreateRequest.QuoteTweetId);

            if (tweetCreateRequest.ReplyOption.IsSet)
            {
                writer.WritePropertyName("reply");
                JsonSerializer.Serialize(writer, tweetCreateRequest.Reply, jsonSerializerOptions);
            }
            var replySettingsRawValue = TweetCreateRequest.ReplySettingsEnumToJsonValue(tweetCreateRequest.ReplySettingsOption.Value!.Value);
            writer.WriteString("reply_settings", replySettingsRawValue);
            if (tweetCreateRequest.TextOption.IsSet)
                writer.WriteString("text", tweetCreateRequest.Text);
        }
    }
}
