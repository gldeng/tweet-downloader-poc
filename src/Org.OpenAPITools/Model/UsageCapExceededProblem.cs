// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A problem that indicates that a usage cap has been exceeded.
    /// </summary>
    public partial class UsageCapExceededProblem : Problem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageCapExceededProblem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        /// <param name="period">period</param>
        /// <param name="scope">scope</param>
        [JsonConstructor]
        public UsageCapExceededProblem(string title, Option<string?> detail = default, Option<int?> status = default, Option<PeriodEnum?> period = default, Option<ScopeEnum?> scope = default) : base(title, detail, status)
        {
            PeriodOption = period;
            ScopeOption = scope;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Period
        /// </summary>
        public enum PeriodEnum
        {
            /// <summary>
            /// Enum Daily for value: Daily
            /// </summary>
            Daily = 1,

            /// <summary>
            /// Enum Monthly for value: Monthly
            /// </summary>
            Monthly = 2
        }

        /// <summary>
        /// Returns a <see cref="PeriodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PeriodEnum PeriodEnumFromString(string value)
        {
            if (value.Equals("Daily"))
                return PeriodEnum.Daily;

            if (value.Equals("Monthly"))
                return PeriodEnum.Monthly;

            throw new NotImplementedException($"Could not convert value to type PeriodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PeriodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PeriodEnum? PeriodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Daily"))
                return PeriodEnum.Daily;

            if (value.Equals("Monthly"))
                return PeriodEnum.Monthly;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PeriodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PeriodEnumToJsonValue(PeriodEnum? value)
        {
            if (value == PeriodEnum.Daily)
                return "Daily";

            if (value == PeriodEnum.Monthly)
                return "Monthly";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Period
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PeriodEnum?> PeriodOption { get; private set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [JsonPropertyName("period")]
        public PeriodEnum? Period { get { return this.PeriodOption; } set { this.PeriodOption = new(value); } }

        /// <summary>
        /// Defines Scope
        /// </summary>
        public enum ScopeEnum
        {
            /// <summary>
            /// Enum Account for value: Account
            /// </summary>
            Account = 1,

            /// <summary>
            /// Enum Product for value: Product
            /// </summary>
            Product = 2
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScopeEnum ScopeEnumFromString(string value)
        {
            if (value.Equals("Account"))
                return ScopeEnum.Account;

            if (value.Equals("Product"))
                return ScopeEnum.Product;

            throw new NotImplementedException($"Could not convert value to type ScopeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScopeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScopeEnum? ScopeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Account"))
                return ScopeEnum.Account;

            if (value.Equals("Product"))
                return ScopeEnum.Product;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScopeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScopeEnumToJsonValue(ScopeEnum? value)
        {
            if (value == ScopeEnum.Account)
                return "Account";

            if (value == ScopeEnum.Product)
                return "Product";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ScopeEnum?> ScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public ScopeEnum? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsageCapExceededProblem {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UsageCapExceededProblem" />
    /// </summary>
    public class UsageCapExceededProblemJsonConverter : JsonConverter<UsageCapExceededProblem>
    {
        /// <summary>
        /// Deserializes json to <see cref="UsageCapExceededProblem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UsageCapExceededProblem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> detail = default;
            Option<int?> status = default;
            Option<UsageCapExceededProblem.PeriodEnum?> period = default;
            Option<UsageCapExceededProblem.ScopeEnum?> scope = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "period":
                            string? periodRawValue = utf8JsonReader.GetString();
                            if (periodRawValue != null)
                                period = new Option<UsageCapExceededProblem.PeriodEnum?>(UsageCapExceededProblem.PeriodEnumFromStringOrDefault(periodRawValue));
                            break;
                        case "scope":
                            string? scopeRawValue = utf8JsonReader.GetString();
                            if (scopeRawValue != null)
                                scope = new Option<UsageCapExceededProblem.ScopeEnum?>(UsageCapExceededProblem.ScopeEnumFromStringOrDefault(scopeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class UsageCapExceededProblem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class UsageCapExceededProblem.", nameof(type));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class UsageCapExceededProblem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class UsageCapExceededProblem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class UsageCapExceededProblem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class UsageCapExceededProblem.");

            if (period.IsSet && period.Value == null)
                throw new ArgumentNullException(nameof(period), "Property is not nullable for class UsageCapExceededProblem.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class UsageCapExceededProblem.");

            return new UsageCapExceededProblem(title.Value!, detail, status, period, scope);
        }

        /// <summary>
        /// Serializes a <see cref="UsageCapExceededProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usageCapExceededProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UsageCapExceededProblem usageCapExceededProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, usageCapExceededProblem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UsageCapExceededProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="usageCapExceededProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UsageCapExceededProblem usageCapExceededProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (usageCapExceededProblem.Title == null)
                throw new ArgumentNullException(nameof(usageCapExceededProblem.Title), "Property is required for class UsageCapExceededProblem.");

            if (usageCapExceededProblem.DetailOption.IsSet && usageCapExceededProblem.Detail == null)
                throw new ArgumentNullException(nameof(usageCapExceededProblem.Detail), "Property is required for class UsageCapExceededProblem.");

            writer.WriteString("title", usageCapExceededProblem.Title);

            writer.WriteString("type", usageCapExceededProblem.Type);

            if (usageCapExceededProblem.DetailOption.IsSet)
                writer.WriteString("detail", usageCapExceededProblem.Detail);

            if (usageCapExceededProblem.StatusOption.IsSet)
                writer.WriteNumber("status", usageCapExceededProblem.StatusOption.Value!.Value);

            var periodRawValue = UsageCapExceededProblem.PeriodEnumToJsonValue(usageCapExceededProblem.PeriodOption.Value!.Value);
            writer.WriteString("period", periodRawValue);
            var scopeRawValue = UsageCapExceededProblem.ScopeEnumToJsonValue(usageCapExceededProblem.ScopeOption.Value!.Value);
            writer.WriteString("scope", scopeRawValue);
        }
    }
}
