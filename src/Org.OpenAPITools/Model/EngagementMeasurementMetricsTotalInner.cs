// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EngagementMeasurementMetricsTotalInner
    /// </summary>
    public partial class EngagementMeasurementMetricsTotalInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EngagementMeasurementMetricsTotalInner" /> class.
        /// </summary>
        /// <param name="tweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public EngagementMeasurementMetricsTotalInner(Option<string?> tweetId = default, Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> value = default)
        {
            TweetIdOption = tweetId;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of TweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("tweet_id")]
        public string? TweetId { get { return this.TweetIdOption; } set { this.TweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EngagementMeasurementMetricsTotalInner {\n");
            sb.Append("  TweetId: ").Append(TweetId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.TweetIdOption.Value != null) {
                // TweetId (string) pattern
                Regex regexTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.TweetIdOption.Value != null &&!regexTweetId.Match(this.TweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TweetId, must match a pattern of " + regexTweetId, new [] { "TweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EngagementMeasurementMetricsTotalInner" />
    /// </summary>
    public class EngagementMeasurementMetricsTotalInnerJsonConverter : JsonConverter<EngagementMeasurementMetricsTotalInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="EngagementMeasurementMetricsTotalInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EngagementMeasurementMetricsTotalInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> tweetId = default;
            Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tweet_id":
                            tweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                value = new Option<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>?>(JsonSerializer.Deserialize<List<EngagementMeasurementMetricsTimeSeriesInnerValueMetricValuesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (tweetId.IsSet && tweetId.Value == null)
                throw new ArgumentNullException(nameof(tweetId), "Property is not nullable for class EngagementMeasurementMetricsTotalInner.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class EngagementMeasurementMetricsTotalInner.");

            return new EngagementMeasurementMetricsTotalInner(tweetId, value);
        }

        /// <summary>
        /// Serializes a <see cref="EngagementMeasurementMetricsTotalInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTotalInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EngagementMeasurementMetricsTotalInner engagementMeasurementMetricsTotalInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, engagementMeasurementMetricsTotalInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EngagementMeasurementMetricsTotalInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="engagementMeasurementMetricsTotalInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EngagementMeasurementMetricsTotalInner engagementMeasurementMetricsTotalInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (engagementMeasurementMetricsTotalInner.TweetIdOption.IsSet && engagementMeasurementMetricsTotalInner.TweetId == null)
                throw new ArgumentNullException(nameof(engagementMeasurementMetricsTotalInner.TweetId), "Property is required for class EngagementMeasurementMetricsTotalInner.");

            if (engagementMeasurementMetricsTotalInner.ValueOption.IsSet && engagementMeasurementMetricsTotalInner.Value == null)
                throw new ArgumentNullException(nameof(engagementMeasurementMetricsTotalInner.Value), "Property is required for class EngagementMeasurementMetricsTotalInner.");

            if (engagementMeasurementMetricsTotalInner.TweetIdOption.IsSet)
                writer.WriteString("tweet_id", engagementMeasurementMetricsTotalInner.TweetId);

            if (engagementMeasurementMetricsTotalInner.ValueOption.IsSet)
            {
                writer.WritePropertyName("value");
                JsonSerializer.Serialize(writer, engagementMeasurementMetricsTotalInner.Value, jsonSerializerOptions);
            }
        }
    }
}
