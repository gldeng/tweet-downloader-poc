// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The rule you have submitted is a duplicate.
    /// </summary>
    public partial class DuplicateRuleProblem : Problem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DuplicateRuleProblem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        /// <param name="id">id</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public DuplicateRuleProblem(string title, Option<string?> detail = default, Option<int?> status = default, Option<string?> id = default, Option<string?> value = default) : base(title, detail, status)
        {
            IdOption = id;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DuplicateRuleProblem {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DuplicateRuleProblem" />
    /// </summary>
    public class DuplicateRuleProblemJsonConverter : JsonConverter<DuplicateRuleProblem>
    {
        /// <summary>
        /// Deserializes json to <see cref="DuplicateRuleProblem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DuplicateRuleProblem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> detail = default;
            Option<int?> status = default;
            Option<string?> id = default;
            Option<string?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class DuplicateRuleProblem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class DuplicateRuleProblem.", nameof(type));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class DuplicateRuleProblem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DuplicateRuleProblem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class DuplicateRuleProblem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DuplicateRuleProblem.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DuplicateRuleProblem.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class DuplicateRuleProblem.");

            return new DuplicateRuleProblem(title.Value!, detail, status, id, value);
        }

        /// <summary>
        /// Serializes a <see cref="DuplicateRuleProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="duplicateRuleProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DuplicateRuleProblem duplicateRuleProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, duplicateRuleProblem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DuplicateRuleProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="duplicateRuleProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DuplicateRuleProblem duplicateRuleProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (duplicateRuleProblem.Title == null)
                throw new ArgumentNullException(nameof(duplicateRuleProblem.Title), "Property is required for class DuplicateRuleProblem.");

            if (duplicateRuleProblem.DetailOption.IsSet && duplicateRuleProblem.Detail == null)
                throw new ArgumentNullException(nameof(duplicateRuleProblem.Detail), "Property is required for class DuplicateRuleProblem.");

            if (duplicateRuleProblem.IdOption.IsSet && duplicateRuleProblem.Id == null)
                throw new ArgumentNullException(nameof(duplicateRuleProblem.Id), "Property is required for class DuplicateRuleProblem.");

            if (duplicateRuleProblem.ValueOption.IsSet && duplicateRuleProblem.Value == null)
                throw new ArgumentNullException(nameof(duplicateRuleProblem.Value), "Property is required for class DuplicateRuleProblem.");

            writer.WriteString("title", duplicateRuleProblem.Title);

            writer.WriteString("type", duplicateRuleProblem.Type);

            if (duplicateRuleProblem.DetailOption.IsSet)
                writer.WriteString("detail", duplicateRuleProblem.Detail);

            if (duplicateRuleProblem.StatusOption.IsSet)
                writer.WriteNumber("status", duplicateRuleProblem.StatusOption.Value!.Value);

            if (duplicateRuleProblem.IdOption.IsSet)
                writer.WriteString("id", duplicateRuleProblem.Id);

            if (duplicateRuleProblem.ValueOption.IsSet)
                writer.WriteString("value", duplicateRuleProblem.Value);
        }
    }
}
