// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AnimatedGif
    /// </summary>
    public partial class AnimatedGif : Media, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnimatedGif" /> class.
        /// </summary>
        /// <param name="height">The height of the media in pixels.</param>
        /// <param name="mediaKey">The Media Key identifier for this attachment.</param>
        /// <param name="width">The width of the media in pixels.</param>
        /// <param name="previewImageUrl">previewImageUrl</param>
        /// <param name="variants">An array of all available variants of the media.</param>
        [JsonConstructor]
        public AnimatedGif(Option<int?> height = default, Option<string?> mediaKey = default, Option<int?> width = default, Option<string?> previewImageUrl = default, Option<List<Variant>?> variants = default) : base(height, mediaKey, width)
        {
            PreviewImageUrlOption = previewImageUrl;
            VariantsOption = variants;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PreviewImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreviewImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreviewImageUrl
        /// </summary>
        [JsonPropertyName("preview_image_url")]
        public string? PreviewImageUrl { get { return this.PreviewImageUrlOption; } set { this.PreviewImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Variants
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Variant>?> VariantsOption { get; private set; }

        /// <summary>
        /// An array of all available variants of the media.
        /// </summary>
        /// <value>An array of all available variants of the media.</value>
        [JsonPropertyName("variants")]
        public List<Variant>? Variants { get { return this.VariantsOption; } set { this.VariantsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnimatedGif {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PreviewImageUrl: ").Append(PreviewImageUrl).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AnimatedGif" />
    /// </summary>
    public class AnimatedGifJsonConverter : JsonConverter<AnimatedGif>
    {
        /// <summary>
        /// Deserializes json to <see cref="AnimatedGif" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AnimatedGif Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<int?> height = default;
            Option<string?> mediaKey = default;
            Option<int?> width = default;
            Option<string?> previewImageUrl = default;
            Option<List<Variant>?> variants = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "media_key":
                            mediaKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "preview_image_url":
                            previewImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "variants":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                variants = new Option<List<Variant>?>(JsonSerializer.Deserialize<List<Variant>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AnimatedGif.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AnimatedGif.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class AnimatedGif.");

            if (mediaKey.IsSet && mediaKey.Value == null)
                throw new ArgumentNullException(nameof(mediaKey), "Property is not nullable for class AnimatedGif.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class AnimatedGif.");

            if (previewImageUrl.IsSet && previewImageUrl.Value == null)
                throw new ArgumentNullException(nameof(previewImageUrl), "Property is not nullable for class AnimatedGif.");

            if (variants.IsSet && variants.Value == null)
                throw new ArgumentNullException(nameof(variants), "Property is not nullable for class AnimatedGif.");

            return new AnimatedGif(height, mediaKey, width, previewImageUrl, variants);
        }

        /// <summary>
        /// Serializes a <see cref="AnimatedGif" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="animatedGif"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AnimatedGif animatedGif, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, animatedGif, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AnimatedGif" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="animatedGif"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AnimatedGif animatedGif, JsonSerializerOptions jsonSerializerOptions)
        {
            if (animatedGif.MediaKeyOption.IsSet && animatedGif.MediaKey == null)
                throw new ArgumentNullException(nameof(animatedGif.MediaKey), "Property is required for class AnimatedGif.");

            if (animatedGif.PreviewImageUrlOption.IsSet && animatedGif.PreviewImageUrl == null)
                throw new ArgumentNullException(nameof(animatedGif.PreviewImageUrl), "Property is required for class AnimatedGif.");

            if (animatedGif.VariantsOption.IsSet && animatedGif.Variants == null)
                throw new ArgumentNullException(nameof(animatedGif.Variants), "Property is required for class AnimatedGif.");

            writer.WriteString("type", animatedGif.Type);

            if (animatedGif.HeightOption.IsSet)
                writer.WriteNumber("height", animatedGif.HeightOption.Value!.Value);

            if (animatedGif.MediaKeyOption.IsSet)
                writer.WriteString("media_key", animatedGif.MediaKey);

            if (animatedGif.WidthOption.IsSet)
                writer.WriteNumber("width", animatedGif.WidthOption.Value!.Value);

            if (animatedGif.PreviewImageUrlOption.IsSet)
                writer.WriteString("preview_image_url", animatedGif.PreviewImageUrl);

            if (animatedGif.VariantsOption.IsSet)
            {
                writer.WritePropertyName("variants");
                JsonSerializer.Serialize(writer, animatedGif.Variants, jsonSerializerOptions);
            }
        }
    }
}
