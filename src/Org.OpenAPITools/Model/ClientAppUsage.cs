// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Usage per client app
    /// </summary>
    public partial class ClientAppUsage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAppUsage" /> class.
        /// </summary>
        /// <param name="clientAppId">The unique identifier for this project</param>
        /// <param name="usage">The usage value</param>
        /// <param name="usageResultCount">The number of results returned</param>
        [JsonConstructor]
        public ClientAppUsage(Option<string?> clientAppId = default, Option<List<UsageFields>?> usage = default, Option<int?> usageResultCount = default)
        {
            ClientAppIdOption = clientAppId;
            UsageOption = usage;
            UsageResultCountOption = usageResultCount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClientAppId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClientAppIdOption { get; private set; }

        /// <summary>
        /// The unique identifier for this project
        /// </summary>
        /// <value>The unique identifier for this project</value>
        [JsonPropertyName("client_app_id")]
        public string? ClientAppId { get { return this.ClientAppIdOption; } set { this.ClientAppIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Usage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UsageFields>?> UsageOption { get; private set; }

        /// <summary>
        /// The usage value
        /// </summary>
        /// <value>The usage value</value>
        [JsonPropertyName("usage")]
        public List<UsageFields>? Usage { get { return this.UsageOption; } set { this.UsageOption = new(value); } }

        /// <summary>
        /// Used to track the state of UsageResultCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> UsageResultCountOption { get; private set; }

        /// <summary>
        /// The number of results returned
        /// </summary>
        /// <value>The number of results returned</value>
        [JsonPropertyName("usage_result_count")]
        public int? UsageResultCount { get { return this.UsageResultCountOption; } set { this.UsageResultCountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientAppUsage {\n");
            sb.Append("  ClientAppId: ").Append(ClientAppId).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  UsageResultCount: ").Append(UsageResultCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientAppUsage" />
    /// </summary>
    public class ClientAppUsageJsonConverter : JsonConverter<ClientAppUsage>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClientAppUsage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClientAppUsage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> clientAppId = default;
            Option<List<UsageFields>?> usage = default;
            Option<int?> usageResultCount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "client_app_id":
                            clientAppId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "usage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usage = new Option<List<UsageFields>?>(JsonSerializer.Deserialize<List<UsageFields>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "usage_result_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usageResultCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clientAppId.IsSet && clientAppId.Value == null)
                throw new ArgumentNullException(nameof(clientAppId), "Property is not nullable for class ClientAppUsage.");

            if (usage.IsSet && usage.Value == null)
                throw new ArgumentNullException(nameof(usage), "Property is not nullable for class ClientAppUsage.");

            if (usageResultCount.IsSet && usageResultCount.Value == null)
                throw new ArgumentNullException(nameof(usageResultCount), "Property is not nullable for class ClientAppUsage.");

            return new ClientAppUsage(clientAppId, usage, usageResultCount);
        }

        /// <summary>
        /// Serializes a <see cref="ClientAppUsage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientAppUsage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClientAppUsage clientAppUsage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clientAppUsage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClientAppUsage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientAppUsage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClientAppUsage clientAppUsage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clientAppUsage.ClientAppIdOption.IsSet && clientAppUsage.ClientAppId == null)
                throw new ArgumentNullException(nameof(clientAppUsage.ClientAppId), "Property is required for class ClientAppUsage.");

            if (clientAppUsage.UsageOption.IsSet && clientAppUsage.Usage == null)
                throw new ArgumentNullException(nameof(clientAppUsage.Usage), "Property is required for class ClientAppUsage.");

            if (clientAppUsage.ClientAppIdOption.IsSet)
                writer.WriteString("client_app_id", clientAppUsage.ClientAppId);

            if (clientAppUsage.UsageOption.IsSet)
            {
                writer.WritePropertyName("usage");
                JsonSerializer.Serialize(writer, clientAppUsage.Usage, jsonSerializerOptions);
            }
            if (clientAppUsage.UsageResultCountOption.IsSet)
                writer.WriteNumber("usage_result_count", clientAppUsage.UsageResultCountOption.Value!.Value);
        }
    }
}
