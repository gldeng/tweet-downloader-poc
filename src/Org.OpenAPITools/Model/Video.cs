// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Video
    /// </summary>
    public partial class Video : Media, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Video" /> class.
        /// </summary>
        /// <param name="height">The height of the media in pixels.</param>
        /// <param name="mediaKey">The Media Key identifier for this attachment.</param>
        /// <param name="width">The width of the media in pixels.</param>
        /// <param name="durationMs">durationMs</param>
        /// <param name="nonPublicMetrics">nonPublicMetrics</param>
        /// <param name="organicMetrics">organicMetrics</param>
        /// <param name="previewImageUrl">previewImageUrl</param>
        /// <param name="promotedMetrics">promotedMetrics</param>
        /// <param name="publicMetrics">publicMetrics</param>
        /// <param name="variants">An array of all available variants of the media.</param>
        [JsonConstructor]
        public Video(Option<int?> height = default, Option<string?> mediaKey = default, Option<int?> width = default, Option<int?> durationMs = default, Option<VideoAllOfNonPublicMetrics?> nonPublicMetrics = default, Option<VideoAllOfOrganicMetrics?> organicMetrics = default, Option<string?> previewImageUrl = default, Option<VideoAllOfPromotedMetrics?> promotedMetrics = default, Option<VideoAllOfPublicMetrics?> publicMetrics = default, Option<List<Variant>?> variants = default) : base(height, mediaKey, width)
        {
            DurationMsOption = durationMs;
            NonPublicMetricsOption = nonPublicMetrics;
            OrganicMetricsOption = organicMetrics;
            PreviewImageUrlOption = previewImageUrl;
            PromotedMetricsOption = promotedMetrics;
            PublicMetricsOption = publicMetrics;
            VariantsOption = variants;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DurationMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationMsOption { get; private set; }

        /// <summary>
        /// Gets or Sets DurationMs
        /// </summary>
        [JsonPropertyName("duration_ms")]
        public int? DurationMs { get { return this.DurationMsOption; } set { this.DurationMsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonPublicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VideoAllOfNonPublicMetrics?> NonPublicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NonPublicMetrics
        /// </summary>
        [JsonPropertyName("non_public_metrics")]
        public VideoAllOfNonPublicMetrics? NonPublicMetrics { get { return this.NonPublicMetricsOption; } set { this.NonPublicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VideoAllOfOrganicMetrics?> OrganicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganicMetrics
        /// </summary>
        [JsonPropertyName("organic_metrics")]
        public VideoAllOfOrganicMetrics? OrganicMetrics { get { return this.OrganicMetricsOption; } set { this.OrganicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PreviewImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PreviewImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets PreviewImageUrl
        /// </summary>
        [JsonPropertyName("preview_image_url")]
        public string? PreviewImageUrl { get { return this.PreviewImageUrlOption; } set { this.PreviewImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of PromotedMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VideoAllOfPromotedMetrics?> PromotedMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PromotedMetrics
        /// </summary>
        [JsonPropertyName("promoted_metrics")]
        public VideoAllOfPromotedMetrics? PromotedMetrics { get { return this.PromotedMetricsOption; } set { this.PromotedMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VideoAllOfPublicMetrics?> PublicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicMetrics
        /// </summary>
        [JsonPropertyName("public_metrics")]
        public VideoAllOfPublicMetrics? PublicMetrics { get { return this.PublicMetricsOption; } set { this.PublicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Variants
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Variant>?> VariantsOption { get; private set; }

        /// <summary>
        /// An array of all available variants of the media.
        /// </summary>
        /// <value>An array of all available variants of the media.</value>
        [JsonPropertyName("variants")]
        public List<Variant>? Variants { get { return this.VariantsOption; } set { this.VariantsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Video {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DurationMs: ").Append(DurationMs).Append("\n");
            sb.Append("  NonPublicMetrics: ").Append(NonPublicMetrics).Append("\n");
            sb.Append("  OrganicMetrics: ").Append(OrganicMetrics).Append("\n");
            sb.Append("  PreviewImageUrl: ").Append(PreviewImageUrl).Append("\n");
            sb.Append("  PromotedMetrics: ").Append(PromotedMetrics).Append("\n");
            sb.Append("  PublicMetrics: ").Append(PublicMetrics).Append("\n");
            sb.Append("  Variants: ").Append(Variants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Video" />
    /// </summary>
    public class VideoJsonConverter : JsonConverter<Video>
    {
        /// <summary>
        /// Deserializes json to <see cref="Video" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Video Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<int?> height = default;
            Option<string?> mediaKey = default;
            Option<int?> width = default;
            Option<int?> durationMs = default;
            Option<VideoAllOfNonPublicMetrics?> nonPublicMetrics = default;
            Option<VideoAllOfOrganicMetrics?> organicMetrics = default;
            Option<string?> previewImageUrl = default;
            Option<VideoAllOfPromotedMetrics?> promotedMetrics = default;
            Option<VideoAllOfPublicMetrics?> publicMetrics = default;
            Option<List<Variant>?> variants = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "media_key":
                            mediaKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "duration_ms":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                durationMs = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "non_public_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nonPublicMetrics = new Option<VideoAllOfNonPublicMetrics?>(JsonSerializer.Deserialize<VideoAllOfNonPublicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organic_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organicMetrics = new Option<VideoAllOfOrganicMetrics?>(JsonSerializer.Deserialize<VideoAllOfOrganicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "preview_image_url":
                            previewImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "promoted_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                promotedMetrics = new Option<VideoAllOfPromotedMetrics?>(JsonSerializer.Deserialize<VideoAllOfPromotedMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "public_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                publicMetrics = new Option<VideoAllOfPublicMetrics?>(JsonSerializer.Deserialize<VideoAllOfPublicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "variants":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                variants = new Option<List<Variant>?>(JsonSerializer.Deserialize<List<Variant>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Video.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Video.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class Video.");

            if (mediaKey.IsSet && mediaKey.Value == null)
                throw new ArgumentNullException(nameof(mediaKey), "Property is not nullable for class Video.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class Video.");

            if (durationMs.IsSet && durationMs.Value == null)
                throw new ArgumentNullException(nameof(durationMs), "Property is not nullable for class Video.");

            if (nonPublicMetrics.IsSet && nonPublicMetrics.Value == null)
                throw new ArgumentNullException(nameof(nonPublicMetrics), "Property is not nullable for class Video.");

            if (organicMetrics.IsSet && organicMetrics.Value == null)
                throw new ArgumentNullException(nameof(organicMetrics), "Property is not nullable for class Video.");

            if (previewImageUrl.IsSet && previewImageUrl.Value == null)
                throw new ArgumentNullException(nameof(previewImageUrl), "Property is not nullable for class Video.");

            if (promotedMetrics.IsSet && promotedMetrics.Value == null)
                throw new ArgumentNullException(nameof(promotedMetrics), "Property is not nullable for class Video.");

            if (publicMetrics.IsSet && publicMetrics.Value == null)
                throw new ArgumentNullException(nameof(publicMetrics), "Property is not nullable for class Video.");

            if (variants.IsSet && variants.Value == null)
                throw new ArgumentNullException(nameof(variants), "Property is not nullable for class Video.");

            return new Video(height, mediaKey, width, durationMs, nonPublicMetrics, organicMetrics, previewImageUrl, promotedMetrics, publicMetrics, variants);
        }

        /// <summary>
        /// Serializes a <see cref="Video" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="video"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Video video, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, video, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Video" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="video"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Video video, JsonSerializerOptions jsonSerializerOptions)
        {
            if (video.MediaKeyOption.IsSet && video.MediaKey == null)
                throw new ArgumentNullException(nameof(video.MediaKey), "Property is required for class Video.");

            if (video.NonPublicMetricsOption.IsSet && video.NonPublicMetrics == null)
                throw new ArgumentNullException(nameof(video.NonPublicMetrics), "Property is required for class Video.");

            if (video.OrganicMetricsOption.IsSet && video.OrganicMetrics == null)
                throw new ArgumentNullException(nameof(video.OrganicMetrics), "Property is required for class Video.");

            if (video.PreviewImageUrlOption.IsSet && video.PreviewImageUrl == null)
                throw new ArgumentNullException(nameof(video.PreviewImageUrl), "Property is required for class Video.");

            if (video.PromotedMetricsOption.IsSet && video.PromotedMetrics == null)
                throw new ArgumentNullException(nameof(video.PromotedMetrics), "Property is required for class Video.");

            if (video.PublicMetricsOption.IsSet && video.PublicMetrics == null)
                throw new ArgumentNullException(nameof(video.PublicMetrics), "Property is required for class Video.");

            if (video.VariantsOption.IsSet && video.Variants == null)
                throw new ArgumentNullException(nameof(video.Variants), "Property is required for class Video.");

            writer.WriteString("type", video.Type);

            if (video.HeightOption.IsSet)
                writer.WriteNumber("height", video.HeightOption.Value!.Value);

            if (video.MediaKeyOption.IsSet)
                writer.WriteString("media_key", video.MediaKey);

            if (video.WidthOption.IsSet)
                writer.WriteNumber("width", video.WidthOption.Value!.Value);

            if (video.DurationMsOption.IsSet)
                writer.WriteNumber("duration_ms", video.DurationMsOption.Value!.Value);

            if (video.NonPublicMetricsOption.IsSet)
            {
                writer.WritePropertyName("non_public_metrics");
                JsonSerializer.Serialize(writer, video.NonPublicMetrics, jsonSerializerOptions);
            }
            if (video.OrganicMetricsOption.IsSet)
            {
                writer.WritePropertyName("organic_metrics");
                JsonSerializer.Serialize(writer, video.OrganicMetrics, jsonSerializerOptions);
            }
            if (video.PreviewImageUrlOption.IsSet)
                writer.WriteString("preview_image_url", video.PreviewImageUrl);

            if (video.PromotedMetricsOption.IsSet)
            {
                writer.WritePropertyName("promoted_metrics");
                JsonSerializer.Serialize(writer, video.PromotedMetrics, jsonSerializerOptions);
            }
            if (video.PublicMetricsOption.IsSet)
            {
                writer.WritePropertyName("public_metrics");
                JsonSerializer.Serialize(writer, video.PublicMetrics, jsonSerializerOptions);
            }
            if (video.VariantsOption.IsSet)
            {
                writer.WritePropertyName("variants");
                JsonSerializer.Serialize(writer, video.Variants, jsonSerializerOptions);
            }
        }
    }
}
