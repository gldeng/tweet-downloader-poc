// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateDmConversationRequest
    /// </summary>
    public partial class CreateDmConversationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDmConversationRequest" /> class.
        /// </summary>
        /// <param name="conversationType">The conversation type that is being created.</param>
        /// <param name="message">message</param>
        /// <param name="participantIds">Participants for the DM Conversation.</param>
        [JsonConstructor]
        public CreateDmConversationRequest(ConversationTypeEnum conversationType, CreateMessageRequest message, List<string> participantIds)
        {
            ConversationType = conversationType;
            Message = message;
            ParticipantIds = participantIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The conversation type that is being created.
        /// </summary>
        /// <value>The conversation type that is being created.</value>
        public enum ConversationTypeEnum
        {
            /// <summary>
            /// Enum Group for value: Group
            /// </summary>
            Group = 1
        }

        /// <summary>
        /// Returns a <see cref="ConversationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConversationTypeEnum ConversationTypeEnumFromString(string value)
        {
            if (value.Equals("Group"))
                return ConversationTypeEnum.Group;

            throw new NotImplementedException($"Could not convert value to type ConversationTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConversationTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConversationTypeEnum? ConversationTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Group"))
                return ConversationTypeEnum.Group;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConversationTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ConversationTypeEnumToJsonValue(ConversationTypeEnum value)
        {
            if (value == ConversationTypeEnum.Group)
                return "Group";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The conversation type that is being created.
        /// </summary>
        /// <value>The conversation type that is being created.</value>
        [JsonPropertyName("conversation_type")]
        public ConversationTypeEnum ConversationType { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public CreateMessageRequest Message { get; set; }

        /// <summary>
        /// Participants for the DM Conversation.
        /// </summary>
        /// <value>Participants for the DM Conversation.</value>
        [JsonPropertyName("participant_ids")]
        public List<string> ParticipantIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDmConversationRequest {\n");
            sb.Append("  ConversationType: ").Append(ConversationType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ParticipantIds: ").Append(ParticipantIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDmConversationRequest" />
    /// </summary>
    public class CreateDmConversationRequestJsonConverter : JsonConverter<CreateDmConversationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateDmConversationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDmConversationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<CreateDmConversationRequest.ConversationTypeEnum?> conversationType = default;
            Option<CreateMessageRequest?> message = default;
            Option<List<string>?> participantIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "conversation_type":
                            string? conversationTypeRawValue = utf8JsonReader.GetString();
                            if (conversationTypeRawValue != null)
                                conversationType = new Option<CreateDmConversationRequest.ConversationTypeEnum?>(CreateDmConversationRequest.ConversationTypeEnumFromStringOrDefault(conversationTypeRawValue));
                            break;
                        case "message":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                message = new Option<CreateMessageRequest?>(JsonSerializer.Deserialize<CreateMessageRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "participant_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                participantIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!conversationType.IsSet)
                throw new ArgumentException("Property is required for class CreateDmConversationRequest.", nameof(conversationType));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class CreateDmConversationRequest.", nameof(message));

            if (!participantIds.IsSet)
                throw new ArgumentException("Property is required for class CreateDmConversationRequest.", nameof(participantIds));

            if (conversationType.IsSet && conversationType.Value == null)
                throw new ArgumentNullException(nameof(conversationType), "Property is not nullable for class CreateDmConversationRequest.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class CreateDmConversationRequest.");

            if (participantIds.IsSet && participantIds.Value == null)
                throw new ArgumentNullException(nameof(participantIds), "Property is not nullable for class CreateDmConversationRequest.");

            return new CreateDmConversationRequest(conversationType.Value!.Value!, message.Value!, participantIds.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDmConversationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDmConversationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDmConversationRequest createDmConversationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDmConversationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDmConversationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDmConversationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDmConversationRequest createDmConversationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDmConversationRequest.Message == null)
                throw new ArgumentNullException(nameof(createDmConversationRequest.Message), "Property is required for class CreateDmConversationRequest.");

            if (createDmConversationRequest.ParticipantIds == null)
                throw new ArgumentNullException(nameof(createDmConversationRequest.ParticipantIds), "Property is required for class CreateDmConversationRequest.");

            var conversationTypeRawValue = CreateDmConversationRequest.ConversationTypeEnumToJsonValue(createDmConversationRequest.ConversationType);
            writer.WriteString("conversation_type", conversationTypeRawValue);
            writer.WritePropertyName("message");
            JsonSerializer.Serialize(writer, createDmConversationRequest.Message, jsonSerializerOptions);
            writer.WritePropertyName("participant_ids");
            JsonSerializer.Serialize(writer, createDmConversationRequest.ParticipantIds, jsonSerializerOptions);
        }
    }
}
