// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubtitlesDeleteRequest
    /// </summary>
    public partial class SubtitlesDeleteRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubtitlesDeleteRequest" /> class.
        /// </summary>
        /// <param name="languageCode">The language code should be a BCP47 code (e.g. &#39;EN\&quot;, \&quot;SP\&quot;)</param>
        /// <param name="mediaCategory">mediaCategory</param>
        /// <param name="mediaId">The unique identifier of this Media.</param>
        [JsonConstructor]
        public SubtitlesDeleteRequest(Option<string?> languageCode = default, Option<MediaCategorySubtitles?> mediaCategory = default, Option<string?> mediaId = default)
        {
            LanguageCodeOption = languageCode;
            MediaCategoryOption = mediaCategory;
            MediaIdOption = mediaId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MediaCategory
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MediaCategorySubtitles?> MediaCategoryOption { get; private set; }

        /// <summary>
        /// Gets or Sets MediaCategory
        /// </summary>
        [JsonPropertyName("media_category")]
        public MediaCategorySubtitles? MediaCategory { get { return this.MediaCategoryOption; } set { this.MediaCategoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of LanguageCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageCodeOption { get; private set; }

        /// <summary>
        /// The language code should be a BCP47 code (e.g. &#39;EN\&quot;, \&quot;SP\&quot;)
        /// </summary>
        /// <value>The language code should be a BCP47 code (e.g. &#39;EN\&quot;, \&quot;SP\&quot;)</value>
        /* <example>EN</example> */
        [JsonPropertyName("language_code")]
        public string? LanguageCode { get { return this.LanguageCodeOption; } set { this.LanguageCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MediaIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Media.
        /// </summary>
        /// <value>The unique identifier of this Media.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("media_id")]
        public string? MediaId { get { return this.MediaIdOption; } set { this.MediaIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubtitlesDeleteRequest {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  MediaCategory: ").Append(MediaCategory).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.LanguageCodeOption.Value != null) {
                // LanguageCode (string) pattern
                Regex regexLanguageCode = new Regex(@"^[A-Z]{2}$", RegexOptions.CultureInvariant);

                if (this.LanguageCodeOption.Value != null &&!regexLanguageCode.Match(this.LanguageCodeOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LanguageCode, must match a pattern of " + regexLanguageCode, new [] { "LanguageCode" });
                }
            }

            if (this.MediaIdOption.Value != null) {
                // MediaId (string) pattern
                Regex regexMediaId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.MediaIdOption.Value != null &&!regexMediaId.Match(this.MediaIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MediaId, must match a pattern of " + regexMediaId, new [] { "MediaId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubtitlesDeleteRequest" />
    /// </summary>
    public class SubtitlesDeleteRequestJsonConverter : JsonConverter<SubtitlesDeleteRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SubtitlesDeleteRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubtitlesDeleteRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> languageCode = default;
            Option<MediaCategorySubtitles?> mediaCategory = default;
            Option<string?> mediaId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "language_code":
                            languageCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "media_category":
                            string? mediaCategoryRawValue = utf8JsonReader.GetString();
                            if (mediaCategoryRawValue != null)
                                mediaCategory = new Option<MediaCategorySubtitles?>(MediaCategorySubtitlesValueConverter.FromStringOrDefault(mediaCategoryRawValue));
                            break;
                        case "media_id":
                            mediaId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (languageCode.IsSet && languageCode.Value == null)
                throw new ArgumentNullException(nameof(languageCode), "Property is not nullable for class SubtitlesDeleteRequest.");

            if (mediaCategory.IsSet && mediaCategory.Value == null)
                throw new ArgumentNullException(nameof(mediaCategory), "Property is not nullable for class SubtitlesDeleteRequest.");

            if (mediaId.IsSet && mediaId.Value == null)
                throw new ArgumentNullException(nameof(mediaId), "Property is not nullable for class SubtitlesDeleteRequest.");

            return new SubtitlesDeleteRequest(languageCode, mediaCategory, mediaId);
        }

        /// <summary>
        /// Serializes a <see cref="SubtitlesDeleteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubtitlesDeleteRequest subtitlesDeleteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subtitlesDeleteRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubtitlesDeleteRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubtitlesDeleteRequest subtitlesDeleteRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subtitlesDeleteRequest.LanguageCodeOption.IsSet && subtitlesDeleteRequest.LanguageCode == null)
                throw new ArgumentNullException(nameof(subtitlesDeleteRequest.LanguageCode), "Property is required for class SubtitlesDeleteRequest.");

            if (subtitlesDeleteRequest.MediaIdOption.IsSet && subtitlesDeleteRequest.MediaId == null)
                throw new ArgumentNullException(nameof(subtitlesDeleteRequest.MediaId), "Property is required for class SubtitlesDeleteRequest.");

            if (subtitlesDeleteRequest.LanguageCodeOption.IsSet)
                writer.WriteString("language_code", subtitlesDeleteRequest.LanguageCode);

            if (subtitlesDeleteRequest.MediaCategoryOption.IsSet)
            {
                var mediaCategoryRawValue = MediaCategorySubtitlesValueConverter.ToJsonValue(subtitlesDeleteRequest.MediaCategory!.Value);
                writer.WriteString("media_category", mediaCategoryRawValue);
            }
            if (subtitlesDeleteRequest.MediaIdOption.IsSet)
                writer.WriteString("media_id", subtitlesDeleteRequest.MediaId);
        }
    }
}
