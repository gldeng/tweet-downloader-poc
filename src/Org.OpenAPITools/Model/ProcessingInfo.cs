// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProcessingInfo
    /// </summary>
    public partial class ProcessingInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingInfo" /> class.
        /// </summary>
        /// <param name="checkAfterSecs">Number of seconds to check again for status</param>
        /// <param name="progressPercent">Percent of upload progress</param>
        /// <param name="state">State of upload</param>
        [JsonConstructor]
        public ProcessingInfo(Option<int?> checkAfterSecs = default, Option<int?> progressPercent = default, Option<StateEnum?> state = default)
        {
            CheckAfterSecsOption = checkAfterSecs;
            ProgressPercentOption = progressPercent;
            StateOption = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// State of upload
        /// </summary>
        /// <value>State of upload</value>
        public enum StateEnum
        {
            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            Succeeded = 1,

            /// <summary>
            /// Enum InProgress for value: in_progress
            /// </summary>
            InProgress = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            Failed = 4
        }

        /// <summary>
        /// Returns a <see cref="StateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StateEnum StateEnumFromString(string value)
        {
            if (value.Equals("succeeded"))
                return StateEnum.Succeeded;

            if (value.Equals("in_progress"))
                return StateEnum.InProgress;

            if (value.Equals("pending"))
                return StateEnum.Pending;

            if (value.Equals("failed"))
                return StateEnum.Failed;

            throw new NotImplementedException($"Could not convert value to type StateEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StateEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StateEnum? StateEnumFromStringOrDefault(string value)
        {
            if (value.Equals("succeeded"))
                return StateEnum.Succeeded;

            if (value.Equals("in_progress"))
                return StateEnum.InProgress;

            if (value.Equals("pending"))
                return StateEnum.Pending;

            if (value.Equals("failed"))
                return StateEnum.Failed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StateEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StateEnumToJsonValue(StateEnum? value)
        {
            if (value == StateEnum.Succeeded)
                return "succeeded";

            if (value == StateEnum.InProgress)
                return "in_progress";

            if (value == StateEnum.Pending)
                return "pending";

            if (value == StateEnum.Failed)
                return "failed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StateEnum?> StateOption { get; private set; }

        /// <summary>
        /// State of upload
        /// </summary>
        /// <value>State of upload</value>
        [JsonPropertyName("state")]
        public StateEnum? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of CheckAfterSecs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CheckAfterSecsOption { get; private set; }

        /// <summary>
        /// Number of seconds to check again for status
        /// </summary>
        /// <value>Number of seconds to check again for status</value>
        [JsonPropertyName("check_after_secs")]
        public int? CheckAfterSecs { get { return this.CheckAfterSecsOption; } set { this.CheckAfterSecsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProgressPercent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProgressPercentOption { get; private set; }

        /// <summary>
        /// Percent of upload progress
        /// </summary>
        /// <value>Percent of upload progress</value>
        [JsonPropertyName("progress_percent")]
        public int? ProgressPercent { get { return this.ProgressPercentOption; } set { this.ProgressPercentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessingInfo {\n");
            sb.Append("  CheckAfterSecs: ").Append(CheckAfterSecs).Append("\n");
            sb.Append("  ProgressPercent: ").Append(ProgressPercent).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ProcessingInfo" />
    /// </summary>
    public class ProcessingInfoJsonConverter : JsonConverter<ProcessingInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ProcessingInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ProcessingInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> checkAfterSecs = default;
            Option<int?> progressPercent = default;
            Option<ProcessingInfo.StateEnum?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "check_after_secs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                checkAfterSecs = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "progress_percent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                progressPercent = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<ProcessingInfo.StateEnum?>(ProcessingInfo.StateEnumFromStringOrDefault(stateRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (checkAfterSecs.IsSet && checkAfterSecs.Value == null)
                throw new ArgumentNullException(nameof(checkAfterSecs), "Property is not nullable for class ProcessingInfo.");

            if (progressPercent.IsSet && progressPercent.Value == null)
                throw new ArgumentNullException(nameof(progressPercent), "Property is not nullable for class ProcessingInfo.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class ProcessingInfo.");

            return new ProcessingInfo(checkAfterSecs, progressPercent, state);
        }

        /// <summary>
        /// Serializes a <see cref="ProcessingInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processingInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ProcessingInfo processingInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, processingInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ProcessingInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="processingInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ProcessingInfo processingInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (processingInfo.CheckAfterSecsOption.IsSet)
                writer.WriteNumber("check_after_secs", processingInfo.CheckAfterSecsOption.Value!.Value);

            if (processingInfo.ProgressPercentOption.IsSet)
                writer.WriteNumber("progress_percent", processingInfo.ProgressPercentOption.Value!.Value);

            var stateRawValue = ProcessingInfo.StateEnumToJsonValue(processingInfo.StateOption.Value!.Value);
            writer.WriteString("state", stateRawValue);
        }
    }
}
