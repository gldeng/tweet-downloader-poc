// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserProfileModificationObjectSchema
    /// </summary>
    public partial class UserProfileModificationObjectSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfileModificationObjectSchema" /> class.
        /// </summary>
        /// <param name="eventAt">Event time.</param>
        /// <param name="newValue">newValue</param>
        /// <param name="profileField">profileField</param>
        /// <param name="user">user</param>
        [JsonConstructor]
        public UserProfileModificationObjectSchema(DateTime eventAt, string newValue, string profileField, UserComplianceSchemaUser user)
        {
            EventAt = eventAt;
            NewValue = newValue;
            ProfileField = profileField;
            User = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Event time.
        /// </summary>
        /// <value>Event time.</value>
        /* <example>2021-07-06T18:40:40Z</example> */
        [JsonPropertyName("event_at")]
        public DateTime EventAt { get; set; }

        /// <summary>
        /// Gets or Sets NewValue
        /// </summary>
        [JsonPropertyName("new_value")]
        public string NewValue { get; set; }

        /// <summary>
        /// Gets or Sets ProfileField
        /// </summary>
        [JsonPropertyName("profile_field")]
        public string ProfileField { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public UserComplianceSchemaUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserProfileModificationObjectSchema {\n");
            sb.Append("  EventAt: ").Append(EventAt).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  ProfileField: ").Append(ProfileField).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserProfileModificationObjectSchema" />
    /// </summary>
    public class UserProfileModificationObjectSchemaJsonConverter : JsonConverter<UserProfileModificationObjectSchema>
    {
        /// <summary>
        /// The format to use to serialize EventAt
        /// </summary>
        public static string EventAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserProfileModificationObjectSchema" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserProfileModificationObjectSchema Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> eventAt = default;
            Option<string?> newValue = default;
            Option<string?> profileField = default;
            Option<UserComplianceSchemaUser?> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                eventAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "new_value":
                            newValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_field":
                            profileField = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                user = new Option<UserComplianceSchemaUser?>(JsonSerializer.Deserialize<UserComplianceSchemaUser>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!eventAt.IsSet)
                throw new ArgumentException("Property is required for class UserProfileModificationObjectSchema.", nameof(eventAt));

            if (!newValue.IsSet)
                throw new ArgumentException("Property is required for class UserProfileModificationObjectSchema.", nameof(newValue));

            if (!profileField.IsSet)
                throw new ArgumentException("Property is required for class UserProfileModificationObjectSchema.", nameof(profileField));

            if (!user.IsSet)
                throw new ArgumentException("Property is required for class UserProfileModificationObjectSchema.", nameof(user));

            if (eventAt.IsSet && eventAt.Value == null)
                throw new ArgumentNullException(nameof(eventAt), "Property is not nullable for class UserProfileModificationObjectSchema.");

            if (newValue.IsSet && newValue.Value == null)
                throw new ArgumentNullException(nameof(newValue), "Property is not nullable for class UserProfileModificationObjectSchema.");

            if (profileField.IsSet && profileField.Value == null)
                throw new ArgumentNullException(nameof(profileField), "Property is not nullable for class UserProfileModificationObjectSchema.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class UserProfileModificationObjectSchema.");

            return new UserProfileModificationObjectSchema(eventAt.Value!.Value!, newValue.Value!, profileField.Value!, user.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserProfileModificationObjectSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileModificationObjectSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserProfileModificationObjectSchema userProfileModificationObjectSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userProfileModificationObjectSchema, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserProfileModificationObjectSchema" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userProfileModificationObjectSchema"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserProfileModificationObjectSchema userProfileModificationObjectSchema, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userProfileModificationObjectSchema.NewValue == null)
                throw new ArgumentNullException(nameof(userProfileModificationObjectSchema.NewValue), "Property is required for class UserProfileModificationObjectSchema.");

            if (userProfileModificationObjectSchema.ProfileField == null)
                throw new ArgumentNullException(nameof(userProfileModificationObjectSchema.ProfileField), "Property is required for class UserProfileModificationObjectSchema.");

            if (userProfileModificationObjectSchema.User == null)
                throw new ArgumentNullException(nameof(userProfileModificationObjectSchema.User), "Property is required for class UserProfileModificationObjectSchema.");

            writer.WriteString("event_at", userProfileModificationObjectSchema.EventAt.ToString(EventAtFormat));

            writer.WriteString("new_value", userProfileModificationObjectSchema.NewValue);

            writer.WriteString("profile_field", userProfileModificationObjectSchema.ProfileField);

            writer.WritePropertyName("user");
            JsonSerializer.Serialize(writer, userProfileModificationObjectSchema.User, jsonSerializerOptions);
        }
    }
}
