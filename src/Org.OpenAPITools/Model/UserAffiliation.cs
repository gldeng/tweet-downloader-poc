// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Metadata about a user&#39;s affiliation.
    /// </summary>
    public partial class UserAffiliation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAffiliation" /> class.
        /// </summary>
        /// <param name="badgeUrl">The badge URL corresponding to the affiliation.</param>
        /// <param name="description">The description of the affiliation.</param>
        /// <param name="url">The URL, if available, to details about an affiliation.</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public UserAffiliation(Option<string?> badgeUrl = default, Option<string?> description = default, Option<string?> url = default, Option<List<string>?> userId = default)
        {
            BadgeUrlOption = badgeUrl;
            DescriptionOption = description;
            UrlOption = url;
            UserIdOption = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of BadgeUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BadgeUrlOption { get; private set; }

        /// <summary>
        /// The badge URL corresponding to the affiliation.
        /// </summary>
        /// <value>The badge URL corresponding to the affiliation.</value>
        [JsonPropertyName("badge_url")]
        public string? BadgeUrl { get { return this.BadgeUrlOption; } set { this.BadgeUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The description of the affiliation.
        /// </summary>
        /// <value>The description of the affiliation.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL, if available, to details about an affiliation.
        /// </summary>
        /// <value>The URL, if available, to details about an affiliation.</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public List<string>? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAffiliation {\n");
            sb.Append("  BadgeUrl: ").Append(BadgeUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAffiliation" />
    /// </summary>
    public class UserAffiliationJsonConverter : JsonConverter<UserAffiliation>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserAffiliation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserAffiliation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> badgeUrl = default;
            Option<string?> description = default;
            Option<string?> url = default;
            Option<List<string>?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "badge_url":
                            badgeUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (badgeUrl.IsSet && badgeUrl.Value == null)
                throw new ArgumentNullException(nameof(badgeUrl), "Property is not nullable for class UserAffiliation.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UserAffiliation.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class UserAffiliation.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class UserAffiliation.");

            return new UserAffiliation(badgeUrl, description, url, userId);
        }

        /// <summary>
        /// Serializes a <see cref="UserAffiliation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAffiliation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserAffiliation userAffiliation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userAffiliation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserAffiliation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAffiliation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserAffiliation userAffiliation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userAffiliation.BadgeUrlOption.IsSet && userAffiliation.BadgeUrl == null)
                throw new ArgumentNullException(nameof(userAffiliation.BadgeUrl), "Property is required for class UserAffiliation.");

            if (userAffiliation.DescriptionOption.IsSet && userAffiliation.Description == null)
                throw new ArgumentNullException(nameof(userAffiliation.Description), "Property is required for class UserAffiliation.");

            if (userAffiliation.UrlOption.IsSet && userAffiliation.Url == null)
                throw new ArgumentNullException(nameof(userAffiliation.Url), "Property is required for class UserAffiliation.");

            if (userAffiliation.UserIdOption.IsSet && userAffiliation.UserId == null)
                throw new ArgumentNullException(nameof(userAffiliation.UserId), "Property is required for class UserAffiliation.");

            if (userAffiliation.BadgeUrlOption.IsSet)
                writer.WriteString("badge_url", userAffiliation.BadgeUrl);

            if (userAffiliation.DescriptionOption.IsSet)
                writer.WriteString("description", userAffiliation.Description);

            if (userAffiliation.UrlOption.IsSet)
                writer.WriteString("url", userAffiliation.Url);

            if (userAffiliation.UserIdOption.IsSet)
            {
                writer.WritePropertyName("user_id");
                JsonSerializer.Serialize(writer, userAffiliation.UserId, jsonSerializerOptions);
            }
        }
    }
}
