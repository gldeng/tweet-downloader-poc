// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateMessageRequest
    /// </summary>
    public partial class CreateMessageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMessageRequest" /> class.
        /// </summary>
        /// <param name="createTextMessageRequest"></param>
        /// <param name="createAttachmentsMessageRequest"></param>
        public CreateMessageRequest(Option<CreateTextMessageRequest?> createTextMessageRequest, Option<CreateAttachmentsMessageRequest?> createAttachmentsMessageRequest)
        {
            CreateTextMessageRequestOption = createTextMessageRequest;
            CreateAttachmentsMessageRequestOption = createAttachmentsMessageRequest;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CreateTextMessageRequest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateTextMessageRequest?> CreateTextMessageRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateTextMessageRequest
        /// </summary>
        public CreateTextMessageRequest? CreateTextMessageRequest { get { return this.CreateTextMessageRequestOption; } set { this.CreateTextMessageRequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreateAttachmentsMessageRequest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateAttachmentsMessageRequest?> CreateAttachmentsMessageRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreateAttachmentsMessageRequest
        /// </summary>
        public CreateAttachmentsMessageRequest? CreateAttachmentsMessageRequest { get { return this.CreateAttachmentsMessageRequestOption; } set { this.CreateAttachmentsMessageRequestOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMessageRequest {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateMessageRequest" />
    /// </summary>
    public class CreateMessageRequestJsonConverter : JsonConverter<CreateMessageRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateMessageRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateMessageRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            CreateTextMessageRequest? createTextMessageRequest = default;
            CreateAttachmentsMessageRequest? createAttachmentsMessageRequest = default;

            Utf8JsonReader utf8JsonReaderAnyOf = utf8JsonReader;
            while (utf8JsonReaderAnyOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (utf8JsonReaderAnyOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderAnyOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderCreateTextMessageRequest = utf8JsonReader;
                    ClientUtils.TryDeserialize<CreateTextMessageRequest?>(ref utf8JsonReaderCreateTextMessageRequest, jsonSerializerOptions, out createTextMessageRequest);

                    Utf8JsonReader utf8JsonReaderCreateAttachmentsMessageRequest = utf8JsonReader;
                    ClientUtils.TryDeserialize<CreateAttachmentsMessageRequest?>(ref utf8JsonReaderCreateAttachmentsMessageRequest, jsonSerializerOptions, out createAttachmentsMessageRequest);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            Option<CreateTextMessageRequest?> createTextMessageRequestParsedValue = createTextMessageRequest == null
                ? default
                : new Option<CreateTextMessageRequest?>(createTextMessageRequest);
            Option<CreateAttachmentsMessageRequest?> createAttachmentsMessageRequestParsedValue = createAttachmentsMessageRequest == null
                ? default
                : new Option<CreateAttachmentsMessageRequest?>(createAttachmentsMessageRequest);

            return new CreateMessageRequest(createTextMessageRequestParsedValue, createAttachmentsMessageRequestParsedValue);
        }

        /// <summary>
        /// Serializes a <see cref="CreateMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateMessageRequest createMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (createMessageRequest.CreateTextMessageRequestOption.IsSet && createMessageRequest.CreateTextMessageRequestOption.Value != null)
            {
                CreateTextMessageRequestJsonConverter CreateTextMessageRequestJsonConverter = (CreateTextMessageRequestJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(createMessageRequest.CreateTextMessageRequestOption.Value.GetType()));
                CreateTextMessageRequestJsonConverter.WriteProperties(writer, createMessageRequest.CreateTextMessageRequestOption.Value, jsonSerializerOptions);
            }

            if (createMessageRequest.CreateAttachmentsMessageRequestOption.IsSet && createMessageRequest.CreateAttachmentsMessageRequestOption.Value != null)
            {
                CreateAttachmentsMessageRequestJsonConverter CreateAttachmentsMessageRequestJsonConverter = (CreateAttachmentsMessageRequestJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(createMessageRequest.CreateAttachmentsMessageRequestOption.Value.GetType()));
                CreateAttachmentsMessageRequestJsonConverter.WriteProperties(writer, createMessageRequest.CreateAttachmentsMessageRequestOption.Value, jsonSerializerOptions);
            }

            WriteProperties(writer, createMessageRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateMessageRequest createMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
