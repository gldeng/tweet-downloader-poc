// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComplianceJob
    /// </summary>
    public partial class ComplianceJob : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceJob" /> class.
        /// </summary>
        /// <param name="createdAt">Creation time of the compliance job.</param>
        /// <param name="downloadExpiresAt">Expiration time of the download URL.</param>
        /// <param name="downloadUrl">URL from which the user will retrieve their compliance results.</param>
        /// <param name="id">Compliance Job ID.</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="uploadExpiresAt">Expiration time of the upload URL.</param>
        /// <param name="uploadUrl">URL to which the user will upload their Tweet or user IDs.</param>
        /// <param name="name">User-provided name for a compliance job.</param>
        [JsonConstructor]
        public ComplianceJob(DateTime createdAt, DateTime downloadExpiresAt, string downloadUrl, string id, ComplianceJobStatus status, ComplianceJobType type, DateTime uploadExpiresAt, string uploadUrl, Option<string?> name = default)
        {
            CreatedAt = createdAt;
            DownloadExpiresAt = downloadExpiresAt;
            DownloadUrl = downloadUrl;
            Id = id;
            Status = status;
            Type = type;
            UploadExpiresAt = uploadExpiresAt;
            UploadUrl = uploadUrl;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public ComplianceJobStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public ComplianceJobType Type { get; set; }

        /// <summary>
        /// Creation time of the compliance job.
        /// </summary>
        /// <value>Creation time of the compliance job.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Expiration time of the download URL.
        /// </summary>
        /// <value>Expiration time of the download URL.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("download_expires_at")]
        public DateTime DownloadExpiresAt { get; set; }

        /// <summary>
        /// URL from which the user will retrieve their compliance results.
        /// </summary>
        /// <value>URL from which the user will retrieve their compliance results.</value>
        [JsonPropertyName("download_url")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Compliance Job ID.
        /// </summary>
        /// <value>Compliance Job ID.</value>
        /* <example>1372966999991541762</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Expiration time of the upload URL.
        /// </summary>
        /// <value>Expiration time of the upload URL.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("upload_expires_at")]
        public DateTime UploadExpiresAt { get; set; }

        /// <summary>
        /// URL to which the user will upload their Tweet or user IDs.
        /// </summary>
        /// <value>URL to which the user will upload their Tweet or user IDs.</value>
        [JsonPropertyName("upload_url")]
        public string UploadUrl { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// User-provided name for a compliance job.
        /// </summary>
        /// <value>User-provided name for a compliance job.</value>
        /* <example>my-job</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceJob {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DownloadExpiresAt: ").Append(DownloadExpiresAt).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UploadExpiresAt: ").Append(UploadExpiresAt).Append("\n");
            sb.Append("  UploadUrl: ").Append(UploadUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComplianceJob" />
    /// </summary>
    public class ComplianceJobJsonConverter : JsonConverter<ComplianceJob>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize DownloadExpiresAt
        /// </summary>
        public static string DownloadExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UploadExpiresAt
        /// </summary>
        public static string UploadExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ComplianceJob" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ComplianceJob Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> createdAt = default;
            Option<DateTime?> downloadExpiresAt = default;
            Option<string?> downloadUrl = default;
            Option<string?> id = default;
            Option<ComplianceJobStatus?> status = default;
            Option<ComplianceJobType?> type = default;
            Option<DateTime?> uploadExpiresAt = default;
            Option<string?> uploadUrl = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "download_expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                downloadExpiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "download_url":
                            downloadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ComplianceJobStatus?>(ComplianceJobStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ComplianceJobType?>(ComplianceJobTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "upload_expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                uploadExpiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "upload_url":
                            uploadUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(createdAt));

            if (!downloadExpiresAt.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(downloadExpiresAt));

            if (!downloadUrl.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(downloadUrl));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(id));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(status));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(type));

            if (!uploadExpiresAt.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(uploadExpiresAt));

            if (!uploadUrl.IsSet)
                throw new ArgumentException("Property is required for class ComplianceJob.", nameof(uploadUrl));

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ComplianceJob.");

            if (downloadExpiresAt.IsSet && downloadExpiresAt.Value == null)
                throw new ArgumentNullException(nameof(downloadExpiresAt), "Property is not nullable for class ComplianceJob.");

            if (downloadUrl.IsSet && downloadUrl.Value == null)
                throw new ArgumentNullException(nameof(downloadUrl), "Property is not nullable for class ComplianceJob.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ComplianceJob.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ComplianceJob.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ComplianceJob.");

            if (uploadExpiresAt.IsSet && uploadExpiresAt.Value == null)
                throw new ArgumentNullException(nameof(uploadExpiresAt), "Property is not nullable for class ComplianceJob.");

            if (uploadUrl.IsSet && uploadUrl.Value == null)
                throw new ArgumentNullException(nameof(uploadUrl), "Property is not nullable for class ComplianceJob.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ComplianceJob.");

            return new ComplianceJob(createdAt.Value!.Value!, downloadExpiresAt.Value!.Value!, downloadUrl.Value!, id.Value!, status.Value!.Value!, type.Value!.Value!, uploadExpiresAt.Value!.Value!, uploadUrl.Value!, name);
        }

        /// <summary>
        /// Serializes a <see cref="ComplianceJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ComplianceJob complianceJob, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, complianceJob, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ComplianceJob" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="complianceJob"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ComplianceJob complianceJob, JsonSerializerOptions jsonSerializerOptions)
        {
            if (complianceJob.DownloadUrl == null)
                throw new ArgumentNullException(nameof(complianceJob.DownloadUrl), "Property is required for class ComplianceJob.");

            if (complianceJob.Id == null)
                throw new ArgumentNullException(nameof(complianceJob.Id), "Property is required for class ComplianceJob.");

            if (complianceJob.UploadUrl == null)
                throw new ArgumentNullException(nameof(complianceJob.UploadUrl), "Property is required for class ComplianceJob.");

            if (complianceJob.NameOption.IsSet && complianceJob.Name == null)
                throw new ArgumentNullException(nameof(complianceJob.Name), "Property is required for class ComplianceJob.");

            writer.WriteString("created_at", complianceJob.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("download_expires_at", complianceJob.DownloadExpiresAt.ToString(DownloadExpiresAtFormat));

            writer.WriteString("download_url", complianceJob.DownloadUrl);

            writer.WriteString("id", complianceJob.Id);

            var statusRawValue = ComplianceJobStatusValueConverter.ToJsonValue(complianceJob.Status);
            writer.WriteString("status", statusRawValue);

            var typeRawValue = ComplianceJobTypeValueConverter.ToJsonValue(complianceJob.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("upload_expires_at", complianceJob.UploadExpiresAt.ToString(UploadExpiresAtFormat));

            writer.WriteString("upload_url", complianceJob.UploadUrl);

            if (complianceJob.NameOption.IsSet)
                writer.WriteString("name", complianceJob.Name);
        }
    }
}
