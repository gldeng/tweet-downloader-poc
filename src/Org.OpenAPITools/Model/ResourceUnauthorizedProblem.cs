// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A problem that indicates you are not allowed to see a particular Tweet, User, etc.
    /// </summary>
    public partial class ResourceUnauthorizedProblem : Problem, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceUnauthorizedProblem" /> class.
        /// </summary>
        /// <param name="title">title</param>
        /// <param name="parameter">parameter</param>
        /// <param name="resourceId">resourceId</param>
        /// <param name="resourceType">resourceType</param>
        /// <param name="section">section</param>
        /// <param name="value">value</param>
        /// <param name="detail">detail</param>
        /// <param name="status">status</param>
        [JsonConstructor]
        public ResourceUnauthorizedProblem(string title, string @parameter, string resourceId, ResourceTypeEnum resourceType, SectionEnum section, string value, Option<string?> detail = default, Option<int?> status = default) : base(title, detail, status)
        {
            Parameter = @parameter;
            ResourceId = resourceId;
            ResourceType = resourceType;
            Section = section;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines ResourceType
        /// </summary>
        public enum ResourceTypeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            User = 1,

            /// <summary>
            /// Enum Tweet for value: tweet
            /// </summary>
            Tweet = 2,

            /// <summary>
            /// Enum Media for value: media
            /// </summary>
            Media = 3,

            /// <summary>
            /// Enum List for value: list
            /// </summary>
            List = 4,

            /// <summary>
            /// Enum Space for value: space
            /// </summary>
            Space = 5
        }

        /// <summary>
        /// Returns a <see cref="ResourceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ResourceTypeEnum ResourceTypeEnumFromString(string value)
        {
            if (value.Equals("user"))
                return ResourceTypeEnum.User;

            if (value.Equals("tweet"))
                return ResourceTypeEnum.Tweet;

            if (value.Equals("media"))
                return ResourceTypeEnum.Media;

            if (value.Equals("list"))
                return ResourceTypeEnum.List;

            if (value.Equals("space"))
                return ResourceTypeEnum.Space;

            throw new NotImplementedException($"Could not convert value to type ResourceTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ResourceTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ResourceTypeEnum? ResourceTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("user"))
                return ResourceTypeEnum.User;

            if (value.Equals("tweet"))
                return ResourceTypeEnum.Tweet;

            if (value.Equals("media"))
                return ResourceTypeEnum.Media;

            if (value.Equals("list"))
                return ResourceTypeEnum.List;

            if (value.Equals("space"))
                return ResourceTypeEnum.Space;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ResourceTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ResourceTypeEnumToJsonValue(ResourceTypeEnum value)
        {
            if (value == ResourceTypeEnum.User)
                return "user";

            if (value == ResourceTypeEnum.Tweet)
                return "tweet";

            if (value == ResourceTypeEnum.Media)
                return "media";

            if (value == ResourceTypeEnum.List)
                return "list";

            if (value == ResourceTypeEnum.Space)
                return "space";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [JsonPropertyName("resource_type")]
        public ResourceTypeEnum ResourceType { get; set; }

        /// <summary>
        /// Defines Section
        /// </summary>
        public enum SectionEnum
        {
            /// <summary>
            /// Enum Data for value: data
            /// </summary>
            Data = 1,

            /// <summary>
            /// Enum Includes for value: includes
            /// </summary>
            Includes = 2
        }

        /// <summary>
        /// Returns a <see cref="SectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SectionEnum SectionEnumFromString(string value)
        {
            if (value.Equals("data"))
                return SectionEnum.Data;

            if (value.Equals("includes"))
                return SectionEnum.Includes;

            throw new NotImplementedException($"Could not convert value to type SectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SectionEnum? SectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("data"))
                return SectionEnum.Data;

            if (value.Equals("includes"))
                return SectionEnum.Includes;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SectionEnumToJsonValue(SectionEnum value)
        {
            if (value == SectionEnum.Data)
                return "data";

            if (value == SectionEnum.Includes)
                return "includes";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [JsonPropertyName("section")]
        public SectionEnum Section { get; set; }

        /// <summary>
        /// Gets or Sets Parameter
        /// </summary>
        [JsonPropertyName("parameter")]
        public string Parameter { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [JsonPropertyName("resource_id")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceUnauthorizedProblem {\n");
            sb.Append("  ").Append(base.ToString()?.Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Parameter: ").Append(Parameter).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResourceUnauthorizedProblem" />
    /// </summary>
    public class ResourceUnauthorizedProblemJsonConverter : JsonConverter<ResourceUnauthorizedProblem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResourceUnauthorizedProblem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResourceUnauthorizedProblem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> title = default;
            Option<string?> type = default;
            Option<string?> varParameter = default;
            Option<string?> resourceId = default;
            Option<ResourceUnauthorizedProblem.ResourceTypeEnum?> resourceType = default;
            Option<ResourceUnauthorizedProblem.SectionEnum?> section = default;
            Option<string?> value = default;
            Option<string?> detail = default;
            Option<int?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parameter":
                            varParameter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_id":
                            resourceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "resource_type":
                            string? resourceTypeRawValue = utf8JsonReader.GetString();
                            if (resourceTypeRawValue != null)
                                resourceType = new Option<ResourceUnauthorizedProblem.ResourceTypeEnum?>(ResourceUnauthorizedProblem.ResourceTypeEnumFromStringOrDefault(resourceTypeRawValue));
                            break;
                        case "section":
                            string? sectionRawValue = utf8JsonReader.GetString();
                            if (sectionRawValue != null)
                                section = new Option<ResourceUnauthorizedProblem.SectionEnum?>(ResourceUnauthorizedProblem.SectionEnumFromStringOrDefault(sectionRawValue));
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "detail":
                            detail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(title));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(type));

            if (!varParameter.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(varParameter));

            if (!resourceId.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(resourceId));

            if (!resourceType.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(resourceType));

            if (!section.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(section));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class ResourceUnauthorizedProblem.", nameof(value));

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (varParameter.IsSet && varParameter.Value == null)
                throw new ArgumentNullException(nameof(varParameter), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (resourceId.IsSet && resourceId.Value == null)
                throw new ArgumentNullException(nameof(resourceId), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (resourceType.IsSet && resourceType.Value == null)
                throw new ArgumentNullException(nameof(resourceType), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (section.IsSet && section.Value == null)
                throw new ArgumentNullException(nameof(section), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class ResourceUnauthorizedProblem.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ResourceUnauthorizedProblem.");

            return new ResourceUnauthorizedProblem(title.Value!, varParameter.Value!, resourceId.Value!, resourceType.Value!.Value!, section.Value!.Value!, value.Value!, detail, status);
        }

        /// <summary>
        /// Serializes a <see cref="ResourceUnauthorizedProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceUnauthorizedProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResourceUnauthorizedProblem resourceUnauthorizedProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resourceUnauthorizedProblem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResourceUnauthorizedProblem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceUnauthorizedProblem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResourceUnauthorizedProblem resourceUnauthorizedProblem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resourceUnauthorizedProblem.Title == null)
                throw new ArgumentNullException(nameof(resourceUnauthorizedProblem.Title), "Property is required for class ResourceUnauthorizedProblem.");

            if (resourceUnauthorizedProblem.Parameter == null)
                throw new ArgumentNullException(nameof(resourceUnauthorizedProblem.Parameter), "Property is required for class ResourceUnauthorizedProblem.");

            if (resourceUnauthorizedProblem.ResourceId == null)
                throw new ArgumentNullException(nameof(resourceUnauthorizedProblem.ResourceId), "Property is required for class ResourceUnauthorizedProblem.");

            if (resourceUnauthorizedProblem.Value == null)
                throw new ArgumentNullException(nameof(resourceUnauthorizedProblem.Value), "Property is required for class ResourceUnauthorizedProblem.");

            if (resourceUnauthorizedProblem.DetailOption.IsSet && resourceUnauthorizedProblem.Detail == null)
                throw new ArgumentNullException(nameof(resourceUnauthorizedProblem.Detail), "Property is required for class ResourceUnauthorizedProblem.");

            writer.WriteString("title", resourceUnauthorizedProblem.Title);

            writer.WriteString("type", resourceUnauthorizedProblem.Type);

            writer.WriteString("parameter", resourceUnauthorizedProblem.Parameter);

            writer.WriteString("resource_id", resourceUnauthorizedProblem.ResourceId);

            var resourceTypeRawValue = ResourceUnauthorizedProblem.ResourceTypeEnumToJsonValue(resourceUnauthorizedProblem.ResourceType);
            writer.WriteString("resource_type", resourceTypeRawValue);
            var sectionRawValue = ResourceUnauthorizedProblem.SectionEnumToJsonValue(resourceUnauthorizedProblem.Section);
            writer.WriteString("section", sectionRawValue);
            writer.WriteString("value", resourceUnauthorizedProblem.Value);

            if (resourceUnauthorizedProblem.DetailOption.IsSet)
                writer.WriteString("detail", resourceUnauthorizedProblem.Detail);

            if (resourceUnauthorizedProblem.StatusOption.IsSet)
                writer.WriteNumber("status", resourceUnauthorizedProblem.StatusOption.Value!.Value);
        }
    }
}
