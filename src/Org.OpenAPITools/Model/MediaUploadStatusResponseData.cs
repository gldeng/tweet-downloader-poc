// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MediaUploadStatusResponseData
    /// </summary>
    public partial class MediaUploadStatusResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadStatusResponseData" /> class.
        /// </summary>
        /// <param name="expiresAfterSecs">Number of seconds after which upload session expires.</param>
        /// <param name="id">The unique identifier of this Media.</param>
        /// <param name="mediaKey">The Media Key identifier for this attachment.</param>
        /// <param name="processingInfo">processingInfo</param>
        /// <param name="size">Size of the upload</param>
        [JsonConstructor]
        public MediaUploadStatusResponseData(Option<int?> expiresAfterSecs = default, Option<string?> id = default, Option<string?> mediaKey = default, Option<ProcessingInfo?> processingInfo = default, Option<int?> size = default)
        {
            ExpiresAfterSecsOption = expiresAfterSecs;
            IdOption = id;
            MediaKeyOption = mediaKey;
            ProcessingInfoOption = processingInfo;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExpiresAfterSecs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpiresAfterSecsOption { get; private set; }

        /// <summary>
        /// Number of seconds after which upload session expires.
        /// </summary>
        /// <value>Number of seconds after which upload session expires.</value>
        [JsonPropertyName("expires_after_secs")]
        public int? ExpiresAfterSecs { get { return this.ExpiresAfterSecsOption; } set { this.ExpiresAfterSecsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Media.
        /// </summary>
        /// <value>The unique identifier of this Media.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MediaKeyOption { get; private set; }

        /// <summary>
        /// The Media Key identifier for this attachment.
        /// </summary>
        /// <value>The Media Key identifier for this attachment.</value>
        [JsonPropertyName("media_key")]
        public string? MediaKey { get { return this.MediaKeyOption; } set { this.MediaKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProcessingInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProcessingInfo?> ProcessingInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProcessingInfo
        /// </summary>
        [JsonPropertyName("processing_info")]
        public ProcessingInfo? ProcessingInfo { get { return this.ProcessingInfoOption; } set { this.ProcessingInfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Size of the upload
        /// </summary>
        /// <value>Size of the upload</value>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MediaUploadStatusResponseData {\n");
            sb.Append("  ExpiresAfterSecs: ").Append(ExpiresAfterSecs).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MediaKey: ").Append(MediaKey).Append("\n");
            sb.Append("  ProcessingInfo: ").Append(ProcessingInfo).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.IdOption.Value != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.IdOption.Value != null &&!regexId.Match(this.IdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.MediaKeyOption.Value != null) {
                // MediaKey (string) pattern
                Regex regexMediaKey = new Regex(@"^([0-9]+)_([0-9]+)$", RegexOptions.CultureInvariant);

                if (this.MediaKeyOption.Value != null &&!regexMediaKey.Match(this.MediaKeyOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MediaKey, must match a pattern of " + regexMediaKey, new [] { "MediaKey" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MediaUploadStatusResponseData" />
    /// </summary>
    public class MediaUploadStatusResponseDataJsonConverter : JsonConverter<MediaUploadStatusResponseData>
    {
        /// <summary>
        /// Deserializes json to <see cref="MediaUploadStatusResponseData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MediaUploadStatusResponseData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> expiresAfterSecs = default;
            Option<string?> id = default;
            Option<string?> mediaKey = default;
            Option<ProcessingInfo?> processingInfo = default;
            Option<int?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "expires_after_secs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAfterSecs = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "media_key":
                            mediaKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "processing_info":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                processingInfo = new Option<ProcessingInfo?>(JsonSerializer.Deserialize<ProcessingInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (expiresAfterSecs.IsSet && expiresAfterSecs.Value == null)
                throw new ArgumentNullException(nameof(expiresAfterSecs), "Property is not nullable for class MediaUploadStatusResponseData.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MediaUploadStatusResponseData.");

            if (mediaKey.IsSet && mediaKey.Value == null)
                throw new ArgumentNullException(nameof(mediaKey), "Property is not nullable for class MediaUploadStatusResponseData.");

            if (processingInfo.IsSet && processingInfo.Value == null)
                throw new ArgumentNullException(nameof(processingInfo), "Property is not nullable for class MediaUploadStatusResponseData.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class MediaUploadStatusResponseData.");

            return new MediaUploadStatusResponseData(expiresAfterSecs, id, mediaKey, processingInfo, size);
        }

        /// <summary>
        /// Serializes a <see cref="MediaUploadStatusResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mediaUploadStatusResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MediaUploadStatusResponseData mediaUploadStatusResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, mediaUploadStatusResponseData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MediaUploadStatusResponseData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mediaUploadStatusResponseData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MediaUploadStatusResponseData mediaUploadStatusResponseData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (mediaUploadStatusResponseData.IdOption.IsSet && mediaUploadStatusResponseData.Id == null)
                throw new ArgumentNullException(nameof(mediaUploadStatusResponseData.Id), "Property is required for class MediaUploadStatusResponseData.");

            if (mediaUploadStatusResponseData.MediaKeyOption.IsSet && mediaUploadStatusResponseData.MediaKey == null)
                throw new ArgumentNullException(nameof(mediaUploadStatusResponseData.MediaKey), "Property is required for class MediaUploadStatusResponseData.");

            if (mediaUploadStatusResponseData.ProcessingInfoOption.IsSet && mediaUploadStatusResponseData.ProcessingInfo == null)
                throw new ArgumentNullException(nameof(mediaUploadStatusResponseData.ProcessingInfo), "Property is required for class MediaUploadStatusResponseData.");

            if (mediaUploadStatusResponseData.ExpiresAfterSecsOption.IsSet)
                writer.WriteNumber("expires_after_secs", mediaUploadStatusResponseData.ExpiresAfterSecsOption.Value!.Value);

            if (mediaUploadStatusResponseData.IdOption.IsSet)
                writer.WriteString("id", mediaUploadStatusResponseData.Id);

            if (mediaUploadStatusResponseData.MediaKeyOption.IsSet)
                writer.WriteString("media_key", mediaUploadStatusResponseData.MediaKey);

            if (mediaUploadStatusResponseData.ProcessingInfoOption.IsSet)
            {
                writer.WritePropertyName("processing_info");
                JsonSerializer.Serialize(writer, mediaUploadStatusResponseData.ProcessingInfo, jsonSerializerOptions);
            }
            if (mediaUploadStatusResponseData.SizeOption.IsSet)
                writer.WriteNumber("size", mediaUploadStatusResponseData.SizeOption.Value!.Value);
        }
    }
}
