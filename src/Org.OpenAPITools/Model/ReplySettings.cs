// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Shows who can reply a Tweet. Fields returned are everyone, mentioned_users, and following.
    /// </summary>
    /// <value>Shows who can reply a Tweet. Fields returned are everyone, mentioned_users, and following.</value>
    public enum ReplySettings
    {
        /// <summary>
        /// Enum Everyone for value: everyone
        /// </summary>
        Everyone = 1,

        /// <summary>
        /// Enum MentionedUsers for value: mentionedUsers
        /// </summary>
        MentionedUsers = 2,

        /// <summary>
        /// Enum Following for value: following
        /// </summary>
        Following = 3,

        /// <summary>
        /// Enum Other for value: other
        /// </summary>
        Other = 4
    }

    /// <summary>
    /// Converts <see cref="ReplySettings"/> to and from the JSON value
    /// </summary>
    public static class ReplySettingsValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ReplySettings"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReplySettings FromString(string value)
        {
            if (value.Equals("everyone"))
                return ReplySettings.Everyone;

            if (value.Equals("mentionedUsers"))
                return ReplySettings.MentionedUsers;

            if (value.Equals("following"))
                return ReplySettings.Following;

            if (value.Equals("other"))
                return ReplySettings.Other;

            throw new NotImplementedException($"Could not convert value to type ReplySettings: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ReplySettings"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReplySettings? FromStringOrDefault(string value)
        {
            if (value.Equals("everyone"))
                return ReplySettings.Everyone;

            if (value.Equals("mentionedUsers"))
                return ReplySettings.MentionedUsers;

            if (value.Equals("following"))
                return ReplySettings.Following;

            if (value.Equals("other"))
                return ReplySettings.Other;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReplySettings"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ReplySettings value)
        {
            if (value == ReplySettings.Everyone)
                return "everyone";

            if (value == ReplySettings.MentionedUsers)
                return "mentionedUsers";

            if (value == ReplySettings.Following)
                return "following";

            if (value == ReplySettings.Other)
                return "other";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReplySettings"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ReplySettingsJsonConverter : JsonConverter<ReplySettings>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReplySettings Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReplySettings? result = rawValue == null
                ? null
                : ReplySettingsValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ReplySettings to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="replySettings"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReplySettings replySettings, JsonSerializerOptions options)
        {
            writer.WriteStringValue(replySettings.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReplySettings"/>
    /// </summary>
    public class ReplySettingsNullableJsonConverter : JsonConverter<ReplySettings?>
    {
        /// <summary>
        /// Returns a ReplySettings from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReplySettings? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReplySettings? result = rawValue == null
                ? null
                : ReplySettingsValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="replySettings"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReplySettings? replySettings, JsonSerializerOptions options)
        {
            writer.WriteStringValue(replySettings?.ToString() ?? "null");
        }
    }
}
