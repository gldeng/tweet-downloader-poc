// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies the type of attachments (if any) present in this Tweet.
    /// </summary>
    public partial class TweetAttachments : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetAttachments" /> class.
        /// </summary>
        /// <param name="mediaKeys">A list of Media Keys for each one of the media attachments (if media are attached).</param>
        /// <param name="mediaSourceTweetId">A list of Posts the media on this Tweet was originally posted in. For example, if the media on a tweet is re-used in another Tweet, this refers to the original, source Tweet..</param>
        /// <param name="pollIds">A list of poll IDs (if polls are attached).</param>
        [JsonConstructor]
        public TweetAttachments(Option<List<string>?> mediaKeys = default, Option<List<string>?> mediaSourceTweetId = default, Option<List<string>?> pollIds = default)
        {
            MediaKeysOption = mediaKeys;
            MediaSourceTweetIdOption = mediaSourceTweetId;
            PollIdsOption = pollIds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of MediaKeys
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> MediaKeysOption { get; private set; }

        /// <summary>
        /// A list of Media Keys for each one of the media attachments (if media are attached).
        /// </summary>
        /// <value>A list of Media Keys for each one of the media attachments (if media are attached).</value>
        [JsonPropertyName("media_keys")]
        public List<string>? MediaKeys { get { return this.MediaKeysOption; } set { this.MediaKeysOption = new(value); } }

        /// <summary>
        /// Used to track the state of MediaSourceTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> MediaSourceTweetIdOption { get; private set; }

        /// <summary>
        /// A list of Posts the media on this Tweet was originally posted in. For example, if the media on a tweet is re-used in another Tweet, this refers to the original, source Tweet..
        /// </summary>
        /// <value>A list of Posts the media on this Tweet was originally posted in. For example, if the media on a tweet is re-used in another Tweet, this refers to the original, source Tweet..</value>
        [JsonPropertyName("media_source_tweet_id")]
        public List<string>? MediaSourceTweetId { get { return this.MediaSourceTweetIdOption; } set { this.MediaSourceTweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PollIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> PollIdsOption { get; private set; }

        /// <summary>
        /// A list of poll IDs (if polls are attached).
        /// </summary>
        /// <value>A list of poll IDs (if polls are attached).</value>
        [JsonPropertyName("poll_ids")]
        public List<string>? PollIds { get { return this.PollIdsOption; } set { this.PollIdsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetAttachments {\n");
            sb.Append("  MediaKeys: ").Append(MediaKeys).Append("\n");
            sb.Append("  MediaSourceTweetId: ").Append(MediaSourceTweetId).Append("\n");
            sb.Append("  PollIds: ").Append(PollIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetAttachments" />
    /// </summary>
    public class TweetAttachmentsJsonConverter : JsonConverter<TweetAttachments>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetAttachments" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetAttachments Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> mediaKeys = default;
            Option<List<string>?> mediaSourceTweetId = default;
            Option<List<string>?> pollIds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "media_keys":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mediaKeys = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "media_source_tweet_id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mediaSourceTweetId = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "poll_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pollIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (mediaKeys.IsSet && mediaKeys.Value == null)
                throw new ArgumentNullException(nameof(mediaKeys), "Property is not nullable for class TweetAttachments.");

            if (mediaSourceTweetId.IsSet && mediaSourceTweetId.Value == null)
                throw new ArgumentNullException(nameof(mediaSourceTweetId), "Property is not nullable for class TweetAttachments.");

            if (pollIds.IsSet && pollIds.Value == null)
                throw new ArgumentNullException(nameof(pollIds), "Property is not nullable for class TweetAttachments.");

            return new TweetAttachments(mediaKeys, mediaSourceTweetId, pollIds);
        }

        /// <summary>
        /// Serializes a <see cref="TweetAttachments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetAttachments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetAttachments tweetAttachments, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetAttachments, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetAttachments" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetAttachments"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetAttachments tweetAttachments, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetAttachments.MediaKeysOption.IsSet && tweetAttachments.MediaKeys == null)
                throw new ArgumentNullException(nameof(tweetAttachments.MediaKeys), "Property is required for class TweetAttachments.");

            if (tweetAttachments.MediaSourceTweetIdOption.IsSet && tweetAttachments.MediaSourceTweetId == null)
                throw new ArgumentNullException(nameof(tweetAttachments.MediaSourceTweetId), "Property is required for class TweetAttachments.");

            if (tweetAttachments.PollIdsOption.IsSet && tweetAttachments.PollIds == null)
                throw new ArgumentNullException(nameof(tweetAttachments.PollIds), "Property is required for class TweetAttachments.");

            if (tweetAttachments.MediaKeysOption.IsSet)
            {
                writer.WritePropertyName("media_keys");
                JsonSerializer.Serialize(writer, tweetAttachments.MediaKeys, jsonSerializerOptions);
            }
            if (tweetAttachments.MediaSourceTweetIdOption.IsSet)
            {
                writer.WritePropertyName("media_source_tweet_id");
                JsonSerializer.Serialize(writer, tweetAttachments.MediaSourceTweetId, jsonSerializerOptions);
            }
            if (tweetAttachments.PollIdsOption.IsSet)
            {
                writer.WritePropertyName("poll_ids");
                JsonSerializer.Serialize(writer, tweetAttachments.PollIds, jsonSerializerOptions);
            }
        }
    }
}
