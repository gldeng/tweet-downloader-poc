// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DmEvent
    /// </summary>
    public partial class DmEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DmEvent" /> class.
        /// </summary>
        /// <param name="eventType">eventType</param>
        /// <param name="id">Unique identifier of a DM Event.</param>
        /// <param name="attachments">attachments</param>
        /// <param name="cashtags">cashtags</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="dmConversationId">Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.</param>
        /// <param name="hashtags">hashtags</param>
        /// <param name="mentions">mentions</param>
        /// <param name="participantIds">A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.</param>
        /// <param name="referencedTweets">A list of Posts this DM refers to.</param>
        /// <param name="senderId">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="text">text</param>
        /// <param name="urls">urls</param>
        [JsonConstructor]
        public DmEvent(string eventType, string id, Option<DmEventAttachments?> attachments = default, Option<List<CashtagEntity>?> cashtags = default, Option<DateTime?> createdAt = default, Option<string?> dmConversationId = default, Option<List<HashtagEntity>?> hashtags = default, Option<List<MentionEntity>?> mentions = default, Option<List<string>?> participantIds = default, Option<List<DmEventReferencedTweetsInner>?> referencedTweets = default, Option<string?> senderId = default, Option<string?> text = default, Option<List<UrlEntityDm>?> urls = default)
        {
            EventType = eventType;
            Id = id;
            AttachmentsOption = attachments;
            CashtagsOption = cashtags;
            CreatedAtOption = createdAt;
            DmConversationIdOption = dmConversationId;
            HashtagsOption = hashtags;
            MentionsOption = mentions;
            ParticipantIdsOption = participantIds;
            ReferencedTweetsOption = referencedTweets;
            SenderIdOption = senderId;
            TextOption = text;
            UrlsOption = urls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        /* <example>MessageCreate</example> */
        [JsonPropertyName("event_type")]
        public string EventType { get; set; }

        /// <summary>
        /// Unique identifier of a DM Event.
        /// </summary>
        /// <value>Unique identifier of a DM Event.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DmEventAttachments?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public DmEventAttachments? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cashtags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CashtagEntity>?> CashtagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cashtags
        /// </summary>
        [JsonPropertyName("cashtags")]
        public List<CashtagEntity>? Cashtags { get { return this.CashtagsOption; } set { this.CashtagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of DmConversationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DmConversationIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.
        /// </summary>
        /// <value>Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a &#39;-&#39; character in the case of one-on-one DM Conversations.</value>
        /* <example>123123123-456456456</example> */
        [JsonPropertyName("dm_conversation_id")]
        public string? DmConversationId { get { return this.DmConversationIdOption; } set { this.DmConversationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashtags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HashtagEntity>?> HashtagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hashtags
        /// </summary>
        [JsonPropertyName("hashtags")]
        public List<HashtagEntity>? Hashtags { get { return this.HashtagsOption; } set { this.HashtagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mentions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MentionEntity>?> MentionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mentions
        /// </summary>
        [JsonPropertyName("mentions")]
        public List<MentionEntity>? Mentions { get { return this.MentionsOption; } set { this.MentionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParticipantIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ParticipantIdsOption { get; private set; }

        /// <summary>
        /// A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.
        /// </summary>
        /// <value>A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.</value>
        [JsonPropertyName("participant_ids")]
        public List<string>? ParticipantIds { get { return this.ParticipantIdsOption; } set { this.ParticipantIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReferencedTweets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DmEventReferencedTweetsInner>?> ReferencedTweetsOption { get; private set; }

        /// <summary>
        /// A list of Posts this DM refers to.
        /// </summary>
        /// <value>A list of Posts this DM refers to.</value>
        [JsonPropertyName("referenced_tweets")]
        public List<DmEventReferencedTweetsInner>? ReferencedTweets { get { return this.ReferencedTweetsOption; } set { this.ReferencedTweetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SenderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SenderIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("sender_id")]
        public string? SenderId { get { return this.SenderIdOption; } set { this.SenderIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Urls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UrlEntityDm>?> UrlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [JsonPropertyName("urls")]
        public List<UrlEntityDm>? Urls { get { return this.UrlsOption; } set { this.UrlsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DmEvent {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Cashtags: ").Append(Cashtags).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DmConversationId: ").Append(DmConversationId).Append("\n");
            sb.Append("  Hashtags: ").Append(Hashtags).Append("\n");
            sb.Append("  Mentions: ").Append(Mentions).Append("\n");
            sb.Append("  ParticipantIds: ").Append(ParticipantIds).Append("\n");
            sb.Append("  ReferencedTweets: ").Append(ReferencedTweets).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.DmConversationIdOption.Value != null) {
                // DmConversationId (string) pattern
                Regex regexDmConversationId = new Regex(@"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$", RegexOptions.CultureInvariant);

                if (this.DmConversationIdOption.Value != null &&!regexDmConversationId.Match(this.DmConversationIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DmConversationId, must match a pattern of " + regexDmConversationId, new [] { "DmConversationId" });
                }
            }

            if (this.SenderIdOption.Value != null) {
                // SenderId (string) pattern
                Regex regexSenderId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.SenderIdOption.Value != null &&!regexSenderId.Match(this.SenderIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SenderId, must match a pattern of " + regexSenderId, new [] { "SenderId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DmEvent" />
    /// </summary>
    public class DmEventJsonConverter : JsonConverter<DmEvent>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DmEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DmEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> eventType = default;
            Option<string?> id = default;
            Option<DmEventAttachments?> attachments = default;
            Option<List<CashtagEntity>?> cashtags = default;
            Option<DateTime?> createdAt = default;
            Option<string?> dmConversationId = default;
            Option<List<HashtagEntity>?> hashtags = default;
            Option<List<MentionEntity>?> mentions = default;
            Option<List<string>?> participantIds = default;
            Option<List<DmEventReferencedTweetsInner>?> referencedTweets = default;
            Option<string?> senderId = default;
            Option<string?> text = default;
            Option<List<UrlEntityDm>?> urls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_type":
                            eventType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attachments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachments = new Option<DmEventAttachments?>(JsonSerializer.Deserialize<DmEventAttachments>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cashtags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashtags = new Option<List<CashtagEntity>?>(JsonSerializer.Deserialize<List<CashtagEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dm_conversation_id":
                            dmConversationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hashtags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hashtags = new Option<List<HashtagEntity>?>(JsonSerializer.Deserialize<List<HashtagEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mentions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mentions = new Option<List<MentionEntity>?>(JsonSerializer.Deserialize<List<MentionEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "participant_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                participantIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "referenced_tweets":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                referencedTweets = new Option<List<DmEventReferencedTweetsInner>?>(JsonSerializer.Deserialize<List<DmEventReferencedTweetsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sender_id":
                            senderId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "urls":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                urls = new Option<List<UrlEntityDm>?>(JsonSerializer.Deserialize<List<UrlEntityDm>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!eventType.IsSet)
                throw new ArgumentException("Property is required for class DmEvent.", nameof(eventType));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class DmEvent.", nameof(id));

            if (eventType.IsSet && eventType.Value == null)
                throw new ArgumentNullException(nameof(eventType), "Property is not nullable for class DmEvent.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DmEvent.");

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class DmEvent.");

            if (cashtags.IsSet && cashtags.Value == null)
                throw new ArgumentNullException(nameof(cashtags), "Property is not nullable for class DmEvent.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class DmEvent.");

            if (dmConversationId.IsSet && dmConversationId.Value == null)
                throw new ArgumentNullException(nameof(dmConversationId), "Property is not nullable for class DmEvent.");

            if (hashtags.IsSet && hashtags.Value == null)
                throw new ArgumentNullException(nameof(hashtags), "Property is not nullable for class DmEvent.");

            if (mentions.IsSet && mentions.Value == null)
                throw new ArgumentNullException(nameof(mentions), "Property is not nullable for class DmEvent.");

            if (participantIds.IsSet && participantIds.Value == null)
                throw new ArgumentNullException(nameof(participantIds), "Property is not nullable for class DmEvent.");

            if (referencedTweets.IsSet && referencedTweets.Value == null)
                throw new ArgumentNullException(nameof(referencedTweets), "Property is not nullable for class DmEvent.");

            if (senderId.IsSet && senderId.Value == null)
                throw new ArgumentNullException(nameof(senderId), "Property is not nullable for class DmEvent.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class DmEvent.");

            if (urls.IsSet && urls.Value == null)
                throw new ArgumentNullException(nameof(urls), "Property is not nullable for class DmEvent.");

            return new DmEvent(eventType.Value!, id.Value!, attachments, cashtags, createdAt, dmConversationId, hashtags, mentions, participantIds, referencedTweets, senderId, text, urls);
        }

        /// <summary>
        /// Serializes a <see cref="DmEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dmEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DmEvent dmEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dmEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DmEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dmEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DmEvent dmEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dmEvent.EventType == null)
                throw new ArgumentNullException(nameof(dmEvent.EventType), "Property is required for class DmEvent.");

            if (dmEvent.Id == null)
                throw new ArgumentNullException(nameof(dmEvent.Id), "Property is required for class DmEvent.");

            if (dmEvent.AttachmentsOption.IsSet && dmEvent.Attachments == null)
                throw new ArgumentNullException(nameof(dmEvent.Attachments), "Property is required for class DmEvent.");

            if (dmEvent.CashtagsOption.IsSet && dmEvent.Cashtags == null)
                throw new ArgumentNullException(nameof(dmEvent.Cashtags), "Property is required for class DmEvent.");

            if (dmEvent.DmConversationIdOption.IsSet && dmEvent.DmConversationId == null)
                throw new ArgumentNullException(nameof(dmEvent.DmConversationId), "Property is required for class DmEvent.");

            if (dmEvent.HashtagsOption.IsSet && dmEvent.Hashtags == null)
                throw new ArgumentNullException(nameof(dmEvent.Hashtags), "Property is required for class DmEvent.");

            if (dmEvent.MentionsOption.IsSet && dmEvent.Mentions == null)
                throw new ArgumentNullException(nameof(dmEvent.Mentions), "Property is required for class DmEvent.");

            if (dmEvent.ParticipantIdsOption.IsSet && dmEvent.ParticipantIds == null)
                throw new ArgumentNullException(nameof(dmEvent.ParticipantIds), "Property is required for class DmEvent.");

            if (dmEvent.ReferencedTweetsOption.IsSet && dmEvent.ReferencedTweets == null)
                throw new ArgumentNullException(nameof(dmEvent.ReferencedTweets), "Property is required for class DmEvent.");

            if (dmEvent.SenderIdOption.IsSet && dmEvent.SenderId == null)
                throw new ArgumentNullException(nameof(dmEvent.SenderId), "Property is required for class DmEvent.");

            if (dmEvent.TextOption.IsSet && dmEvent.Text == null)
                throw new ArgumentNullException(nameof(dmEvent.Text), "Property is required for class DmEvent.");

            if (dmEvent.UrlsOption.IsSet && dmEvent.Urls == null)
                throw new ArgumentNullException(nameof(dmEvent.Urls), "Property is required for class DmEvent.");

            writer.WriteString("event_type", dmEvent.EventType);

            writer.WriteString("id", dmEvent.Id);

            if (dmEvent.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, dmEvent.Attachments, jsonSerializerOptions);
            }
            if (dmEvent.CashtagsOption.IsSet)
            {
                writer.WritePropertyName("cashtags");
                JsonSerializer.Serialize(writer, dmEvent.Cashtags, jsonSerializerOptions);
            }
            if (dmEvent.CreatedAtOption.IsSet)
                writer.WriteString("created_at", dmEvent.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (dmEvent.DmConversationIdOption.IsSet)
                writer.WriteString("dm_conversation_id", dmEvent.DmConversationId);

            if (dmEvent.HashtagsOption.IsSet)
            {
                writer.WritePropertyName("hashtags");
                JsonSerializer.Serialize(writer, dmEvent.Hashtags, jsonSerializerOptions);
            }
            if (dmEvent.MentionsOption.IsSet)
            {
                writer.WritePropertyName("mentions");
                JsonSerializer.Serialize(writer, dmEvent.Mentions, jsonSerializerOptions);
            }
            if (dmEvent.ParticipantIdsOption.IsSet)
            {
                writer.WritePropertyName("participant_ids");
                JsonSerializer.Serialize(writer, dmEvent.ParticipantIds, jsonSerializerOptions);
            }
            if (dmEvent.ReferencedTweetsOption.IsSet)
            {
                writer.WritePropertyName("referenced_tweets");
                JsonSerializer.Serialize(writer, dmEvent.ReferencedTweets, jsonSerializerOptions);
            }
            if (dmEvent.SenderIdOption.IsSet)
                writer.WriteString("sender_id", dmEvent.SenderId);

            if (dmEvent.TextOption.IsSet)
                writer.WriteString("text", dmEvent.Text);

            if (dmEvent.UrlsOption.IsSet)
            {
                writer.WritePropertyName("urls");
                JsonSerializer.Serialize(writer, dmEvent.Urls, jsonSerializerOptions);
            }
        }
    }
}
