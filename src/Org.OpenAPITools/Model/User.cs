// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The X User object.
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="name">The friendly name of this User, as shown on their profile.</param>
        /// <param name="username">The X handle (screen name) of this user.</param>
        /// <param name="affiliation">affiliation</param>
        /// <param name="connectionStatus">Returns detailed information about the relationship between two users.</param>
        /// <param name="createdAt">Creation time of this User.</param>
        /// <param name="description">The text of this User&#39;s profile description (also known as bio), if the User provided one.</param>
        /// <param name="entities">entities</param>
        /// <param name="location">The location specified in the User&#39;s profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.</param>
        /// <param name="mostRecentTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="pinnedTweetId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="profileBannerUrl">The URL to the profile banner for this User.</param>
        /// <param name="profileImageUrl">The URL to the profile image for this User.</param>
        /// <param name="protected">Indicates if this User has chosen to protect their Posts (in other words, if this User&#39;s Posts are private).</param>
        /// <param name="publicMetrics">publicMetrics</param>
        /// <param name="receivesYourDm">Indicates if you can send a DM to this User</param>
        /// <param name="subscriptionType">The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None.</param>
        /// <param name="url">The URL specified in the User&#39;s profile.</param>
        /// <param name="verified">Indicate if this User is a verified X User.</param>
        /// <param name="verifiedType">The X Blue verified type of the user, eg: blue, government, business or none.</param>
        /// <param name="withheld">withheld</param>
        [JsonConstructor]
        public User(string id, string name, string username, Option<UserAffiliation?> affiliation = default, Option<List<User.ConnectionStatusEnum>?> connectionStatus = default, Option<DateTime?> createdAt = default, Option<string?> description = default, Option<UserEntities?> entities = default, Option<string?> location = default, Option<string?> mostRecentTweetId = default, Option<string?> pinnedTweetId = default, Option<string?> profileBannerUrl = default, Option<string?> profileImageUrl = default, Option<bool?> @protected = default, Option<UserPublicMetrics?> publicMetrics = default, Option<bool?> receivesYourDm = default, Option<SubscriptionTypeEnum?> subscriptionType = default, Option<string?> url = default, Option<bool?> verified = default, Option<VerifiedTypeEnum?> verifiedType = default, Option<UserWithheld?> withheld = default)
        {
            Id = id;
            Name = name;
            Username = username;
            AffiliationOption = affiliation;
            ConnectionStatusOption = connectionStatus;
            CreatedAtOption = createdAt;
            DescriptionOption = description;
            EntitiesOption = entities;
            LocationOption = location;
            MostRecentTweetIdOption = mostRecentTweetId;
            PinnedTweetIdOption = pinnedTweetId;
            ProfileBannerUrlOption = profileBannerUrl;
            ProfileImageUrlOption = profileImageUrl;
            ProtectedOption = @protected;
            PublicMetricsOption = publicMetrics;
            ReceivesYourDmOption = receivesYourDm;
            SubscriptionTypeOption = subscriptionType;
            UrlOption = url;
            VerifiedOption = verified;
            VerifiedTypeOption = verifiedType;
            WithheldOption = withheld;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of connection between users.
        /// </summary>
        /// <value>Type of connection between users.</value>
        public enum ConnectionStatusEnum
        {
            /// <summary>
            /// Enum FollowRequestReceived for value: follow_request_received
            /// </summary>
            FollowRequestReceived = 1,

            /// <summary>
            /// Enum FollowRequestSent for value: follow_request_sent
            /// </summary>
            FollowRequestSent = 2,

            /// <summary>
            /// Enum Blocking for value: blocking
            /// </summary>
            Blocking = 3,

            /// <summary>
            /// Enum FollowedBy for value: followed_by
            /// </summary>
            FollowedBy = 4,

            /// <summary>
            /// Enum Following for value: following
            /// </summary>
            Following = 5,

            /// <summary>
            /// Enum Muting for value: muting
            /// </summary>
            Muting = 6
        }

        /// <summary>
        /// Returns a <see cref="ConnectionStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConnectionStatusEnum ConnectionStatusEnumFromString(string value)
        {
            if (value.Equals("follow_request_received"))
                return ConnectionStatusEnum.FollowRequestReceived;

            if (value.Equals("follow_request_sent"))
                return ConnectionStatusEnum.FollowRequestSent;

            if (value.Equals("blocking"))
                return ConnectionStatusEnum.Blocking;

            if (value.Equals("followed_by"))
                return ConnectionStatusEnum.FollowedBy;

            if (value.Equals("following"))
                return ConnectionStatusEnum.Following;

            if (value.Equals("muting"))
                return ConnectionStatusEnum.Muting;

            throw new NotImplementedException($"Could not convert value to type ConnectionStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConnectionStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConnectionStatusEnum? ConnectionStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("follow_request_received"))
                return ConnectionStatusEnum.FollowRequestReceived;

            if (value.Equals("follow_request_sent"))
                return ConnectionStatusEnum.FollowRequestSent;

            if (value.Equals("blocking"))
                return ConnectionStatusEnum.Blocking;

            if (value.Equals("followed_by"))
                return ConnectionStatusEnum.FollowedBy;

            if (value.Equals("following"))
                return ConnectionStatusEnum.Following;

            if (value.Equals("muting"))
                return ConnectionStatusEnum.Muting;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConnectionStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ConnectionStatusEnumToJsonValue(ConnectionStatusEnum? value)
        {
            if (value == ConnectionStatusEnum.FollowRequestReceived)
                return "follow_request_received";

            if (value == ConnectionStatusEnum.FollowRequestSent)
                return "follow_request_sent";

            if (value == ConnectionStatusEnum.Blocking)
                return "blocking";

            if (value == ConnectionStatusEnum.FollowedBy)
                return "followed_by";

            if (value == ConnectionStatusEnum.Following)
                return "following";

            if (value == ConnectionStatusEnum.Muting)
                return "muting";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None.
        /// </summary>
        /// <value>The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None.</value>
        public enum SubscriptionTypeEnum
        {
            /// <summary>
            /// Enum Basic for value: Basic
            /// </summary>
            Basic = 1,

            /// <summary>
            /// Enum Premium for value: Premium
            /// </summary>
            Premium = 2,

            /// <summary>
            /// Enum PremiumPlus for value: PremiumPlus
            /// </summary>
            PremiumPlus = 3,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            None = 4
        }

        /// <summary>
        /// Returns a <see cref="SubscriptionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SubscriptionTypeEnum SubscriptionTypeEnumFromString(string value)
        {
            if (value.Equals("Basic"))
                return SubscriptionTypeEnum.Basic;

            if (value.Equals("Premium"))
                return SubscriptionTypeEnum.Premium;

            if (value.Equals("PremiumPlus"))
                return SubscriptionTypeEnum.PremiumPlus;

            if (value.Equals("None"))
                return SubscriptionTypeEnum.None;

            throw new NotImplementedException($"Could not convert value to type SubscriptionTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SubscriptionTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SubscriptionTypeEnum? SubscriptionTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Basic"))
                return SubscriptionTypeEnum.Basic;

            if (value.Equals("Premium"))
                return SubscriptionTypeEnum.Premium;

            if (value.Equals("PremiumPlus"))
                return SubscriptionTypeEnum.PremiumPlus;

            if (value.Equals("None"))
                return SubscriptionTypeEnum.None;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SubscriptionTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SubscriptionTypeEnumToJsonValue(SubscriptionTypeEnum? value)
        {
            if (value == SubscriptionTypeEnum.Basic)
                return "Basic";

            if (value == SubscriptionTypeEnum.Premium)
                return "Premium";

            if (value == SubscriptionTypeEnum.PremiumPlus)
                return "PremiumPlus";

            if (value == SubscriptionTypeEnum.None)
                return "None";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SubscriptionType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SubscriptionTypeEnum?> SubscriptionTypeOption { get; private set; }

        /// <summary>
        /// The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None.
        /// </summary>
        /// <value>The X Blue subscription type of the user, eg: Basic, Premium, PremiumPlus or None.</value>
        [JsonPropertyName("subscription_type")]
        public SubscriptionTypeEnum? SubscriptionType { get { return this.SubscriptionTypeOption; } set { this.SubscriptionTypeOption = new(value); } }

        /// <summary>
        /// The X Blue verified type of the user, eg: blue, government, business or none.
        /// </summary>
        /// <value>The X Blue verified type of the user, eg: blue, government, business or none.</value>
        public enum VerifiedTypeEnum
        {
            /// <summary>
            /// Enum Blue for value: blue
            /// </summary>
            Blue = 1,

            /// <summary>
            /// Enum Government for value: government
            /// </summary>
            Government = 2,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            Business = 3,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            None = 4
        }

        /// <summary>
        /// Returns a <see cref="VerifiedTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VerifiedTypeEnum VerifiedTypeEnumFromString(string value)
        {
            if (value.Equals("blue"))
                return VerifiedTypeEnum.Blue;

            if (value.Equals("government"))
                return VerifiedTypeEnum.Government;

            if (value.Equals("business"))
                return VerifiedTypeEnum.Business;

            if (value.Equals("none"))
                return VerifiedTypeEnum.None;

            throw new NotImplementedException($"Could not convert value to type VerifiedTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VerifiedTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VerifiedTypeEnum? VerifiedTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("blue"))
                return VerifiedTypeEnum.Blue;

            if (value.Equals("government"))
                return VerifiedTypeEnum.Government;

            if (value.Equals("business"))
                return VerifiedTypeEnum.Business;

            if (value.Equals("none"))
                return VerifiedTypeEnum.None;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VerifiedTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VerifiedTypeEnumToJsonValue(VerifiedTypeEnum? value)
        {
            if (value == VerifiedTypeEnum.Blue)
                return "blue";

            if (value == VerifiedTypeEnum.Government)
                return "government";

            if (value == VerifiedTypeEnum.Business)
                return "business";

            if (value == VerifiedTypeEnum.None)
                return "none";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of VerifiedType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VerifiedTypeEnum?> VerifiedTypeOption { get; private set; }

        /// <summary>
        /// The X Blue verified type of the user, eg: blue, government, business or none.
        /// </summary>
        /// <value>The X Blue verified type of the user, eg: blue, government, business or none.</value>
        [JsonPropertyName("verified_type")]
        public VerifiedTypeEnum? VerifiedType { get { return this.VerifiedTypeOption; } set { this.VerifiedTypeOption = new(value); } }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The friendly name of this User, as shown on their profile.
        /// </summary>
        /// <value>The friendly name of this User, as shown on their profile.</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The X handle (screen name) of this user.
        /// </summary>
        /// <value>The X handle (screen name) of this user.</value>
        [JsonPropertyName("username")]
        public string Username { get; set; }

        /// <summary>
        /// Used to track the state of Affiliation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserAffiliation?> AffiliationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Affiliation
        /// </summary>
        [JsonPropertyName("affiliation")]
        public UserAffiliation? Affiliation { get { return this.AffiliationOption; } set { this.AffiliationOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConnectionStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<User.ConnectionStatusEnum>?> ConnectionStatusOption { get; private set; }

        /// <summary>
        /// Returns detailed information about the relationship between two users.
        /// </summary>
        /// <value>Returns detailed information about the relationship between two users.</value>
        [JsonPropertyName("connection_status")]
        public List<User.ConnectionStatusEnum>? ConnectionStatus { get { return this.ConnectionStatusOption; } set { this.ConnectionStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Creation time of this User.
        /// </summary>
        /// <value>Creation time of this User.</value>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// The text of this User&#39;s profile description (also known as bio), if the User provided one.
        /// </summary>
        /// <value>The text of this User&#39;s profile description (also known as bio), if the User provided one.</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserEntities?> EntitiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [JsonPropertyName("entities")]
        public UserEntities? Entities { get { return this.EntitiesOption; } set { this.EntitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// The location specified in the User&#39;s profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
        /// </summary>
        /// <value>The location specified in the User&#39;s profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of MostRecentTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MostRecentTweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("most_recent_tweet_id")]
        public string? MostRecentTweetId { get { return this.MostRecentTweetIdOption; } set { this.MostRecentTweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of PinnedTweetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PinnedTweetIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("pinned_tweet_id")]
        public string? PinnedTweetId { get { return this.PinnedTweetIdOption; } set { this.PinnedTweetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProfileBannerUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProfileBannerUrlOption { get; private set; }

        /// <summary>
        /// The URL to the profile banner for this User.
        /// </summary>
        /// <value>The URL to the profile banner for this User.</value>
        [JsonPropertyName("profile_banner_url")]
        public string? ProfileBannerUrl { get { return this.ProfileBannerUrlOption; } set { this.ProfileBannerUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ProfileImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProfileImageUrlOption { get; private set; }

        /// <summary>
        /// The URL to the profile image for this User.
        /// </summary>
        /// <value>The URL to the profile image for this User.</value>
        [JsonPropertyName("profile_image_url")]
        public string? ProfileImageUrl { get { return this.ProfileImageUrlOption; } set { this.ProfileImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Protected
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ProtectedOption { get; private set; }

        /// <summary>
        /// Indicates if this User has chosen to protect their Posts (in other words, if this User&#39;s Posts are private).
        /// </summary>
        /// <value>Indicates if this User has chosen to protect their Posts (in other words, if this User&#39;s Posts are private).</value>
        [JsonPropertyName("protected")]
        public bool? Protected { get { return this.ProtectedOption; } set { this.ProtectedOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserPublicMetrics?> PublicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicMetrics
        /// </summary>
        [JsonPropertyName("public_metrics")]
        public UserPublicMetrics? PublicMetrics { get { return this.PublicMetricsOption; } set { this.PublicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReceivesYourDm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReceivesYourDmOption { get; private set; }

        /// <summary>
        /// Indicates if you can send a DM to this User
        /// </summary>
        /// <value>Indicates if you can send a DM to this User</value>
        [JsonPropertyName("receives_your_dm")]
        public bool? ReceivesYourDm { get { return this.ReceivesYourDmOption; } set { this.ReceivesYourDmOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL specified in the User&#39;s profile.
        /// </summary>
        /// <value>The URL specified in the User&#39;s profile.</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Verified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> VerifiedOption { get; private set; }

        /// <summary>
        /// Indicate if this User is a verified X User.
        /// </summary>
        /// <value>Indicate if this User is a verified X User.</value>
        [JsonPropertyName("verified")]
        public bool? Verified { get { return this.VerifiedOption; } set { this.VerifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Withheld
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserWithheld?> WithheldOption { get; private set; }

        /// <summary>
        /// Gets or Sets Withheld
        /// </summary>
        [JsonPropertyName("withheld")]
        public UserWithheld? Withheld { get { return this.WithheldOption; } set { this.WithheldOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Affiliation: ").Append(Affiliation).Append("\n");
            sb.Append("  ConnectionStatus: ").Append(ConnectionStatus).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  MostRecentTweetId: ").Append(MostRecentTweetId).Append("\n");
            sb.Append("  PinnedTweetId: ").Append(PinnedTweetId).Append("\n");
            sb.Append("  ProfileBannerUrl: ").Append(ProfileBannerUrl).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  Protected: ").Append(Protected).Append("\n");
            sb.Append("  PublicMetrics: ").Append(PublicMetrics).Append("\n");
            sb.Append("  ReceivesYourDm: ").Append(ReceivesYourDm).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  VerifiedType: ").Append(VerifiedType).Append("\n");
            sb.Append("  Withheld: ").Append(Withheld).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Id != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (!regexId.Match(this.Id).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.Username != null) {
                // Username (string) pattern
                Regex regexUsername = new Regex(@"^[A-Za-z0-9_]{1,15}$", RegexOptions.CultureInvariant);

                if (!regexUsername.Match(this.Username).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, must match a pattern of " + regexUsername, new [] { "Username" });
                }
            }

            if (this.MostRecentTweetIdOption.Value != null) {
                // MostRecentTweetId (string) pattern
                Regex regexMostRecentTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.MostRecentTweetIdOption.Value != null &&!regexMostRecentTweetId.Match(this.MostRecentTweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MostRecentTweetId, must match a pattern of " + regexMostRecentTweetId, new [] { "MostRecentTweetId" });
                }
            }

            if (this.PinnedTweetIdOption.Value != null) {
                // PinnedTweetId (string) pattern
                Regex regexPinnedTweetId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.PinnedTweetIdOption.Value != null &&!regexPinnedTweetId.Match(this.PinnedTweetIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PinnedTweetId, must match a pattern of " + regexPinnedTweetId, new [] { "PinnedTweetId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> username = default;
            Option<UserAffiliation?> affiliation = default;
            Option<List<User.ConnectionStatusEnum>?> connectionStatus = default;
            Option<DateTime?> createdAt = default;
            Option<string?> description = default;
            Option<UserEntities?> entities = default;
            Option<string?> location = default;
            Option<string?> mostRecentTweetId = default;
            Option<string?> pinnedTweetId = default;
            Option<string?> profileBannerUrl = default;
            Option<string?> profileImageUrl = default;
            Option<bool?> varProtected = default;
            Option<UserPublicMetrics?> publicMetrics = default;
            Option<bool?> receivesYourDm = default;
            Option<User.SubscriptionTypeEnum?> subscriptionType = default;
            Option<string?> url = default;
            Option<bool?> verified = default;
            Option<User.VerifiedTypeEnum?> verifiedType = default;
            Option<UserWithheld?> withheld = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "affiliation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                affiliation = new Option<UserAffiliation?>(JsonSerializer.Deserialize<UserAffiliation>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "connection_status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                connectionStatus = new Option<List<User.ConnectionStatusEnum>?>(JsonSerializer.Deserialize<List<User.ConnectionStatusEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "entities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entities = new Option<UserEntities?>(JsonSerializer.Deserialize<UserEntities>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "most_recent_tweet_id":
                            mostRecentTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pinned_tweet_id":
                            pinnedTweetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_banner_url":
                            profileBannerUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_image_url":
                            profileImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "protected":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varProtected = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "public_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                publicMetrics = new Option<UserPublicMetrics?>(JsonSerializer.Deserialize<UserPublicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "receives_your_dm":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                receivesYourDm = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "subscription_type":
                            string? subscriptionTypeRawValue = utf8JsonReader.GetString();
                            if (subscriptionTypeRawValue != null)
                                subscriptionType = new Option<User.SubscriptionTypeEnum?>(User.SubscriptionTypeEnumFromStringOrDefault(subscriptionTypeRawValue));
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                verified = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "verified_type":
                            string? verifiedTypeRawValue = utf8JsonReader.GetString();
                            if (verifiedTypeRawValue != null)
                                verifiedType = new Option<User.VerifiedTypeEnum?>(User.VerifiedTypeEnumFromStringOrDefault(verifiedTypeRawValue));
                            break;
                        case "withheld":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                withheld = new Option<UserWithheld?>(JsonSerializer.Deserialize<UserWithheld>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(name));

            if (!username.IsSet)
                throw new ArgumentException("Property is required for class User.", nameof(username));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class User.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class User.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class User.");

            if (affiliation.IsSet && affiliation.Value == null)
                throw new ArgumentNullException(nameof(affiliation), "Property is not nullable for class User.");

            if (connectionStatus.IsSet && connectionStatus.Value == null)
                throw new ArgumentNullException(nameof(connectionStatus), "Property is not nullable for class User.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class User.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class User.");

            if (entities.IsSet && entities.Value == null)
                throw new ArgumentNullException(nameof(entities), "Property is not nullable for class User.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class User.");

            if (mostRecentTweetId.IsSet && mostRecentTweetId.Value == null)
                throw new ArgumentNullException(nameof(mostRecentTweetId), "Property is not nullable for class User.");

            if (pinnedTweetId.IsSet && pinnedTweetId.Value == null)
                throw new ArgumentNullException(nameof(pinnedTweetId), "Property is not nullable for class User.");

            if (profileBannerUrl.IsSet && profileBannerUrl.Value == null)
                throw new ArgumentNullException(nameof(profileBannerUrl), "Property is not nullable for class User.");

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class User.");

            if (varProtected.IsSet && varProtected.Value == null)
                throw new ArgumentNullException(nameof(varProtected), "Property is not nullable for class User.");

            if (publicMetrics.IsSet && publicMetrics.Value == null)
                throw new ArgumentNullException(nameof(publicMetrics), "Property is not nullable for class User.");

            if (receivesYourDm.IsSet && receivesYourDm.Value == null)
                throw new ArgumentNullException(nameof(receivesYourDm), "Property is not nullable for class User.");

            if (subscriptionType.IsSet && subscriptionType.Value == null)
                throw new ArgumentNullException(nameof(subscriptionType), "Property is not nullable for class User.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class User.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class User.");

            if (verifiedType.IsSet && verifiedType.Value == null)
                throw new ArgumentNullException(nameof(verifiedType), "Property is not nullable for class User.");

            if (withheld.IsSet && withheld.Value == null)
                throw new ArgumentNullException(nameof(withheld), "Property is not nullable for class User.");

            return new User(id.Value!, name.Value!, username.Value!, affiliation, connectionStatus, createdAt, description, entities, location, mostRecentTweetId, pinnedTweetId, profileBannerUrl, profileImageUrl, varProtected, publicMetrics, receivesYourDm, subscriptionType, url, verified, verifiedType, withheld);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.Id == null)
                throw new ArgumentNullException(nameof(user.Id), "Property is required for class User.");

            if (user.Name == null)
                throw new ArgumentNullException(nameof(user.Name), "Property is required for class User.");

            if (user.Username == null)
                throw new ArgumentNullException(nameof(user.Username), "Property is required for class User.");

            if (user.AffiliationOption.IsSet && user.Affiliation == null)
                throw new ArgumentNullException(nameof(user.Affiliation), "Property is required for class User.");

            if (user.ConnectionStatusOption.IsSet && user.ConnectionStatus == null)
                throw new ArgumentNullException(nameof(user.ConnectionStatus), "Property is required for class User.");

            if (user.DescriptionOption.IsSet && user.Description == null)
                throw new ArgumentNullException(nameof(user.Description), "Property is required for class User.");

            if (user.EntitiesOption.IsSet && user.Entities == null)
                throw new ArgumentNullException(nameof(user.Entities), "Property is required for class User.");

            if (user.LocationOption.IsSet && user.Location == null)
                throw new ArgumentNullException(nameof(user.Location), "Property is required for class User.");

            if (user.MostRecentTweetIdOption.IsSet && user.MostRecentTweetId == null)
                throw new ArgumentNullException(nameof(user.MostRecentTweetId), "Property is required for class User.");

            if (user.PinnedTweetIdOption.IsSet && user.PinnedTweetId == null)
                throw new ArgumentNullException(nameof(user.PinnedTweetId), "Property is required for class User.");

            if (user.ProfileBannerUrlOption.IsSet && user.ProfileBannerUrl == null)
                throw new ArgumentNullException(nameof(user.ProfileBannerUrl), "Property is required for class User.");

            if (user.ProfileImageUrlOption.IsSet && user.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(user.ProfileImageUrl), "Property is required for class User.");

            if (user.PublicMetricsOption.IsSet && user.PublicMetrics == null)
                throw new ArgumentNullException(nameof(user.PublicMetrics), "Property is required for class User.");

            if (user.UrlOption.IsSet && user.Url == null)
                throw new ArgumentNullException(nameof(user.Url), "Property is required for class User.");

            if (user.WithheldOption.IsSet && user.Withheld == null)
                throw new ArgumentNullException(nameof(user.Withheld), "Property is required for class User.");

            writer.WriteString("id", user.Id);

            writer.WriteString("name", user.Name);

            writer.WriteString("username", user.Username);

            if (user.AffiliationOption.IsSet)
            {
                writer.WritePropertyName("affiliation");
                JsonSerializer.Serialize(writer, user.Affiliation, jsonSerializerOptions);
            }
            if (user.ConnectionStatusOption.IsSet)
            {
                writer.WritePropertyName("connection_status");
                JsonSerializer.Serialize(writer, user.ConnectionStatus, jsonSerializerOptions);
            }
            if (user.CreatedAtOption.IsSet)
                writer.WriteString("created_at", user.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (user.DescriptionOption.IsSet)
                writer.WriteString("description", user.Description);

            if (user.EntitiesOption.IsSet)
            {
                writer.WritePropertyName("entities");
                JsonSerializer.Serialize(writer, user.Entities, jsonSerializerOptions);
            }
            if (user.LocationOption.IsSet)
                writer.WriteString("location", user.Location);

            if (user.MostRecentTweetIdOption.IsSet)
                writer.WriteString("most_recent_tweet_id", user.MostRecentTweetId);

            if (user.PinnedTweetIdOption.IsSet)
                writer.WriteString("pinned_tweet_id", user.PinnedTweetId);

            if (user.ProfileBannerUrlOption.IsSet)
                writer.WriteString("profile_banner_url", user.ProfileBannerUrl);

            if (user.ProfileImageUrlOption.IsSet)
                writer.WriteString("profile_image_url", user.ProfileImageUrl);

            if (user.ProtectedOption.IsSet)
                writer.WriteBoolean("protected", user.ProtectedOption.Value!.Value);

            if (user.PublicMetricsOption.IsSet)
            {
                writer.WritePropertyName("public_metrics");
                JsonSerializer.Serialize(writer, user.PublicMetrics, jsonSerializerOptions);
            }
            if (user.ReceivesYourDmOption.IsSet)
                writer.WriteBoolean("receives_your_dm", user.ReceivesYourDmOption.Value!.Value);

            var subscriptionTypeRawValue = User.SubscriptionTypeEnumToJsonValue(user.SubscriptionTypeOption.Value!.Value);
            writer.WriteString("subscription_type", subscriptionTypeRawValue);
            if (user.UrlOption.IsSet)
                writer.WriteString("url", user.Url);

            if (user.VerifiedOption.IsSet)
                writer.WriteBoolean("verified", user.VerifiedOption.Value!.Value);

            var verifiedTypeRawValue = User.VerifiedTypeEnumToJsonValue(user.VerifiedTypeOption.Value!.Value);
            writer.WriteString("verified_type", verifiedTypeRawValue);
            if (user.WithheldOption.IsSet)
            {
                writer.WritePropertyName("withheld");
                JsonSerializer.Serialize(writer, user.Withheld, jsonSerializerOptions);
            }
        }
    }
}
