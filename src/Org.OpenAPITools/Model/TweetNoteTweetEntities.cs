// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TweetNoteTweetEntities
    /// </summary>
    public partial class TweetNoteTweetEntities : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TweetNoteTweetEntities" /> class.
        /// </summary>
        /// <param name="cashtags">cashtags</param>
        /// <param name="hashtags">hashtags</param>
        /// <param name="mentions">mentions</param>
        /// <param name="urls">urls</param>
        [JsonConstructor]
        public TweetNoteTweetEntities(Option<List<CashtagEntity>?> cashtags = default, Option<List<HashtagEntity>?> hashtags = default, Option<List<MentionEntity>?> mentions = default, Option<List<UrlEntity>?> urls = default)
        {
            CashtagsOption = cashtags;
            HashtagsOption = hashtags;
            MentionsOption = mentions;
            UrlsOption = urls;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Cashtags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CashtagEntity>?> CashtagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cashtags
        /// </summary>
        [JsonPropertyName("cashtags")]
        public List<CashtagEntity>? Cashtags { get { return this.CashtagsOption; } set { this.CashtagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Hashtags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HashtagEntity>?> HashtagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hashtags
        /// </summary>
        [JsonPropertyName("hashtags")]
        public List<HashtagEntity>? Hashtags { get { return this.HashtagsOption; } set { this.HashtagsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mentions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MentionEntity>?> MentionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mentions
        /// </summary>
        [JsonPropertyName("mentions")]
        public List<MentionEntity>? Mentions { get { return this.MentionsOption; } set { this.MentionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Urls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<UrlEntity>?> UrlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [JsonPropertyName("urls")]
        public List<UrlEntity>? Urls { get { return this.UrlsOption; } set { this.UrlsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TweetNoteTweetEntities {\n");
            sb.Append("  Cashtags: ").Append(Cashtags).Append("\n");
            sb.Append("  Hashtags: ").Append(Hashtags).Append("\n");
            sb.Append("  Mentions: ").Append(Mentions).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TweetNoteTweetEntities" />
    /// </summary>
    public class TweetNoteTweetEntitiesJsonConverter : JsonConverter<TweetNoteTweetEntities>
    {
        /// <summary>
        /// Deserializes json to <see cref="TweetNoteTweetEntities" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TweetNoteTweetEntities Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<CashtagEntity>?> cashtags = default;
            Option<List<HashtagEntity>?> hashtags = default;
            Option<List<MentionEntity>?> mentions = default;
            Option<List<UrlEntity>?> urls = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cashtags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cashtags = new Option<List<CashtagEntity>?>(JsonSerializer.Deserialize<List<CashtagEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hashtags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hashtags = new Option<List<HashtagEntity>?>(JsonSerializer.Deserialize<List<HashtagEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mentions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mentions = new Option<List<MentionEntity>?>(JsonSerializer.Deserialize<List<MentionEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "urls":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                urls = new Option<List<UrlEntity>?>(JsonSerializer.Deserialize<List<UrlEntity>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cashtags.IsSet && cashtags.Value == null)
                throw new ArgumentNullException(nameof(cashtags), "Property is not nullable for class TweetNoteTweetEntities.");

            if (hashtags.IsSet && hashtags.Value == null)
                throw new ArgumentNullException(nameof(hashtags), "Property is not nullable for class TweetNoteTweetEntities.");

            if (mentions.IsSet && mentions.Value == null)
                throw new ArgumentNullException(nameof(mentions), "Property is not nullable for class TweetNoteTweetEntities.");

            if (urls.IsSet && urls.Value == null)
                throw new ArgumentNullException(nameof(urls), "Property is not nullable for class TweetNoteTweetEntities.");

            return new TweetNoteTweetEntities(cashtags, hashtags, mentions, urls);
        }

        /// <summary>
        /// Serializes a <see cref="TweetNoteTweetEntities" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetNoteTweetEntities"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TweetNoteTweetEntities tweetNoteTweetEntities, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweetNoteTweetEntities, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TweetNoteTweetEntities" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweetNoteTweetEntities"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TweetNoteTweetEntities tweetNoteTweetEntities, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweetNoteTweetEntities.CashtagsOption.IsSet && tweetNoteTweetEntities.Cashtags == null)
                throw new ArgumentNullException(nameof(tweetNoteTweetEntities.Cashtags), "Property is required for class TweetNoteTweetEntities.");

            if (tweetNoteTweetEntities.HashtagsOption.IsSet && tweetNoteTweetEntities.Hashtags == null)
                throw new ArgumentNullException(nameof(tweetNoteTweetEntities.Hashtags), "Property is required for class TweetNoteTweetEntities.");

            if (tweetNoteTweetEntities.MentionsOption.IsSet && tweetNoteTweetEntities.Mentions == null)
                throw new ArgumentNullException(nameof(tweetNoteTweetEntities.Mentions), "Property is required for class TweetNoteTweetEntities.");

            if (tweetNoteTweetEntities.UrlsOption.IsSet && tweetNoteTweetEntities.Urls == null)
                throw new ArgumentNullException(nameof(tweetNoteTweetEntities.Urls), "Property is required for class TweetNoteTweetEntities.");

            if (tweetNoteTweetEntities.CashtagsOption.IsSet)
            {
                writer.WritePropertyName("cashtags");
                JsonSerializer.Serialize(writer, tweetNoteTweetEntities.Cashtags, jsonSerializerOptions);
            }
            if (tweetNoteTweetEntities.HashtagsOption.IsSet)
            {
                writer.WritePropertyName("hashtags");
                JsonSerializer.Serialize(writer, tweetNoteTweetEntities.Hashtags, jsonSerializerOptions);
            }
            if (tweetNoteTweetEntities.MentionsOption.IsSet)
            {
                writer.WritePropertyName("mentions");
                JsonSerializer.Serialize(writer, tweetNoteTweetEntities.Mentions, jsonSerializerOptions);
            }
            if (tweetNoteTweetEntities.UrlsOption.IsSet)
            {
                writer.WritePropertyName("urls");
                JsonSerializer.Serialize(writer, tweetNoteTweetEntities.Urls, jsonSerializerOptions);
            }
        }
    }
}
