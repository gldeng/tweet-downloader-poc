// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Tweet
    /// </summary>
    public partial class Tweet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tweet" /> class.
        /// </summary>
        /// <param name="attachments">attachments</param>
        /// <param name="authorId">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="communityId">The unique identifier of this Community.</param>
        /// <param name="contextAnnotations">contextAnnotations</param>
        /// <param name="conversationId">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="createdAt">Creation time of the Tweet.</param>
        /// <param name="editControls">editControls</param>
        /// <param name="editHistoryTweetIds">A list of Tweet Ids in this Tweet chain.</param>
        /// <param name="entities">entities</param>
        /// <param name="geo">geo</param>
        /// <param name="id">Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="inReplyToUserId">Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</param>
        /// <param name="lang">Language of the Tweet, if detected by X. Returned as a BCP47 language tag.</param>
        /// <param name="nonPublicMetrics">nonPublicMetrics</param>
        /// <param name="noteTweet">noteTweet</param>
        /// <param name="organicMetrics">organicMetrics</param>
        /// <param name="possiblySensitive">Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.</param>
        /// <param name="promotedMetrics">promotedMetrics</param>
        /// <param name="publicMetrics">publicMetrics</param>
        /// <param name="referencedTweets">A list of Posts this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.</param>
        /// <param name="replySettings">replySettings</param>
        /// <param name="scopes">scopes</param>
        /// <param name="source">This is deprecated.</param>
        /// <param name="text">The content of the Tweet.</param>
        /// <param name="username">The X handle (screen name) of this user.</param>
        /// <param name="withheld">withheld</param>
        [JsonConstructor]
        public Tweet(Option<TweetAttachments?> attachments = default, Option<string?> authorId = default, Option<string?> communityId = default, Option<List<ContextAnnotation>?> contextAnnotations = default, Option<string?> conversationId = default, Option<DateTime?> createdAt = default, Option<TweetEditControls?> editControls = default, Option<List<string>?> editHistoryTweetIds = default, Option<FullTextEntities?> entities = default, Option<TweetGeo?> geo = default, Option<string?> id = default, Option<string?> inReplyToUserId = default, Option<string?> lang = default, Option<TweetNonPublicMetrics?> nonPublicMetrics = default, Option<TweetNoteTweet?> noteTweet = default, Option<TweetOrganicMetrics?> organicMetrics = default, Option<bool?> possiblySensitive = default, Option<TweetPromotedMetrics?> promotedMetrics = default, Option<TweetPublicMetrics?> publicMetrics = default, Option<List<TweetReferencedTweetsInner>?> referencedTweets = default, Option<ReplySettingsWithVerifiedUsers?> replySettings = default, Option<TweetScopes?> scopes = default, Option<string?> source = default, Option<string?> text = default, Option<string?> username = default, Option<TweetWithheld?> withheld = default)
        {
            AttachmentsOption = attachments;
            AuthorIdOption = authorId;
            CommunityIdOption = communityId;
            ContextAnnotationsOption = contextAnnotations;
            ConversationIdOption = conversationId;
            CreatedAtOption = createdAt;
            EditControlsOption = editControls;
            EditHistoryTweetIdsOption = editHistoryTweetIds;
            EntitiesOption = entities;
            GeoOption = geo;
            IdOption = id;
            InReplyToUserIdOption = inReplyToUserId;
            LangOption = lang;
            NonPublicMetricsOption = nonPublicMetrics;
            NoteTweetOption = noteTweet;
            OrganicMetricsOption = organicMetrics;
            PossiblySensitiveOption = possiblySensitive;
            PromotedMetricsOption = promotedMetrics;
            PublicMetricsOption = publicMetrics;
            ReferencedTweetsOption = referencedTweets;
            ReplySettingsOption = replySettings;
            ScopesOption = scopes;
            SourceOption = source;
            TextOption = text;
            UsernameOption = username;
            WithheldOption = withheld;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ReplySettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReplySettingsWithVerifiedUsers?> ReplySettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReplySettings
        /// </summary>
        [JsonPropertyName("reply_settings")]
        public ReplySettingsWithVerifiedUsers? ReplySettings { get { return this.ReplySettingsOption; } set { this.ReplySettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attachments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetAttachments?> AttachmentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [JsonPropertyName("attachments")]
        public TweetAttachments? Attachments { get { return this.AttachmentsOption; } set { this.AttachmentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuthorIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("author_id")]
        public string? AuthorId { get { return this.AuthorIdOption; } set { this.AuthorIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommunityId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommunityIdOption { get; private set; }

        /// <summary>
        /// The unique identifier of this Community.
        /// </summary>
        /// <value>The unique identifier of this Community.</value>
        /* <example>1146654567674912769</example> */
        [JsonPropertyName("community_id")]
        public string? CommunityId { get { return this.CommunityIdOption; } set { this.CommunityIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContextAnnotations
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContextAnnotation>?> ContextAnnotationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContextAnnotations
        /// </summary>
        [JsonPropertyName("context_annotations")]
        public List<ContextAnnotation>? ContextAnnotations { get { return this.ContextAnnotationsOption; } set { this.ContextAnnotationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConversationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConversationIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("conversation_id")]
        public string? ConversationId { get { return this.ConversationIdOption; } set { this.ConversationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Creation time of the Tweet.
        /// </summary>
        /// <value>Creation time of the Tweet.</value>
        /* <example>2021-01-06T18:40:40Z</example> */
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of EditControls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetEditControls?> EditControlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EditControls
        /// </summary>
        [JsonPropertyName("edit_controls")]
        public TweetEditControls? EditControls { get { return this.EditControlsOption; } set { this.EditControlsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EditHistoryTweetIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> EditHistoryTweetIdsOption { get; private set; }

        /// <summary>
        /// A list of Tweet Ids in this Tweet chain.
        /// </summary>
        /// <value>A list of Tweet Ids in this Tweet chain.</value>
        [JsonPropertyName("edit_history_tweet_ids")]
        public List<string>? EditHistoryTweetIds { get { return this.EditHistoryTweetIdsOption; } set { this.EditHistoryTweetIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Entities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FullTextEntities?> EntitiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [JsonPropertyName("entities")]
        public FullTextEntities? Entities { get { return this.EntitiesOption; } set { this.EntitiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetGeo?> GeoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geo
        /// </summary>
        [JsonPropertyName("geo")]
        public TweetGeo? Geo { get { return this.GeoOption; } set { this.GeoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>1346889436626259968</example> */
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InReplyToUserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InReplyToUserIdOption { get; private set; }

        /// <summary>
        /// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
        /// </summary>
        /// <value>Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.</value>
        /* <example>2244994945</example> */
        [JsonPropertyName("in_reply_to_user_id")]
        public string? InReplyToUserId { get { return this.InReplyToUserIdOption; } set { this.InReplyToUserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Lang
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LangOption { get; private set; }

        /// <summary>
        /// Language of the Tweet, if detected by X. Returned as a BCP47 language tag.
        /// </summary>
        /// <value>Language of the Tweet, if detected by X. Returned as a BCP47 language tag.</value>
        /* <example>en</example> */
        [JsonPropertyName("lang")]
        public string? Lang { get { return this.LangOption; } set { this.LangOption = new(value); } }

        /// <summary>
        /// Used to track the state of NonPublicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetNonPublicMetrics?> NonPublicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NonPublicMetrics
        /// </summary>
        [JsonPropertyName("non_public_metrics")]
        public TweetNonPublicMetrics? NonPublicMetrics { get { return this.NonPublicMetricsOption; } set { this.NonPublicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NoteTweet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetNoteTweet?> NoteTweetOption { get; private set; }

        /// <summary>
        /// Gets or Sets NoteTweet
        /// </summary>
        [JsonPropertyName("note_tweet")]
        public TweetNoteTweet? NoteTweet { get { return this.NoteTweetOption; } set { this.NoteTweetOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetOrganicMetrics?> OrganicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganicMetrics
        /// </summary>
        [JsonPropertyName("organic_metrics")]
        public TweetOrganicMetrics? OrganicMetrics { get { return this.OrganicMetricsOption; } set { this.OrganicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PossiblySensitive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PossiblySensitiveOption { get; private set; }

        /// <summary>
        /// Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
        /// </summary>
        /// <value>Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.</value>
        /* <example>false</example> */
        [JsonPropertyName("possibly_sensitive")]
        public bool? PossiblySensitive { get { return this.PossiblySensitiveOption; } set { this.PossiblySensitiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of PromotedMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetPromotedMetrics?> PromotedMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PromotedMetrics
        /// </summary>
        [JsonPropertyName("promoted_metrics")]
        public TweetPromotedMetrics? PromotedMetrics { get { return this.PromotedMetricsOption; } set { this.PromotedMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicMetrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetPublicMetrics?> PublicMetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicMetrics
        /// </summary>
        [JsonPropertyName("public_metrics")]
        public TweetPublicMetrics? PublicMetrics { get { return this.PublicMetricsOption; } set { this.PublicMetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReferencedTweets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TweetReferencedTweetsInner>?> ReferencedTweetsOption { get; private set; }

        /// <summary>
        /// A list of Posts this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
        /// </summary>
        /// <value>A list of Posts this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.</value>
        [JsonPropertyName("referenced_tweets")]
        public List<TweetReferencedTweetsInner>? ReferencedTweets { get { return this.ReferencedTweetsOption; } set { this.ReferencedTweetsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scopes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetScopes?> ScopesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [JsonPropertyName("scopes")]
        public TweetScopes? Scopes { get { return this.ScopesOption; } set { this.ScopesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Source
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SourceOption { get; private set; }

        /// <summary>
        /// This is deprecated.
        /// </summary>
        /// <value>This is deprecated.</value>
        [JsonPropertyName("source")]
        public string? Source { get { return this.SourceOption; } set { this.SourceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// The content of the Tweet.
        /// </summary>
        /// <value>The content of the Tweet.</value>
        /* <example>Learn how to use the user Tweet timeline and user mention timeline endpoints in the X API v2 to explore Tweet\u2026 https:\/\/t.co\/56a0vZUx7i</example> */
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UsernameOption { get; private set; }

        /// <summary>
        /// The X handle (screen name) of this user.
        /// </summary>
        /// <value>The X handle (screen name) of this user.</value>
        [JsonPropertyName("username")]
        public string? Username { get { return this.UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Withheld
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TweetWithheld?> WithheldOption { get; private set; }

        /// <summary>
        /// Gets or Sets Withheld
        /// </summary>
        [JsonPropertyName("withheld")]
        public TweetWithheld? Withheld { get { return this.WithheldOption; } set { this.WithheldOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tweet {\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  CommunityId: ").Append(CommunityId).Append("\n");
            sb.Append("  ContextAnnotations: ").Append(ContextAnnotations).Append("\n");
            sb.Append("  ConversationId: ").Append(ConversationId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EditControls: ").Append(EditControls).Append("\n");
            sb.Append("  EditHistoryTweetIds: ").Append(EditHistoryTweetIds).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Geo: ").Append(Geo).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InReplyToUserId: ").Append(InReplyToUserId).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  NonPublicMetrics: ").Append(NonPublicMetrics).Append("\n");
            sb.Append("  NoteTweet: ").Append(NoteTweet).Append("\n");
            sb.Append("  OrganicMetrics: ").Append(OrganicMetrics).Append("\n");
            sb.Append("  PossiblySensitive: ").Append(PossiblySensitive).Append("\n");
            sb.Append("  PromotedMetrics: ").Append(PromotedMetrics).Append("\n");
            sb.Append("  PublicMetrics: ").Append(PublicMetrics).Append("\n");
            sb.Append("  ReferencedTweets: ").Append(ReferencedTweets).Append("\n");
            sb.Append("  ReplySettings: ").Append(ReplySettings).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Withheld: ").Append(Withheld).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AuthorIdOption.Value != null) {
                // AuthorId (string) pattern
                Regex regexAuthorId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.AuthorIdOption.Value != null &&!regexAuthorId.Match(this.AuthorIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthorId, must match a pattern of " + regexAuthorId, new [] { "AuthorId" });
                }
            }

            if (this.CommunityIdOption.Value != null) {
                // CommunityId (string) pattern
                Regex regexCommunityId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.CommunityIdOption.Value != null &&!regexCommunityId.Match(this.CommunityIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CommunityId, must match a pattern of " + regexCommunityId, new [] { "CommunityId" });
                }
            }

            if (this.ConversationIdOption.Value != null) {
                // ConversationId (string) pattern
                Regex regexConversationId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.ConversationIdOption.Value != null &&!regexConversationId.Match(this.ConversationIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConversationId, must match a pattern of " + regexConversationId, new [] { "ConversationId" });
                }
            }

            if (this.IdOption.Value != null) {
                // Id (string) pattern
                Regex regexId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.IdOption.Value != null &&!regexId.Match(this.IdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must match a pattern of " + regexId, new [] { "Id" });
                }
            }

            if (this.InReplyToUserIdOption.Value != null) {
                // InReplyToUserId (string) pattern
                Regex regexInReplyToUserId = new Regex(@"^[0-9]{1,19}$", RegexOptions.CultureInvariant);

                if (this.InReplyToUserIdOption.Value != null &&!regexInReplyToUserId.Match(this.InReplyToUserIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InReplyToUserId, must match a pattern of " + regexInReplyToUserId, new [] { "InReplyToUserId" });
                }
            }

            if (this.UsernameOption.Value != null) {
                // Username (string) pattern
                Regex regexUsername = new Regex(@"^[A-Za-z0-9_]{1,15}$", RegexOptions.CultureInvariant);

                if (this.UsernameOption.Value != null &&!regexUsername.Match(this.UsernameOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, must match a pattern of " + regexUsername, new [] { "Username" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Tweet" />
    /// </summary>
    public class TweetJsonConverter : JsonConverter<Tweet>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Tweet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Tweet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<TweetAttachments?> attachments = default;
            Option<string?> authorId = default;
            Option<string?> communityId = default;
            Option<List<ContextAnnotation>?> contextAnnotations = default;
            Option<string?> conversationId = default;
            Option<DateTime?> createdAt = default;
            Option<TweetEditControls?> editControls = default;
            Option<List<string>?> editHistoryTweetIds = default;
            Option<FullTextEntities?> entities = default;
            Option<TweetGeo?> geo = default;
            Option<string?> id = default;
            Option<string?> inReplyToUserId = default;
            Option<string?> lang = default;
            Option<TweetNonPublicMetrics?> nonPublicMetrics = default;
            Option<TweetNoteTweet?> noteTweet = default;
            Option<TweetOrganicMetrics?> organicMetrics = default;
            Option<bool?> possiblySensitive = default;
            Option<TweetPromotedMetrics?> promotedMetrics = default;
            Option<TweetPublicMetrics?> publicMetrics = default;
            Option<List<TweetReferencedTweetsInner>?> referencedTweets = default;
            Option<ReplySettingsWithVerifiedUsers?> replySettings = default;
            Option<TweetScopes?> scopes = default;
            Option<string?> source = default;
            Option<string?> text = default;
            Option<string?> username = default;
            Option<TweetWithheld?> withheld = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attachments":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attachments = new Option<TweetAttachments?>(JsonSerializer.Deserialize<TweetAttachments>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author_id":
                            authorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "community_id":
                            communityId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "context_annotations":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contextAnnotations = new Option<List<ContextAnnotation>?>(JsonSerializer.Deserialize<List<ContextAnnotation>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "conversation_id":
                            conversationId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "edit_controls":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                editControls = new Option<TweetEditControls?>(JsonSerializer.Deserialize<TweetEditControls>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "edit_history_tweet_ids":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                editHistoryTweetIds = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entities = new Option<FullTextEntities?>(JsonSerializer.Deserialize<FullTextEntities>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "geo":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                geo = new Option<TweetGeo?>(JsonSerializer.Deserialize<TweetGeo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "in_reply_to_user_id":
                            inReplyToUserId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lang":
                            lang = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "non_public_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nonPublicMetrics = new Option<TweetNonPublicMetrics?>(JsonSerializer.Deserialize<TweetNonPublicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "note_tweet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                noteTweet = new Option<TweetNoteTweet?>(JsonSerializer.Deserialize<TweetNoteTweet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organic_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                organicMetrics = new Option<TweetOrganicMetrics?>(JsonSerializer.Deserialize<TweetOrganicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "possibly_sensitive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                possiblySensitive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "promoted_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                promotedMetrics = new Option<TweetPromotedMetrics?>(JsonSerializer.Deserialize<TweetPromotedMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "public_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                publicMetrics = new Option<TweetPublicMetrics?>(JsonSerializer.Deserialize<TweetPublicMetrics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "referenced_tweets":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                referencedTweets = new Option<List<TweetReferencedTweetsInner>?>(JsonSerializer.Deserialize<List<TweetReferencedTweetsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reply_settings":
                            string? replySettingsRawValue = utf8JsonReader.GetString();
                            if (replySettingsRawValue != null)
                                replySettings = new Option<ReplySettingsWithVerifiedUsers?>(ReplySettingsWithVerifiedUsersValueConverter.FromStringOrDefault(replySettingsRawValue));
                            break;
                        case "scopes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scopes = new Option<TweetScopes?>(JsonSerializer.Deserialize<TweetScopes>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "source":
                            source = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "username":
                            username = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "withheld":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                withheld = new Option<TweetWithheld?>(JsonSerializer.Deserialize<TweetWithheld>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (attachments.IsSet && attachments.Value == null)
                throw new ArgumentNullException(nameof(attachments), "Property is not nullable for class Tweet.");

            if (authorId.IsSet && authorId.Value == null)
                throw new ArgumentNullException(nameof(authorId), "Property is not nullable for class Tweet.");

            if (communityId.IsSet && communityId.Value == null)
                throw new ArgumentNullException(nameof(communityId), "Property is not nullable for class Tweet.");

            if (contextAnnotations.IsSet && contextAnnotations.Value == null)
                throw new ArgumentNullException(nameof(contextAnnotations), "Property is not nullable for class Tweet.");

            if (conversationId.IsSet && conversationId.Value == null)
                throw new ArgumentNullException(nameof(conversationId), "Property is not nullable for class Tweet.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Tweet.");

            if (editControls.IsSet && editControls.Value == null)
                throw new ArgumentNullException(nameof(editControls), "Property is not nullable for class Tweet.");

            if (editHistoryTweetIds.IsSet && editHistoryTweetIds.Value == null)
                throw new ArgumentNullException(nameof(editHistoryTweetIds), "Property is not nullable for class Tweet.");

            if (entities.IsSet && entities.Value == null)
                throw new ArgumentNullException(nameof(entities), "Property is not nullable for class Tweet.");

            if (geo.IsSet && geo.Value == null)
                throw new ArgumentNullException(nameof(geo), "Property is not nullable for class Tweet.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Tweet.");

            if (inReplyToUserId.IsSet && inReplyToUserId.Value == null)
                throw new ArgumentNullException(nameof(inReplyToUserId), "Property is not nullable for class Tweet.");

            if (lang.IsSet && lang.Value == null)
                throw new ArgumentNullException(nameof(lang), "Property is not nullable for class Tweet.");

            if (nonPublicMetrics.IsSet && nonPublicMetrics.Value == null)
                throw new ArgumentNullException(nameof(nonPublicMetrics), "Property is not nullable for class Tweet.");

            if (noteTweet.IsSet && noteTweet.Value == null)
                throw new ArgumentNullException(nameof(noteTweet), "Property is not nullable for class Tweet.");

            if (organicMetrics.IsSet && organicMetrics.Value == null)
                throw new ArgumentNullException(nameof(organicMetrics), "Property is not nullable for class Tweet.");

            if (possiblySensitive.IsSet && possiblySensitive.Value == null)
                throw new ArgumentNullException(nameof(possiblySensitive), "Property is not nullable for class Tweet.");

            if (promotedMetrics.IsSet && promotedMetrics.Value == null)
                throw new ArgumentNullException(nameof(promotedMetrics), "Property is not nullable for class Tweet.");

            if (publicMetrics.IsSet && publicMetrics.Value == null)
                throw new ArgumentNullException(nameof(publicMetrics), "Property is not nullable for class Tweet.");

            if (referencedTweets.IsSet && referencedTweets.Value == null)
                throw new ArgumentNullException(nameof(referencedTweets), "Property is not nullable for class Tweet.");

            if (replySettings.IsSet && replySettings.Value == null)
                throw new ArgumentNullException(nameof(replySettings), "Property is not nullable for class Tweet.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class Tweet.");

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class Tweet.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class Tweet.");

            if (username.IsSet && username.Value == null)
                throw new ArgumentNullException(nameof(username), "Property is not nullable for class Tweet.");

            if (withheld.IsSet && withheld.Value == null)
                throw new ArgumentNullException(nameof(withheld), "Property is not nullable for class Tweet.");

            return new Tweet(attachments, authorId, communityId, contextAnnotations, conversationId, createdAt, editControls, editHistoryTweetIds, entities, geo, id, inReplyToUserId, lang, nonPublicMetrics, noteTweet, organicMetrics, possiblySensitive, promotedMetrics, publicMetrics, referencedTweets, replySettings, scopes, source, text, username, withheld);
        }

        /// <summary>
        /// Serializes a <see cref="Tweet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Tweet tweet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tweet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Tweet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tweet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Tweet tweet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tweet.AttachmentsOption.IsSet && tweet.Attachments == null)
                throw new ArgumentNullException(nameof(tweet.Attachments), "Property is required for class Tweet.");

            if (tweet.AuthorIdOption.IsSet && tweet.AuthorId == null)
                throw new ArgumentNullException(nameof(tweet.AuthorId), "Property is required for class Tweet.");

            if (tweet.CommunityIdOption.IsSet && tweet.CommunityId == null)
                throw new ArgumentNullException(nameof(tweet.CommunityId), "Property is required for class Tweet.");

            if (tweet.ContextAnnotationsOption.IsSet && tweet.ContextAnnotations == null)
                throw new ArgumentNullException(nameof(tweet.ContextAnnotations), "Property is required for class Tweet.");

            if (tweet.ConversationIdOption.IsSet && tweet.ConversationId == null)
                throw new ArgumentNullException(nameof(tweet.ConversationId), "Property is required for class Tweet.");

            if (tweet.EditControlsOption.IsSet && tweet.EditControls == null)
                throw new ArgumentNullException(nameof(tweet.EditControls), "Property is required for class Tweet.");

            if (tweet.EditHistoryTweetIdsOption.IsSet && tweet.EditHistoryTweetIds == null)
                throw new ArgumentNullException(nameof(tweet.EditHistoryTweetIds), "Property is required for class Tweet.");

            if (tweet.EntitiesOption.IsSet && tweet.Entities == null)
                throw new ArgumentNullException(nameof(tweet.Entities), "Property is required for class Tweet.");

            if (tweet.GeoOption.IsSet && tweet.Geo == null)
                throw new ArgumentNullException(nameof(tweet.Geo), "Property is required for class Tweet.");

            if (tweet.IdOption.IsSet && tweet.Id == null)
                throw new ArgumentNullException(nameof(tweet.Id), "Property is required for class Tweet.");

            if (tweet.InReplyToUserIdOption.IsSet && tweet.InReplyToUserId == null)
                throw new ArgumentNullException(nameof(tweet.InReplyToUserId), "Property is required for class Tweet.");

            if (tweet.LangOption.IsSet && tweet.Lang == null)
                throw new ArgumentNullException(nameof(tweet.Lang), "Property is required for class Tweet.");

            if (tweet.NonPublicMetricsOption.IsSet && tweet.NonPublicMetrics == null)
                throw new ArgumentNullException(nameof(tweet.NonPublicMetrics), "Property is required for class Tweet.");

            if (tweet.NoteTweetOption.IsSet && tweet.NoteTweet == null)
                throw new ArgumentNullException(nameof(tweet.NoteTweet), "Property is required for class Tweet.");

            if (tweet.OrganicMetricsOption.IsSet && tweet.OrganicMetrics == null)
                throw new ArgumentNullException(nameof(tweet.OrganicMetrics), "Property is required for class Tweet.");

            if (tweet.PromotedMetricsOption.IsSet && tweet.PromotedMetrics == null)
                throw new ArgumentNullException(nameof(tweet.PromotedMetrics), "Property is required for class Tweet.");

            if (tweet.PublicMetricsOption.IsSet && tweet.PublicMetrics == null)
                throw new ArgumentNullException(nameof(tweet.PublicMetrics), "Property is required for class Tweet.");

            if (tweet.ReferencedTweetsOption.IsSet && tweet.ReferencedTweets == null)
                throw new ArgumentNullException(nameof(tweet.ReferencedTweets), "Property is required for class Tweet.");

            if (tweet.ScopesOption.IsSet && tweet.Scopes == null)
                throw new ArgumentNullException(nameof(tweet.Scopes), "Property is required for class Tweet.");

            if (tweet.SourceOption.IsSet && tweet.Source == null)
                throw new ArgumentNullException(nameof(tweet.Source), "Property is required for class Tweet.");

            if (tweet.TextOption.IsSet && tweet.Text == null)
                throw new ArgumentNullException(nameof(tweet.Text), "Property is required for class Tweet.");

            if (tweet.UsernameOption.IsSet && tweet.Username == null)
                throw new ArgumentNullException(nameof(tweet.Username), "Property is required for class Tweet.");

            if (tweet.WithheldOption.IsSet && tweet.Withheld == null)
                throw new ArgumentNullException(nameof(tweet.Withheld), "Property is required for class Tweet.");

            if (tweet.AttachmentsOption.IsSet)
            {
                writer.WritePropertyName("attachments");
                JsonSerializer.Serialize(writer, tweet.Attachments, jsonSerializerOptions);
            }
            if (tweet.AuthorIdOption.IsSet)
                writer.WriteString("author_id", tweet.AuthorId);

            if (tweet.CommunityIdOption.IsSet)
                writer.WriteString("community_id", tweet.CommunityId);

            if (tweet.ContextAnnotationsOption.IsSet)
            {
                writer.WritePropertyName("context_annotations");
                JsonSerializer.Serialize(writer, tweet.ContextAnnotations, jsonSerializerOptions);
            }
            if (tweet.ConversationIdOption.IsSet)
                writer.WriteString("conversation_id", tweet.ConversationId);

            if (tweet.CreatedAtOption.IsSet)
                writer.WriteString("created_at", tweet.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (tweet.EditControlsOption.IsSet)
            {
                writer.WritePropertyName("edit_controls");
                JsonSerializer.Serialize(writer, tweet.EditControls, jsonSerializerOptions);
            }
            if (tweet.EditHistoryTweetIdsOption.IsSet)
            {
                writer.WritePropertyName("edit_history_tweet_ids");
                JsonSerializer.Serialize(writer, tweet.EditHistoryTweetIds, jsonSerializerOptions);
            }
            if (tweet.EntitiesOption.IsSet)
            {
                writer.WritePropertyName("entities");
                JsonSerializer.Serialize(writer, tweet.Entities, jsonSerializerOptions);
            }
            if (tweet.GeoOption.IsSet)
            {
                writer.WritePropertyName("geo");
                JsonSerializer.Serialize(writer, tweet.Geo, jsonSerializerOptions);
            }
            if (tweet.IdOption.IsSet)
                writer.WriteString("id", tweet.Id);

            if (tweet.InReplyToUserIdOption.IsSet)
                writer.WriteString("in_reply_to_user_id", tweet.InReplyToUserId);

            if (tweet.LangOption.IsSet)
                writer.WriteString("lang", tweet.Lang);

            if (tweet.NonPublicMetricsOption.IsSet)
            {
                writer.WritePropertyName("non_public_metrics");
                JsonSerializer.Serialize(writer, tweet.NonPublicMetrics, jsonSerializerOptions);
            }
            if (tweet.NoteTweetOption.IsSet)
            {
                writer.WritePropertyName("note_tweet");
                JsonSerializer.Serialize(writer, tweet.NoteTweet, jsonSerializerOptions);
            }
            if (tweet.OrganicMetricsOption.IsSet)
            {
                writer.WritePropertyName("organic_metrics");
                JsonSerializer.Serialize(writer, tweet.OrganicMetrics, jsonSerializerOptions);
            }
            if (tweet.PossiblySensitiveOption.IsSet)
                writer.WriteBoolean("possibly_sensitive", tweet.PossiblySensitiveOption.Value!.Value);

            if (tweet.PromotedMetricsOption.IsSet)
            {
                writer.WritePropertyName("promoted_metrics");
                JsonSerializer.Serialize(writer, tweet.PromotedMetrics, jsonSerializerOptions);
            }
            if (tweet.PublicMetricsOption.IsSet)
            {
                writer.WritePropertyName("public_metrics");
                JsonSerializer.Serialize(writer, tweet.PublicMetrics, jsonSerializerOptions);
            }
            if (tweet.ReferencedTweetsOption.IsSet)
            {
                writer.WritePropertyName("referenced_tweets");
                JsonSerializer.Serialize(writer, tweet.ReferencedTweets, jsonSerializerOptions);
            }
            if (tweet.ReplySettingsOption.IsSet)
            {
                var replySettingsRawValue = ReplySettingsWithVerifiedUsersValueConverter.ToJsonValue(tweet.ReplySettings!.Value);
                writer.WriteString("reply_settings", replySettingsRawValue);
            }
            if (tweet.ScopesOption.IsSet)
            {
                writer.WritePropertyName("scopes");
                JsonSerializer.Serialize(writer, tweet.Scopes, jsonSerializerOptions);
            }
            if (tweet.SourceOption.IsSet)
                writer.WriteString("source", tweet.Source);

            if (tweet.TextOption.IsSet)
                writer.WriteString("text", tweet.Text);

            if (tweet.UsernameOption.IsSet)
                writer.WriteString("username", tweet.Username);

            if (tweet.WithheldOption.IsSet)
            {
                writer.WritePropertyName("withheld");
                JsonSerializer.Serialize(writer, tweet.Withheld, jsonSerializerOptions);
            }
        }
    }
}
