// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILikesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LikesApiEvents Events { get; }

        /// <summary>
        /// Likes Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of public Likes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesFirehoseStreamApiResponse"/>&gt;</returns>
        Task<ILikesFirehoseStreamApiResponse> LikesFirehoseStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Likes Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of public Likes.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesFirehoseStreamApiResponse"/>?&gt;</returns>
        Task<ILikesFirehoseStreamApiResponse?> LikesFirehoseStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Likes Sample 10 stream
        /// </summary>
        /// <remarks>
        /// Streams 10% of public Likes.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesSample10StreamApiResponse"/>&gt;</returns>
        Task<ILikesSample10StreamApiResponse> LikesSample10StreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Likes Sample 10 stream
        /// </summary>
        /// <remarks>
        /// Streams 10% of public Likes.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesSample10StreamApiResponse"/>?&gt;</returns>
        Task<ILikesSample10StreamApiResponse?> LikesSample10StreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ILikesFirehoseStreamApiResponse"/>
    /// </summary>
    public interface ILikesFirehoseStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingLikeResponseV2?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ILikesSample10StreamApiResponse"/>
    /// </summary>
    public interface ILikesSample10StreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingLikeResponseV2?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class LikesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLikesFirehoseStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLikesFirehoseStream;

        internal void ExecuteOnLikesFirehoseStream(LikesApi.LikesFirehoseStreamApiResponse apiResponse)
        {
            OnLikesFirehoseStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLikesFirehoseStream(Exception exception)
        {
            OnErrorLikesFirehoseStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLikesSample10Stream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLikesSample10Stream;

        internal void ExecuteOnLikesSample10Stream(LikesApi.LikesSample10StreamApiResponse apiResponse)
        {
            OnLikesSample10Stream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLikesSample10Stream(Exception exception)
        {
            OnErrorLikesSample10Stream?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LikesApi : ILikesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LikesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LikesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LikesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LikesApi(ILogger<LikesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LikesApiEvents likesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<LikesApi>();
            HttpClient = httpClient;
            Events = likesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatLikesFirehoseStream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateLikesFirehoseStream(Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (likeWithTweetAuthorFields.IsSet && likeWithTweetAuthorFields.Value == null)
                throw new ArgumentNullException(nameof(likeWithTweetAuthorFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterLikesFirehoseStreamDefaultImplementation(ILikesFirehoseStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterLikesFirehoseStream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterLikesFirehoseStream(ref bool suppressDefaultLog, ILikesFirehoseStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorLikesFirehoseStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLikesFirehoseStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorLikesFirehoseStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Likes Firehose stream Streams 100% of public Likes.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesFirehoseStreamApiResponse"/>&gt;</returns>
        public async Task<ILikesFirehoseStreamApiResponse?> LikesFirehoseStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LikesFirehoseStreamAsync(partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Likes Firehose stream Streams 100% of public Likes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesFirehoseStreamApiResponse"/>&gt;</returns>
        public async Task<ILikesFirehoseStreamApiResponse> LikesFirehoseStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLikesFirehoseStream(likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                FormatLikesFirehoseStream(ref partition, ref backfillMinutes, ref startTime, ref endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/likes/firehose/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (likeWithTweetAuthorFields.IsSet)
                        parseQueryStringLocalVar["like_with_tweet_author.fields"] = ClientUtils.ParameterToString(likeWithTweetAuthorFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LikesFirehoseStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LikesFirehoseStreamApiResponse>();

                        LikesFirehoseStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/likes/firehose/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLikesFirehoseStreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                        Events.ExecuteOnLikesFirehoseStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLikesFirehoseStreamDefaultImplementation(e, "/2/likes/firehose/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
                Events.ExecuteOnErrorLikesFirehoseStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LikesFirehoseStreamApiResponse"/>
        /// </summary>
        public partial class LikesFirehoseStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, ILikesFirehoseStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LikesFirehoseStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LikesFirehoseStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LikesFirehoseStreamApiResponse(ILogger<LikesFirehoseStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingLikeResponseV2? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingLikeResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingLikeResponseV2? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLikesSample10Stream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateLikesSample10Stream(Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (likeWithTweetAuthorFields.IsSet && likeWithTweetAuthorFields.Value == null)
                throw new ArgumentNullException(nameof(likeWithTweetAuthorFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterLikesSample10StreamDefaultImplementation(ILikesSample10StreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterLikesSample10Stream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterLikesSample10Stream(ref bool suppressDefaultLog, ILikesSample10StreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorLikesSample10StreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLikesSample10Stream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="likeWithTweetAuthorFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorLikesSample10Stream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> likeWithTweetAuthorFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Likes Sample 10 stream Streams 10% of public Likes.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesSample10StreamApiResponse"/>&gt;</returns>
        public async Task<ILikesSample10StreamApiResponse?> LikesSample10StreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LikesSample10StreamAsync(partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Likes Sample 10 stream Streams 10% of public Likes.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Likes will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="likeWithTweetAuthorFields">A comma separated list of LikeWithTweetAuthor fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILikesSample10StreamApiResponse"/>&gt;</returns>
        public async Task<ILikesSample10StreamApiResponse> LikesSample10StreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> likeWithTweetAuthorFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLikesSample10Stream(likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                FormatLikesSample10Stream(ref partition, ref backfillMinutes, ref startTime, ref endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/likes/sample10/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (likeWithTweetAuthorFields.IsSet)
                        parseQueryStringLocalVar["like_with_tweet_author.fields"] = ClientUtils.ParameterToString(likeWithTweetAuthorFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LikesSample10StreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LikesSample10StreamApiResponse>();

                        LikesSample10StreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/likes/sample10/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLikesSample10StreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);

                        Events.ExecuteOnLikesSample10Stream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLikesSample10StreamDefaultImplementation(e, "/2/likes/sample10/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, likeWithTweetAuthorFields, expansions, userFields, tweetFields);
                Events.ExecuteOnErrorLikesSample10Stream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LikesSample10StreamApiResponse"/>
        /// </summary>
        public partial class LikesSample10StreamApiResponse : Org.OpenAPITools.Client.ApiResponse, ILikesSample10StreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LikesSample10StreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LikesSample10StreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LikesSample10StreamApiResponse(ILogger<LikesSample10StreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingLikeResponseV2? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingLikeResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingLikeResponseV2? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
