// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICommunitiesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CommunitiesApiEvents Events { get; }

        /// <summary>
        /// Search Communities
        /// </summary>
        /// <remarks>
        /// Returns Communities that match search query
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search communities.</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunitiesSearchApiResponse"/>&gt;</returns>
        Task<ICommunitiesSearchApiResponse> CommunitiesSearchAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search Communities
        /// </summary>
        /// <remarks>
        /// Returns Communities that match search query
        /// </remarks>
        /// <param name="query">Query to search communities.</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunitiesSearchApiResponse"/>?&gt;</returns>
        Task<ICommunitiesSearchApiResponse?> CommunitiesSearchOrDefaultAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Communities lookup by Community ID.
        /// </summary>
        /// <remarks>
        /// Returns a Community.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Community.</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunityIdGetApiResponse"/>&gt;</returns>
        Task<ICommunityIdGetApiResponse> CommunityIdGetAsync(string id, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Communities lookup by Community ID.
        /// </summary>
        /// <remarks>
        /// Returns a Community.
        /// </remarks>
        /// <param name="id">The ID of the Community.</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunityIdGetApiResponse"/>?&gt;</returns>
        Task<ICommunityIdGetApiResponse?> CommunityIdGetOrDefaultAsync(string id, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICommunitiesSearchApiResponse"/>
    /// </summary>
    public interface ICommunitiesSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2CommunitiesSearchResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICommunityIdGetApiResponse"/>
    /// </summary>
    public interface ICommunityIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2CommunitiesIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CommunitiesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCommunitiesSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCommunitiesSearch;

        internal void ExecuteOnCommunitiesSearch(CommunitiesApi.CommunitiesSearchApiResponse apiResponse)
        {
            OnCommunitiesSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCommunitiesSearch(Exception exception)
        {
            OnErrorCommunitiesSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCommunityIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCommunityIdGet;

        internal void ExecuteOnCommunityIdGet(CommunitiesApi.CommunityIdGetApiResponse apiResponse)
        {
            OnCommunityIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCommunityIdGet(Exception exception)
        {
            OnErrorCommunityIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CommunitiesApi : ICommunitiesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CommunitiesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CommunitiesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommunitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommunitiesApi(ILogger<CommunitiesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CommunitiesApiEvents communitiesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CommunitiesApi>();
            HttpClient = httpClient;
            Events = communitiesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCommunitiesSearch(ref string query, ref Option<int> maxResults, ref Option<string> nextToken, ref Option<string> paginationToken, Option<List<string>> communityFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="communityFields"></param>
        /// <returns></returns>
        private void ValidateCommunitiesSearch(string query, Option<string> nextToken, Option<string> paginationToken, Option<List<string>> communityFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (communityFields.IsSet && communityFields.Value == null)
                throw new ArgumentNullException(nameof(communityFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="communityFields"></param>
        private void AfterCommunitiesSearchDefaultImplementation(ICommunitiesSearchApiResponse apiResponseLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<List<string>> communityFields)
        {
            bool suppressDefaultLog = false;
            AfterCommunitiesSearch(ref suppressDefaultLog, apiResponseLocalVar, query, maxResults, nextToken, paginationToken, communityFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="communityFields"></param>
        partial void AfterCommunitiesSearch(ref bool suppressDefaultLog, ICommunitiesSearchApiResponse apiResponseLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<List<string>> communityFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="communityFields"></param>
        private void OnErrorCommunitiesSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<List<string>> communityFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCommunitiesSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, maxResults, nextToken, paginationToken, communityFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="communityFields"></param>
        partial void OnErrorCommunitiesSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<List<string>> communityFields);

        /// <summary>
        /// Search Communities Returns Communities that match search query
        /// </summary>
        /// <param name="query">Query to search communities.</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunitiesSearchApiResponse"/>&gt;</returns>
        public async Task<ICommunitiesSearchApiResponse?> CommunitiesSearchOrDefaultAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CommunitiesSearchAsync(query, maxResults, nextToken, paginationToken, communityFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Search Communities Returns Communities that match search query
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Query to search communities.</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunitiesSearchApiResponse"/>&gt;</returns>
        public async Task<ICommunitiesSearchApiResponse> CommunitiesSearchAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCommunitiesSearch(query, nextToken, paginationToken, communityFields);

                FormatCommunitiesSearch(ref query, ref maxResults, ref nextToken, ref paginationToken, communityFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/communities/search";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (communityFields.IsSet)
                        parseQueryStringLocalVar["community.fields"] = ClientUtils.ParameterToString(communityFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CommunitiesSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CommunitiesSearchApiResponse>();

                        CommunitiesSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/communities/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCommunitiesSearchDefaultImplementation(apiResponseLocalVar, query, maxResults, nextToken, paginationToken, communityFields);

                        Events.ExecuteOnCommunitiesSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCommunitiesSearchDefaultImplementation(e, "/2/communities/search", uriBuilderLocalVar.Path, query, maxResults, nextToken, paginationToken, communityFields);
                Events.ExecuteOnErrorCommunitiesSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CommunitiesSearchApiResponse"/>
        /// </summary>
        public partial class CommunitiesSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ICommunitiesSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CommunitiesSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CommunitiesSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CommunitiesSearchApiResponse(ILogger<CommunitiesSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2CommunitiesSearchResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2CommunitiesSearchResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2CommunitiesSearchResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCommunityIdGet(ref string id, Option<List<string>> communityFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="communityFields"></param>
        /// <returns></returns>
        private void ValidateCommunityIdGet(string id, Option<List<string>> communityFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (communityFields.IsSet && communityFields.Value == null)
                throw new ArgumentNullException(nameof(communityFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="communityFields"></param>
        private void AfterCommunityIdGetDefaultImplementation(ICommunityIdGetApiResponse apiResponseLocalVar, string id, Option<List<string>> communityFields)
        {
            bool suppressDefaultLog = false;
            AfterCommunityIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, communityFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="communityFields"></param>
        partial void AfterCommunityIdGet(ref bool suppressDefaultLog, ICommunityIdGetApiResponse apiResponseLocalVar, string id, Option<List<string>> communityFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="communityFields"></param>
        private void OnErrorCommunityIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> communityFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCommunityIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, communityFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="communityFields"></param>
        partial void OnErrorCommunityIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> communityFields);

        /// <summary>
        /// Communities lookup by Community ID. Returns a Community.
        /// </summary>
        /// <param name="id">The ID of the Community.</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunityIdGetApiResponse"/>&gt;</returns>
        public async Task<ICommunityIdGetApiResponse?> CommunityIdGetOrDefaultAsync(string id, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CommunityIdGetAsync(id, communityFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Communities lookup by Community ID. Returns a Community.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Community.</param>
        /// <param name="communityFields">A comma separated list of Community fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICommunityIdGetApiResponse"/>&gt;</returns>
        public async Task<ICommunityIdGetApiResponse> CommunityIdGetAsync(string id, Option<List<string>> communityFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCommunityIdGet(id, communityFields);

                FormatCommunityIdGet(ref id, communityFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/communities/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (communityFields.IsSet)
                        parseQueryStringLocalVar["community.fields"] = ClientUtils.ParameterToString(communityFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CommunityIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CommunityIdGetApiResponse>();

                        CommunityIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/communities/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCommunityIdGetDefaultImplementation(apiResponseLocalVar, id, communityFields);

                        Events.ExecuteOnCommunityIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCommunityIdGetDefaultImplementation(e, "/2/communities/{id}", uriBuilderLocalVar.Path, id, communityFields);
                Events.ExecuteOnErrorCommunityIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CommunityIdGetApiResponse"/>
        /// </summary>
        public partial class CommunityIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ICommunityIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CommunityIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CommunityIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CommunityIdGetApiResponse(ILogger<CommunityIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2CommunitiesIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2CommunitiesIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2CommunitiesIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
