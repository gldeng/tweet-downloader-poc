// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITrendsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TrendsApiEvents Events { get; }

        /// <summary>
        /// Trends
        /// </summary>
        /// <remarks>
        /// Returns the Trend associated with the supplied WoeId.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="woeid">The WOEID of the place to lookup a trend for.</param>
        /// <param name="maxTrends">The maximum number of results. (optional, default to 20)</param>
        /// <param name="trendFields">A comma separated list of Trend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTrendsApiResponse"/>&gt;</returns>
        Task<IGetTrendsApiResponse> GetTrendsAsync(int woeid, Option<int> maxTrends = default, Option<List<string>> trendFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Trends
        /// </summary>
        /// <remarks>
        /// Returns the Trend associated with the supplied WoeId.
        /// </remarks>
        /// <param name="woeid">The WOEID of the place to lookup a trend for.</param>
        /// <param name="maxTrends">The maximum number of results. (optional, default to 20)</param>
        /// <param name="trendFields">A comma separated list of Trend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTrendsApiResponse"/>?&gt;</returns>
        Task<IGetTrendsApiResponse?> GetTrendsOrDefaultAsync(int woeid, Option<int> maxTrends = default, Option<List<string>> trendFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get personalized Trends
        /// </summary>
        /// <remarks>
        /// Returns Personalized trends for the authenticated user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalizedTrendFields">A comma separated list of PersonalizedTrend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPersonalizedTrendsApiResponse"/>&gt;</returns>
        Task<IPersonalizedTrendsApiResponse> PersonalizedTrendsAsync(Option<List<string>> personalizedTrendFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get personalized Trends
        /// </summary>
        /// <remarks>
        /// Returns Personalized trends for the authenticated user
        /// </remarks>
        /// <param name="personalizedTrendFields">A comma separated list of PersonalizedTrend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPersonalizedTrendsApiResponse"/>?&gt;</returns>
        Task<IPersonalizedTrendsApiResponse?> PersonalizedTrendsOrDefaultAsync(Option<List<string>> personalizedTrendFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetTrendsApiResponse"/>
    /// </summary>
    public interface IGetTrendsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TrendsByWoeidWoeidResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IPersonalizedTrendsApiResponse"/>
    /// </summary>
    public interface IPersonalizedTrendsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersPersonalizedTrendsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TrendsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTrends;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTrends;

        internal void ExecuteOnGetTrends(TrendsApi.GetTrendsApiResponse apiResponse)
        {
            OnGetTrends?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTrends(Exception exception)
        {
            OnErrorGetTrends?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPersonalizedTrends;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPersonalizedTrends;

        internal void ExecuteOnPersonalizedTrends(TrendsApi.PersonalizedTrendsApiResponse apiResponse)
        {
            OnPersonalizedTrends?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPersonalizedTrends(Exception exception)
        {
            OnErrorPersonalizedTrends?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TrendsApi : ITrendsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TrendsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TrendsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrendsApi(ILogger<TrendsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TrendsApiEvents trendsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TrendsApi>();
            HttpClient = httpClient;
            Events = trendsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetTrends(ref int woeid, ref Option<int> maxTrends, Option<List<string>> trendFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="trendFields"></param>
        /// <returns></returns>
        private void ValidateGetTrends(Option<List<string>> trendFields)
        {
            if (trendFields.IsSet && trendFields.Value == null)
                throw new ArgumentNullException(nameof(trendFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="woeid"></param>
        /// <param name="maxTrends"></param>
        /// <param name="trendFields"></param>
        private void AfterGetTrendsDefaultImplementation(IGetTrendsApiResponse apiResponseLocalVar, int woeid, Option<int> maxTrends, Option<List<string>> trendFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTrends(ref suppressDefaultLog, apiResponseLocalVar, woeid, maxTrends, trendFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="woeid"></param>
        /// <param name="maxTrends"></param>
        /// <param name="trendFields"></param>
        partial void AfterGetTrends(ref bool suppressDefaultLog, IGetTrendsApiResponse apiResponseLocalVar, int woeid, Option<int> maxTrends, Option<List<string>> trendFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="woeid"></param>
        /// <param name="maxTrends"></param>
        /// <param name="trendFields"></param>
        private void OnErrorGetTrendsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int woeid, Option<int> maxTrends, Option<List<string>> trendFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTrends(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, woeid, maxTrends, trendFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="woeid"></param>
        /// <param name="maxTrends"></param>
        /// <param name="trendFields"></param>
        partial void OnErrorGetTrends(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int woeid, Option<int> maxTrends, Option<List<string>> trendFields);

        /// <summary>
        /// Trends Returns the Trend associated with the supplied WoeId.
        /// </summary>
        /// <param name="woeid">The WOEID of the place to lookup a trend for.</param>
        /// <param name="maxTrends">The maximum number of results. (optional, default to 20)</param>
        /// <param name="trendFields">A comma separated list of Trend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTrendsApiResponse"/>&gt;</returns>
        public async Task<IGetTrendsApiResponse?> GetTrendsOrDefaultAsync(int woeid, Option<int> maxTrends = default, Option<List<string>> trendFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTrendsAsync(woeid, maxTrends, trendFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Trends Returns the Trend associated with the supplied WoeId.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="woeid">The WOEID of the place to lookup a trend for.</param>
        /// <param name="maxTrends">The maximum number of results. (optional, default to 20)</param>
        /// <param name="trendFields">A comma separated list of Trend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTrendsApiResponse"/>&gt;</returns>
        public async Task<IGetTrendsApiResponse> GetTrendsAsync(int woeid, Option<int> maxTrends = default, Option<List<string>> trendFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTrends(trendFields);

                FormatGetTrends(ref woeid, ref maxTrends, trendFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/trends/by/woeid/{woeid}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bwoeid%7D", Uri.EscapeDataString(woeid.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxTrends.IsSet)
                        parseQueryStringLocalVar["max_trends"] = ClientUtils.ParameterToString(maxTrends.Value);

                    if (trendFields.IsSet)
                        parseQueryStringLocalVar["trend.fields"] = ClientUtils.ParameterToString(trendFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTrendsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTrendsApiResponse>();

                        GetTrendsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/trends/by/woeid/{woeid}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTrendsDefaultImplementation(apiResponseLocalVar, woeid, maxTrends, trendFields);

                        Events.ExecuteOnGetTrends(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTrendsDefaultImplementation(e, "/2/trends/by/woeid/{woeid}", uriBuilderLocalVar.Path, woeid, maxTrends, trendFields);
                Events.ExecuteOnErrorGetTrends(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTrendsApiResponse"/>
        /// </summary>
        public partial class GetTrendsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTrendsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTrendsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTrendsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTrendsApiResponse(ILogger<GetTrendsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TrendsByWoeidWoeidResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TrendsByWoeidWoeidResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TrendsByWoeidWoeidResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPersonalizedTrends(Option<List<string>> personalizedTrendFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="personalizedTrendFields"></param>
        /// <returns></returns>
        private void ValidatePersonalizedTrends(Option<List<string>> personalizedTrendFields)
        {
            if (personalizedTrendFields.IsSet && personalizedTrendFields.Value == null)
                throw new ArgumentNullException(nameof(personalizedTrendFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="personalizedTrendFields"></param>
        private void AfterPersonalizedTrendsDefaultImplementation(IPersonalizedTrendsApiResponse apiResponseLocalVar, Option<List<string>> personalizedTrendFields)
        {
            bool suppressDefaultLog = false;
            AfterPersonalizedTrends(ref suppressDefaultLog, apiResponseLocalVar, personalizedTrendFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="personalizedTrendFields"></param>
        partial void AfterPersonalizedTrends(ref bool suppressDefaultLog, IPersonalizedTrendsApiResponse apiResponseLocalVar, Option<List<string>> personalizedTrendFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="personalizedTrendFields"></param>
        private void OnErrorPersonalizedTrendsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> personalizedTrendFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPersonalizedTrends(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, personalizedTrendFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="personalizedTrendFields"></param>
        partial void OnErrorPersonalizedTrends(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> personalizedTrendFields);

        /// <summary>
        /// Get personalized Trends Returns Personalized trends for the authenticated user
        /// </summary>
        /// <param name="personalizedTrendFields">A comma separated list of PersonalizedTrend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPersonalizedTrendsApiResponse"/>&gt;</returns>
        public async Task<IPersonalizedTrendsApiResponse?> PersonalizedTrendsOrDefaultAsync(Option<List<string>> personalizedTrendFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PersonalizedTrendsAsync(personalizedTrendFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get personalized Trends Returns Personalized trends for the authenticated user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalizedTrendFields">A comma separated list of PersonalizedTrend fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPersonalizedTrendsApiResponse"/>&gt;</returns>
        public async Task<IPersonalizedTrendsApiResponse> PersonalizedTrendsAsync(Option<List<string>> personalizedTrendFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePersonalizedTrends(personalizedTrendFields);

                FormatPersonalizedTrends(personalizedTrendFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/personalized_trends";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (personalizedTrendFields.IsSet)
                        parseQueryStringLocalVar["personalized_trend.fields"] = ClientUtils.ParameterToString(personalizedTrendFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PersonalizedTrendsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PersonalizedTrendsApiResponse>();

                        PersonalizedTrendsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/personalized_trends", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPersonalizedTrendsDefaultImplementation(apiResponseLocalVar, personalizedTrendFields);

                        Events.ExecuteOnPersonalizedTrends(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPersonalizedTrendsDefaultImplementation(e, "/2/users/personalized_trends", uriBuilderLocalVar.Path, personalizedTrendFields);
                Events.ExecuteOnErrorPersonalizedTrends(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PersonalizedTrendsApiResponse"/>
        /// </summary>
        public partial class PersonalizedTrendsApiResponse : Org.OpenAPITools.Client.ApiResponse, IPersonalizedTrendsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PersonalizedTrendsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PersonalizedTrendsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PersonalizedTrendsApiResponse(ILogger<PersonalizedTrendsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersPersonalizedTrendsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersPersonalizedTrendsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersPersonalizedTrendsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
