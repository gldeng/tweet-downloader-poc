// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ISpacesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        SpacesApiEvents Events { get; }

        /// <summary>
        /// Space lookup by Space ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Space specified by the requested ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpaceByIdApiResponse"/>&gt;</returns>
        Task<IFindSpaceByIdApiResponse> FindSpaceByIdAsync(string id, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Space lookup by Space ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Space specified by the requested ID
        /// </remarks>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpaceByIdApiResponse"/>?&gt;</returns>
        Task<IFindSpaceByIdApiResponse?> FindSpaceByIdOrDefaultAsync(string id, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Space lookup by their creators
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Spaces created by the provided User IDs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIds">The IDs of Users to search through.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByCreatorIdsApiResponse"/>&gt;</returns>
        Task<IFindSpacesByCreatorIdsApiResponse> FindSpacesByCreatorIdsAsync(List<string> userIds, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Space lookup by their creators
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Spaces created by the provided User IDs
        /// </remarks>
        /// <param name="userIds">The IDs of Users to search through.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByCreatorIdsApiResponse"/>?&gt;</returns>
        Task<IFindSpacesByCreatorIdsApiResponse?> FindSpacesByCreatorIdsOrDefaultAsync(List<string> userIds, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Space lookup up Space IDs
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Spaces specified by the requested IDs
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of Space IDs to return.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByIdsApiResponse"/>&gt;</returns>
        Task<IFindSpacesByIdsApiResponse> FindSpacesByIdsAsync(List<string> ids, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Space lookup up Space IDs
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Spaces specified by the requested IDs
        /// </remarks>
        /// <param name="ids">The list of Space IDs to return.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByIdsApiResponse"/>?&gt;</returns>
        Task<IFindSpacesByIdsApiResponse?> FindSpacesByIdsOrDefaultAsync(List<string> ids, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search for Spaces
        /// </summary>
        /// <remarks>
        /// Returns Spaces that match the provided query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="state">The state of Spaces to search for. (optional, default to all)</param>
        /// <param name="maxResults">The number of results to return. (optional, default to 100)</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchSpacesApiResponse"/>&gt;</returns>
        Task<ISearchSpacesApiResponse> SearchSpacesAsync(string query, Option<string> state = default, Option<int> maxResults = default, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search for Spaces
        /// </summary>
        /// <remarks>
        /// Returns Spaces that match the provided query.
        /// </remarks>
        /// <param name="query">The search query.</param>
        /// <param name="state">The state of Spaces to search for. (optional, default to all)</param>
        /// <param name="maxResults">The number of results to return. (optional, default to 100)</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchSpacesApiResponse"/>?&gt;</returns>
        Task<ISearchSpacesApiResponse?> SearchSpacesOrDefaultAsync(string query, Option<string> state = default, Option<int> maxResults = default, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <remarks>
        /// Retrieves the list of Users who purchased a ticket to the given space
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        Task<ISpaceBuyersApiResponse> SpaceBuyersAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <remarks>
        /// Retrieves the list of Users who purchased a ticket to the given space
        /// </remarks>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>?&gt;</returns>
        Task<ISpaceBuyersApiResponse?> SpaceBuyersOrDefaultAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts from a Space.
        /// </summary>
        /// <remarks>
        /// Retrieves Posts shared in the specified Space.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        Task<ISpaceTweetsApiResponse> SpaceTweetsAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts from a Space.
        /// </summary>
        /// <remarks>
        /// Retrieves Posts shared in the specified Space.
        /// </remarks>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>?&gt;</returns>
        Task<ISpaceTweetsApiResponse?> SpaceTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFindSpaceByIdApiResponse"/>
    /// </summary>
    public interface IFindSpaceByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindSpacesByCreatorIdsApiResponse"/>
    /// </summary>
    public interface IFindSpacesByCreatorIdsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesByCreatorIdsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindSpacesByIdsApiResponse"/>
    /// </summary>
    public interface IFindSpacesByIdsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISearchSpacesApiResponse"/>
    /// </summary>
    public interface ISearchSpacesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesSearchResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISpaceBuyersApiResponse"/>
    /// </summary>
    public interface ISpaceBuyersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesIdBuyersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISpaceTweetsApiResponse"/>
    /// </summary>
    public interface ISpaceTweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2SpacesIdTweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class SpacesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindSpaceById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindSpaceById;

        internal void ExecuteOnFindSpaceById(SpacesApi.FindSpaceByIdApiResponse apiResponse)
        {
            OnFindSpaceById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindSpaceById(Exception exception)
        {
            OnErrorFindSpaceById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindSpacesByCreatorIds;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindSpacesByCreatorIds;

        internal void ExecuteOnFindSpacesByCreatorIds(SpacesApi.FindSpacesByCreatorIdsApiResponse apiResponse)
        {
            OnFindSpacesByCreatorIds?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindSpacesByCreatorIds(Exception exception)
        {
            OnErrorFindSpacesByCreatorIds?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindSpacesByIds;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindSpacesByIds;

        internal void ExecuteOnFindSpacesByIds(SpacesApi.FindSpacesByIdsApiResponse apiResponse)
        {
            OnFindSpacesByIds?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindSpacesByIds(Exception exception)
        {
            OnErrorFindSpacesByIds?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchSpaces;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchSpaces;

        internal void ExecuteOnSearchSpaces(SpacesApi.SearchSpacesApiResponse apiResponse)
        {
            OnSearchSpaces?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchSpaces(Exception exception)
        {
            OnErrorSearchSpaces?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSpaceBuyers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSpaceBuyers;

        internal void ExecuteOnSpaceBuyers(SpacesApi.SpaceBuyersApiResponse apiResponse)
        {
            OnSpaceBuyers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSpaceBuyers(Exception exception)
        {
            OnErrorSpaceBuyers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSpaceTweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSpaceTweets;

        internal void ExecuteOnSpaceTweets(SpacesApi.SpaceTweetsApiResponse apiResponse)
        {
            OnSpaceTweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSpaceTweets(Exception exception)
        {
            OnErrorSpaceTweets?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class SpacesApi : ISpacesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<SpacesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public SpacesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpacesApi(ILogger<SpacesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, SpacesApiEvents spacesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<SpacesApi>();
            HttpClient = httpClient;
            Events = spacesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatFindSpaceById(ref string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        /// <returns></returns>
        private void ValidateFindSpaceById(string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (spaceFields.IsSet && spaceFields.Value == null)
                throw new ArgumentNullException(nameof(spaceFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (topicFields.IsSet && topicFields.Value == null)
                throw new ArgumentNullException(nameof(topicFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void AfterFindSpaceByIdDefaultImplementation(IFindSpaceByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLog = false;
            AfterFindSpaceById(ref suppressDefaultLog, apiResponseLocalVar, id, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void AfterFindSpaceById(ref bool suppressDefaultLog, IFindSpaceByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void OnErrorFindSpaceByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindSpaceById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void OnErrorFindSpaceById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Space lookup by Space ID Returns a variety of information about the Space specified by the requested ID
        /// </summary>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpaceByIdApiResponse"/>&gt;</returns>
        public async Task<IFindSpaceByIdApiResponse?> FindSpaceByIdOrDefaultAsync(string id, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindSpaceByIdAsync(id, spaceFields, expansions, userFields, topicFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Space lookup by Space ID Returns a variety of information about the Space specified by the requested ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpaceByIdApiResponse"/>&gt;</returns>
        public async Task<IFindSpaceByIdApiResponse> FindSpaceByIdAsync(string id, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindSpaceById(id, spaceFields, expansions, userFields, topicFields);

                FormatFindSpaceById(ref id, spaceFields, expansions, userFields, topicFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (spaceFields.IsSet)
                        parseQueryStringLocalVar["space.fields"] = ClientUtils.ParameterToString(spaceFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (topicFields.IsSet)
                        parseQueryStringLocalVar["topic.fields"] = ClientUtils.ParameterToString(topicFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindSpaceByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindSpaceByIdApiResponse>();

                        FindSpaceByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindSpaceByIdDefaultImplementation(apiResponseLocalVar, id, spaceFields, expansions, userFields, topicFields);

                        Events.ExecuteOnFindSpaceById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindSpaceByIdDefaultImplementation(e, "/2/spaces/{id}", uriBuilderLocalVar.Path, id, spaceFields, expansions, userFields, topicFields);
                Events.ExecuteOnErrorFindSpaceById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindSpaceByIdApiResponse"/>
        /// </summary>
        public partial class FindSpaceByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindSpaceByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindSpaceByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindSpaceByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindSpaceByIdApiResponse(ILogger<FindSpaceByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindSpacesByCreatorIds(List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userIds"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        /// <returns></returns>
        private void ValidateFindSpacesByCreatorIds(List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            if (userIds == null)
                throw new ArgumentNullException(nameof(userIds));

            if (spaceFields.IsSet && spaceFields.Value == null)
                throw new ArgumentNullException(nameof(spaceFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (topicFields.IsSet && topicFields.Value == null)
                throw new ArgumentNullException(nameof(topicFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userIds"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void AfterFindSpacesByCreatorIdsDefaultImplementation(IFindSpacesByCreatorIdsApiResponse apiResponseLocalVar, List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLog = false;
            AfterFindSpacesByCreatorIds(ref suppressDefaultLog, apiResponseLocalVar, userIds, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userIds"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void AfterFindSpacesByCreatorIds(ref bool suppressDefaultLog, IFindSpacesByCreatorIdsApiResponse apiResponseLocalVar, List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userIds"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void OnErrorFindSpacesByCreatorIdsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindSpacesByCreatorIds(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userIds, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userIds"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void OnErrorFindSpacesByCreatorIds(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> userIds, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Space lookup by their creators Returns a variety of information about the Spaces created by the provided User IDs
        /// </summary>
        /// <param name="userIds">The IDs of Users to search through.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByCreatorIdsApiResponse"/>&gt;</returns>
        public async Task<IFindSpacesByCreatorIdsApiResponse?> FindSpacesByCreatorIdsOrDefaultAsync(List<string> userIds, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindSpacesByCreatorIdsAsync(userIds, spaceFields, expansions, userFields, topicFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Space lookup by their creators Returns a variety of information about the Spaces created by the provided User IDs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIds">The IDs of Users to search through.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByCreatorIdsApiResponse"/>&gt;</returns>
        public async Task<IFindSpacesByCreatorIdsApiResponse> FindSpacesByCreatorIdsAsync(List<string> userIds, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindSpacesByCreatorIds(userIds, spaceFields, expansions, userFields, topicFields);

                FormatFindSpacesByCreatorIds(userIds, spaceFields, expansions, userFields, topicFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/by/creator_ids";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["user_ids"] = ClientUtils.ParameterToString(userIds);

                    if (spaceFields.IsSet)
                        parseQueryStringLocalVar["space.fields"] = ClientUtils.ParameterToString(spaceFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (topicFields.IsSet)
                        parseQueryStringLocalVar["topic.fields"] = ClientUtils.ParameterToString(topicFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindSpacesByCreatorIdsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindSpacesByCreatorIdsApiResponse>();

                        FindSpacesByCreatorIdsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/by/creator_ids", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindSpacesByCreatorIdsDefaultImplementation(apiResponseLocalVar, userIds, spaceFields, expansions, userFields, topicFields);

                        Events.ExecuteOnFindSpacesByCreatorIds(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindSpacesByCreatorIdsDefaultImplementation(e, "/2/spaces/by/creator_ids", uriBuilderLocalVar.Path, userIds, spaceFields, expansions, userFields, topicFields);
                Events.ExecuteOnErrorFindSpacesByCreatorIds(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindSpacesByCreatorIdsApiResponse"/>
        /// </summary>
        public partial class FindSpacesByCreatorIdsApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindSpacesByCreatorIdsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindSpacesByCreatorIdsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindSpacesByCreatorIdsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindSpacesByCreatorIdsApiResponse(ILogger<FindSpacesByCreatorIdsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesByCreatorIdsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesByCreatorIdsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesByCreatorIdsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindSpacesByIds(List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        /// <returns></returns>
        private void ValidateFindSpacesByIds(List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            if (ids == null)
                throw new ArgumentNullException(nameof(ids));

            if (spaceFields.IsSet && spaceFields.Value == null)
                throw new ArgumentNullException(nameof(spaceFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (topicFields.IsSet && topicFields.Value == null)
                throw new ArgumentNullException(nameof(topicFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void AfterFindSpacesByIdsDefaultImplementation(IFindSpacesByIdsApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLog = false;
            AfterFindSpacesByIds(ref suppressDefaultLog, apiResponseLocalVar, ids, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void AfterFindSpacesByIds(ref bool suppressDefaultLog, IFindSpacesByIdsApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void OnErrorFindSpacesByIdsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindSpacesByIds(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ids, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void OnErrorFindSpacesByIds(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Space lookup up Space IDs Returns a variety of information about the Spaces specified by the requested IDs
        /// </summary>
        /// <param name="ids">The list of Space IDs to return.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByIdsApiResponse"/>&gt;</returns>
        public async Task<IFindSpacesByIdsApiResponse?> FindSpacesByIdsOrDefaultAsync(List<string> ids, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindSpacesByIdsAsync(ids, spaceFields, expansions, userFields, topicFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Space lookup up Space IDs Returns a variety of information about the Spaces specified by the requested IDs
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The list of Space IDs to return.</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSpacesByIdsApiResponse"/>&gt;</returns>
        public async Task<IFindSpacesByIdsApiResponse> FindSpacesByIdsAsync(List<string> ids, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindSpacesByIds(ids, spaceFields, expansions, userFields, topicFields);

                FormatFindSpacesByIds(ids, spaceFields, expansions, userFields, topicFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["ids"] = ClientUtils.ParameterToString(ids);

                    if (spaceFields.IsSet)
                        parseQueryStringLocalVar["space.fields"] = ClientUtils.ParameterToString(spaceFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (topicFields.IsSet)
                        parseQueryStringLocalVar["topic.fields"] = ClientUtils.ParameterToString(topicFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindSpacesByIdsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindSpacesByIdsApiResponse>();

                        FindSpacesByIdsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindSpacesByIdsDefaultImplementation(apiResponseLocalVar, ids, spaceFields, expansions, userFields, topicFields);

                        Events.ExecuteOnFindSpacesByIds(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindSpacesByIdsDefaultImplementation(e, "/2/spaces", uriBuilderLocalVar.Path, ids, spaceFields, expansions, userFields, topicFields);
                Events.ExecuteOnErrorFindSpacesByIds(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindSpacesByIdsApiResponse"/>
        /// </summary>
        public partial class FindSpacesByIdsApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindSpacesByIdsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindSpacesByIdsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindSpacesByIdsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindSpacesByIdsApiResponse(ILogger<FindSpacesByIdsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchSpaces(ref string query, ref Option<string> state, ref Option<int> maxResults, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="state"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        /// <returns></returns>
        private void ValidateSearchSpaces(string query, Option<string> state, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state));

            if (spaceFields.IsSet && spaceFields.Value == null)
                throw new ArgumentNullException(nameof(spaceFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (topicFields.IsSet && topicFields.Value == null)
                throw new ArgumentNullException(nameof(topicFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="state"></param>
        /// <param name="maxResults"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void AfterSearchSpacesDefaultImplementation(ISearchSpacesApiResponse apiResponseLocalVar, string query, Option<string> state, Option<int> maxResults, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLog = false;
            AfterSearchSpaces(ref suppressDefaultLog, apiResponseLocalVar, query, state, maxResults, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="state"></param>
        /// <param name="maxResults"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void AfterSearchSpaces(ref bool suppressDefaultLog, ISearchSpacesApiResponse apiResponseLocalVar, string query, Option<string> state, Option<int> maxResults, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="state"></param>
        /// <param name="maxResults"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        private void OnErrorSearchSpacesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<string> state, Option<int> maxResults, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchSpaces(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, state, maxResults, spaceFields, expansions, userFields, topicFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="state"></param>
        /// <param name="maxResults"></param>
        /// <param name="spaceFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <param name="topicFields"></param>
        partial void OnErrorSearchSpaces(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<string> state, Option<int> maxResults, Option<List<string>> spaceFields, Option<List<string>> expansions, Option<List<string>> userFields, Option<List<string>> topicFields);

        /// <summary>
        /// Search for Spaces Returns Spaces that match the provided query.
        /// </summary>
        /// <param name="query">The search query.</param>
        /// <param name="state">The state of Spaces to search for. (optional, default to all)</param>
        /// <param name="maxResults">The number of results to return. (optional, default to 100)</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchSpacesApiResponse"/>&gt;</returns>
        public async Task<ISearchSpacesApiResponse?> SearchSpacesOrDefaultAsync(string query, Option<string> state = default, Option<int> maxResults = default, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchSpacesAsync(query, state, maxResults, spaceFields, expansions, userFields, topicFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Search for Spaces Returns Spaces that match the provided query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="state">The state of Spaces to search for. (optional, default to all)</param>
        /// <param name="maxResults">The number of results to return. (optional, default to 100)</param>
        /// <param name="spaceFields">A comma separated list of Space fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="topicFields">A comma separated list of Topic fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchSpacesApiResponse"/>&gt;</returns>
        public async Task<ISearchSpacesApiResponse> SearchSpacesAsync(string query, Option<string> state = default, Option<int> maxResults = default, Option<List<string>> spaceFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, Option<List<string>> topicFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchSpaces(query, state, spaceFields, expansions, userFields, topicFields);

                FormatSearchSpaces(ref query, ref state, ref maxResults, spaceFields, expansions, userFields, topicFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/search";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (state.IsSet)
                        parseQueryStringLocalVar["state"] = ClientUtils.ParameterToString(state.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (spaceFields.IsSet)
                        parseQueryStringLocalVar["space.fields"] = ClientUtils.ParameterToString(spaceFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (topicFields.IsSet)
                        parseQueryStringLocalVar["topic.fields"] = ClientUtils.ParameterToString(topicFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchSpacesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchSpacesApiResponse>();

                        SearchSpacesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchSpacesDefaultImplementation(apiResponseLocalVar, query, state, maxResults, spaceFields, expansions, userFields, topicFields);

                        Events.ExecuteOnSearchSpaces(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchSpacesDefaultImplementation(e, "/2/spaces/search", uriBuilderLocalVar.Path, query, state, maxResults, spaceFields, expansions, userFields, topicFields);
                Events.ExecuteOnErrorSearchSpaces(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchSpacesApiResponse"/>
        /// </summary>
        public partial class SearchSpacesApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchSpacesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchSpacesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchSpacesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchSpacesApiResponse(ILogger<SearchSpacesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesSearchResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesSearchResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesSearchResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSpaceBuyers(ref string id, ref Option<string> paginationToken, ref Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateSpaceBuyers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterSpaceBuyersDefaultImplementation(ISpaceBuyersApiResponse apiResponseLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterSpaceBuyers(ref suppressDefaultLog, apiResponseLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterSpaceBuyers(ref bool suppressDefaultLog, ISpaceBuyersApiResponse apiResponseLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorSpaceBuyersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSpaceBuyers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorSpaceBuyers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space Retrieves the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        public async Task<ISpaceBuyersApiResponse?> SpaceBuyersOrDefaultAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SpaceBuyersAsync(id, paginationToken, maxResults, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space Retrieves the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        public async Task<ISpaceBuyersApiResponse> SpaceBuyersAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSpaceBuyers(id, paginationToken, userFields, expansions, tweetFields);

                FormatSpaceBuyers(ref id, ref paginationToken, ref maxResults, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/{id}/buyers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SpaceBuyersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SpaceBuyersApiResponse>();

                        SpaceBuyersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/{id}/buyers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSpaceBuyersDefaultImplementation(apiResponseLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);

                        Events.ExecuteOnSpaceBuyers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSpaceBuyersDefaultImplementation(e, "/2/spaces/{id}/buyers", uriBuilderLocalVar.Path, id, paginationToken, maxResults, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorSpaceBuyers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SpaceBuyersApiResponse"/>
        /// </summary>
        public partial class SpaceBuyersApiResponse : Org.OpenAPITools.Client.ApiResponse, ISpaceBuyersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SpaceBuyersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SpaceBuyersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SpaceBuyersApiResponse(ILogger<SpaceBuyersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesIdBuyersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesIdBuyersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesIdBuyersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSpaceTweets(ref string id, ref Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateSpaceTweets(string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterSpaceTweetsDefaultImplementation(ISpaceTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterSpaceTweets(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterSpaceTweets(ref bool suppressDefaultLog, ISpaceTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorSpaceTweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSpaceTweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorSpaceTweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Retrieve Posts from a Space. Retrieves Posts shared in the specified Space.
        /// </summary>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        public async Task<ISpaceTweetsApiResponse?> SpaceTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SpaceTweetsAsync(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve Posts from a Space. Retrieves Posts shared in the specified Space.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        public async Task<ISpaceTweetsApiResponse> SpaceTweetsAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSpaceTweets(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatSpaceTweets(ref id, ref maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/{id}/tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SpaceTweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SpaceTweetsApiResponse>();

                        SpaceTweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/{id}/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSpaceTweetsDefaultImplementation(apiResponseLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnSpaceTweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSpaceTweetsDefaultImplementation(e, "/2/spaces/{id}/tweets", uriBuilderLocalVar.Path, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorSpaceTweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SpaceTweetsApiResponse"/>
        /// </summary>
        public partial class SpaceTweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, ISpaceTweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SpaceTweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SpaceTweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SpaceTweetsApiResponse(ILogger<SpaceTweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2SpacesIdTweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2SpacesIdTweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2SpacesIdTweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
