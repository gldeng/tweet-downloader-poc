// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDirectMessagesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DirectMessagesApiEvents Events { get; }

        /// <summary>
        /// Send a new message to a DM Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new message for a DM Conversation specified by DM Conversation ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmConversationId">The DM Conversation ID.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationByIdEventIdCreateApiResponse"/>&gt;</returns>
        Task<IDmConversationByIdEventIdCreateApiResponse> DmConversationByIdEventIdCreateAsync(string dmConversationId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a new message to a DM Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new message for a DM Conversation specified by DM Conversation ID
        /// </remarks>
        /// <param name="dmConversationId">The DM Conversation ID.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationByIdEventIdCreateApiResponse"/>?&gt;</returns>
        Task<IDmConversationByIdEventIdCreateApiResponse?> DmConversationByIdEventIdCreateOrDefaultAsync(string dmConversationId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new DM Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new DM Conversation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDmConversationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationIdCreateApiResponse"/>&gt;</returns>
        Task<IDmConversationIdCreateApiResponse> DmConversationIdCreateAsync(Option<CreateDmConversationRequest> createDmConversationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new DM Conversation
        /// </summary>
        /// <remarks>
        /// Creates a new DM Conversation.
        /// </remarks>
        /// <param name="createDmConversationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationIdCreateApiResponse"/>?&gt;</returns>
        Task<IDmConversationIdCreateApiResponse?> DmConversationIdCreateOrDefaultAsync(Option<CreateDmConversationRequest> createDmConversationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a new message to a user
        /// </summary>
        /// <remarks>
        /// Creates a new message for a DM Conversation with a participant user by ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="participantId">The ID of the recipient user that will receive the DM.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationWithUserEventIdCreateApiResponse"/>&gt;</returns>
        Task<IDmConversationWithUserEventIdCreateApiResponse> DmConversationWithUserEventIdCreateAsync(string participantId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a new message to a user
        /// </summary>
        /// <remarks>
        /// Creates a new message for a DM Conversation with a participant user by ID
        /// </remarks>
        /// <param name="participantId">The ID of the recipient user that will receive the DM.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationWithUserEventIdCreateApiResponse"/>?&gt;</returns>
        Task<IDmConversationWithUserEventIdCreateApiResponse?> DmConversationWithUserEventIdCreateOrDefaultAsync(string participantId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Dm
        /// </summary>
        /// <remarks>
        /// Delete a Dm Event that you own.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the direct-message event to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmEventDeleteApiResponse"/>&gt;</returns>
        Task<IDmEventDeleteApiResponse> DmEventDeleteAsync(string eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Dm
        /// </summary>
        /// <remarks>
        /// Delete a Dm Event that you own.
        /// </remarks>
        /// <param name="eventId">The ID of the direct-message event to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmEventDeleteApiResponse"/>?&gt;</returns>
        Task<IDmEventDeleteApiResponse?> DmEventDeleteOrDefaultAsync(string eventId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events for a DM Conversation
        /// </summary>
        /// <remarks>
        /// Returns DM Events for a DM Conversation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The DM Conversation ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsIdDmEventsApiResponse"/>&gt;</returns>
        Task<IGetDmConversationsIdDmEventsApiResponse> GetDmConversationsIdDmEventsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events for a DM Conversation
        /// </summary>
        /// <remarks>
        /// Returns DM Events for a DM Conversation
        /// </remarks>
        /// <param name="id">The DM Conversation ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsIdDmEventsApiResponse"/>?&gt;</returns>
        Task<IGetDmConversationsIdDmEventsApiResponse?> GetDmConversationsIdDmEventsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events for a DM Conversation
        /// </summary>
        /// <remarks>
        /// Returns DM Events for a DM Conversation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="participantId">The ID of the participant user for the One to One DM conversation.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsWithParticipantIdDmEventsApiResponse"/>&gt;</returns>
        Task<IGetDmConversationsWithParticipantIdDmEventsApiResponse> GetDmConversationsWithParticipantIdDmEventsAsync(string participantId, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events for a DM Conversation
        /// </summary>
        /// <remarks>
        /// Returns DM Events for a DM Conversation
        /// </remarks>
        /// <param name="participantId">The ID of the participant user for the One to One DM conversation.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsWithParticipantIdDmEventsApiResponse"/>?&gt;</returns>
        Task<IGetDmConversationsWithParticipantIdDmEventsApiResponse?> GetDmConversationsWithParticipantIdDmEventsOrDefaultAsync(string participantId, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get recent DM Events
        /// </summary>
        /// <remarks>
        /// Returns recent DM Events across DM conversations
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsApiResponse"/>&gt;</returns>
        Task<IGetDmEventsApiResponse> GetDmEventsAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get recent DM Events
        /// </summary>
        /// <remarks>
        /// Returns recent DM Events across DM conversations
        /// </remarks>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsApiResponse"/>?&gt;</returns>
        Task<IGetDmEventsApiResponse?> GetDmEventsOrDefaultAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events by id
        /// </summary>
        /// <remarks>
        /// Returns DM Events by event id.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">dm event id.</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsByIdApiResponse"/>&gt;</returns>
        Task<IGetDmEventsByIdApiResponse> GetDmEventsByIdAsync(string eventId, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get DM Events by id
        /// </summary>
        /// <remarks>
        /// Returns DM Events by event id.
        /// </remarks>
        /// <param name="eventId">dm event id.</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsByIdApiResponse"/>?&gt;</returns>
        Task<IGetDmEventsByIdApiResponse?> GetDmEventsByIdOrDefaultAsync(string eventId, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDmConversationByIdEventIdCreateApiResponse"/>
    /// </summary>
    public interface IDmConversationByIdEventIdCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.CreateDmEventResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDmConversationIdCreateApiResponse"/>
    /// </summary>
    public interface IDmConversationIdCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.CreateDmEventResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDmConversationWithUserEventIdCreateApiResponse"/>
    /// </summary>
    public interface IDmConversationWithUserEventIdCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.CreateDmEventResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDmEventDeleteApiResponse"/>
    /// </summary>
    public interface IDmEventDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DeleteDmResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetDmConversationsIdDmEventsApiResponse"/>
    /// </summary>
    public interface IGetDmConversationsIdDmEventsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2DmConversationsIdDmEventsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetDmConversationsWithParticipantIdDmEventsApiResponse"/>
    /// </summary>
    public interface IGetDmConversationsWithParticipantIdDmEventsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2DmConversationsWithParticipantIdDmEventsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetDmEventsApiResponse"/>
    /// </summary>
    public interface IGetDmEventsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2DmEventsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetDmEventsByIdApiResponse"/>
    /// </summary>
    public interface IGetDmEventsByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2DmEventsEventIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DirectMessagesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDmConversationByIdEventIdCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDmConversationByIdEventIdCreate;

        internal void ExecuteOnDmConversationByIdEventIdCreate(DirectMessagesApi.DmConversationByIdEventIdCreateApiResponse apiResponse)
        {
            OnDmConversationByIdEventIdCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDmConversationByIdEventIdCreate(Exception exception)
        {
            OnErrorDmConversationByIdEventIdCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDmConversationIdCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDmConversationIdCreate;

        internal void ExecuteOnDmConversationIdCreate(DirectMessagesApi.DmConversationIdCreateApiResponse apiResponse)
        {
            OnDmConversationIdCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDmConversationIdCreate(Exception exception)
        {
            OnErrorDmConversationIdCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDmConversationWithUserEventIdCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDmConversationWithUserEventIdCreate;

        internal void ExecuteOnDmConversationWithUserEventIdCreate(DirectMessagesApi.DmConversationWithUserEventIdCreateApiResponse apiResponse)
        {
            OnDmConversationWithUserEventIdCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDmConversationWithUserEventIdCreate(Exception exception)
        {
            OnErrorDmConversationWithUserEventIdCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDmEventDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDmEventDelete;

        internal void ExecuteOnDmEventDelete(DirectMessagesApi.DmEventDeleteApiResponse apiResponse)
        {
            OnDmEventDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDmEventDelete(Exception exception)
        {
            OnErrorDmEventDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDmConversationsIdDmEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDmConversationsIdDmEvents;

        internal void ExecuteOnGetDmConversationsIdDmEvents(DirectMessagesApi.GetDmConversationsIdDmEventsApiResponse apiResponse)
        {
            OnGetDmConversationsIdDmEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDmConversationsIdDmEvents(Exception exception)
        {
            OnErrorGetDmConversationsIdDmEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDmConversationsWithParticipantIdDmEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDmConversationsWithParticipantIdDmEvents;

        internal void ExecuteOnGetDmConversationsWithParticipantIdDmEvents(DirectMessagesApi.GetDmConversationsWithParticipantIdDmEventsApiResponse apiResponse)
        {
            OnGetDmConversationsWithParticipantIdDmEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDmConversationsWithParticipantIdDmEvents(Exception exception)
        {
            OnErrorGetDmConversationsWithParticipantIdDmEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDmEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDmEvents;

        internal void ExecuteOnGetDmEvents(DirectMessagesApi.GetDmEventsApiResponse apiResponse)
        {
            OnGetDmEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDmEvents(Exception exception)
        {
            OnErrorGetDmEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDmEventsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDmEventsById;

        internal void ExecuteOnGetDmEventsById(DirectMessagesApi.GetDmEventsByIdApiResponse apiResponse)
        {
            OnGetDmEventsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDmEventsById(Exception exception)
        {
            OnErrorGetDmEventsById?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DirectMessagesApi : IDirectMessagesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DirectMessagesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DirectMessagesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectMessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectMessagesApi(ILogger<DirectMessagesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DirectMessagesApiEvents directMessagesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DirectMessagesApi>();
            HttpClient = httpClient;
            Events = directMessagesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDmConversationByIdEventIdCreate(ref string dmConversationId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dmConversationId"></param>
        /// <param name="createMessageRequest"></param>
        /// <returns></returns>
        private void ValidateDmConversationByIdEventIdCreate(string dmConversationId, Option<CreateMessageRequest> createMessageRequest)
        {
            if (dmConversationId == null)
                throw new ArgumentNullException(nameof(dmConversationId));

            if (createMessageRequest.IsSet && createMessageRequest.Value == null)
                throw new ArgumentNullException(nameof(createMessageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dmConversationId"></param>
        /// <param name="createMessageRequest"></param>
        private void AfterDmConversationByIdEventIdCreateDefaultImplementation(IDmConversationByIdEventIdCreateApiResponse apiResponseLocalVar, string dmConversationId, Option<CreateMessageRequest> createMessageRequest)
        {
            bool suppressDefaultLog = false;
            AfterDmConversationByIdEventIdCreate(ref suppressDefaultLog, apiResponseLocalVar, dmConversationId, createMessageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dmConversationId"></param>
        /// <param name="createMessageRequest"></param>
        partial void AfterDmConversationByIdEventIdCreate(ref bool suppressDefaultLog, IDmConversationByIdEventIdCreateApiResponse apiResponseLocalVar, string dmConversationId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dmConversationId"></param>
        /// <param name="createMessageRequest"></param>
        private void OnErrorDmConversationByIdEventIdCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string dmConversationId, Option<CreateMessageRequest> createMessageRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDmConversationByIdEventIdCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dmConversationId, createMessageRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dmConversationId"></param>
        /// <param name="createMessageRequest"></param>
        partial void OnErrorDmConversationByIdEventIdCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string dmConversationId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Send a new message to a DM Conversation Creates a new message for a DM Conversation specified by DM Conversation ID
        /// </summary>
        /// <param name="dmConversationId">The DM Conversation ID.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationByIdEventIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationByIdEventIdCreateApiResponse?> DmConversationByIdEventIdCreateOrDefaultAsync(string dmConversationId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DmConversationByIdEventIdCreateAsync(dmConversationId, createMessageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send a new message to a DM Conversation Creates a new message for a DM Conversation specified by DM Conversation ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmConversationId">The DM Conversation ID.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationByIdEventIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationByIdEventIdCreateApiResponse> DmConversationByIdEventIdCreateAsync(string dmConversationId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDmConversationByIdEventIdCreate(dmConversationId, createMessageRequest);

                FormatDmConversationByIdEventIdCreate(ref dmConversationId, createMessageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_conversations/{dm_conversation_id}/messages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdm_conversation_id%7D", Uri.EscapeDataString(dmConversationId.ToString()));

                    if (createMessageRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createMessageRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createMessageRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DmConversationByIdEventIdCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DmConversationByIdEventIdCreateApiResponse>();

                        DmConversationByIdEventIdCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_conversations/{dm_conversation_id}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDmConversationByIdEventIdCreateDefaultImplementation(apiResponseLocalVar, dmConversationId, createMessageRequest);

                        Events.ExecuteOnDmConversationByIdEventIdCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDmConversationByIdEventIdCreateDefaultImplementation(e, "/2/dm_conversations/{dm_conversation_id}/messages", uriBuilderLocalVar.Path, dmConversationId, createMessageRequest);
                Events.ExecuteOnErrorDmConversationByIdEventIdCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DmConversationByIdEventIdCreateApiResponse"/>
        /// </summary>
        public partial class DmConversationByIdEventIdCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IDmConversationByIdEventIdCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DmConversationByIdEventIdCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DmConversationByIdEventIdCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DmConversationByIdEventIdCreateApiResponse(ILogger<DmConversationByIdEventIdCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateDmEventResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateDmEventResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateDmEventResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDmConversationIdCreate(Option<CreateDmConversationRequest> createDmConversationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createDmConversationRequest"></param>
        /// <returns></returns>
        private void ValidateDmConversationIdCreate(Option<CreateDmConversationRequest> createDmConversationRequest)
        {
            if (createDmConversationRequest.IsSet && createDmConversationRequest.Value == null)
                throw new ArgumentNullException(nameof(createDmConversationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createDmConversationRequest"></param>
        private void AfterDmConversationIdCreateDefaultImplementation(IDmConversationIdCreateApiResponse apiResponseLocalVar, Option<CreateDmConversationRequest> createDmConversationRequest)
        {
            bool suppressDefaultLog = false;
            AfterDmConversationIdCreate(ref suppressDefaultLog, apiResponseLocalVar, createDmConversationRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createDmConversationRequest"></param>
        partial void AfterDmConversationIdCreate(ref bool suppressDefaultLog, IDmConversationIdCreateApiResponse apiResponseLocalVar, Option<CreateDmConversationRequest> createDmConversationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createDmConversationRequest"></param>
        private void OnErrorDmConversationIdCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateDmConversationRequest> createDmConversationRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDmConversationIdCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createDmConversationRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createDmConversationRequest"></param>
        partial void OnErrorDmConversationIdCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<CreateDmConversationRequest> createDmConversationRequest);

        /// <summary>
        /// Create a new DM Conversation Creates a new DM Conversation.
        /// </summary>
        /// <param name="createDmConversationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationIdCreateApiResponse?> DmConversationIdCreateOrDefaultAsync(Option<CreateDmConversationRequest> createDmConversationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DmConversationIdCreateAsync(createDmConversationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new DM Conversation Creates a new DM Conversation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDmConversationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationIdCreateApiResponse> DmConversationIdCreateAsync(Option<CreateDmConversationRequest> createDmConversationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDmConversationIdCreate(createDmConversationRequest);

                FormatDmConversationIdCreate(createDmConversationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_conversations";

                    if (createDmConversationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createDmConversationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createDmConversationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DmConversationIdCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DmConversationIdCreateApiResponse>();

                        DmConversationIdCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_conversations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDmConversationIdCreateDefaultImplementation(apiResponseLocalVar, createDmConversationRequest);

                        Events.ExecuteOnDmConversationIdCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDmConversationIdCreateDefaultImplementation(e, "/2/dm_conversations", uriBuilderLocalVar.Path, createDmConversationRequest);
                Events.ExecuteOnErrorDmConversationIdCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DmConversationIdCreateApiResponse"/>
        /// </summary>
        public partial class DmConversationIdCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IDmConversationIdCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DmConversationIdCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DmConversationIdCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DmConversationIdCreateApiResponse(ILogger<DmConversationIdCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateDmEventResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateDmEventResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateDmEventResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDmConversationWithUserEventIdCreate(ref string participantId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="participantId"></param>
        /// <param name="createMessageRequest"></param>
        /// <returns></returns>
        private void ValidateDmConversationWithUserEventIdCreate(string participantId, Option<CreateMessageRequest> createMessageRequest)
        {
            if (participantId == null)
                throw new ArgumentNullException(nameof(participantId));

            if (createMessageRequest.IsSet && createMessageRequest.Value == null)
                throw new ArgumentNullException(nameof(createMessageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="createMessageRequest"></param>
        private void AfterDmConversationWithUserEventIdCreateDefaultImplementation(IDmConversationWithUserEventIdCreateApiResponse apiResponseLocalVar, string participantId, Option<CreateMessageRequest> createMessageRequest)
        {
            bool suppressDefaultLog = false;
            AfterDmConversationWithUserEventIdCreate(ref suppressDefaultLog, apiResponseLocalVar, participantId, createMessageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="createMessageRequest"></param>
        partial void AfterDmConversationWithUserEventIdCreate(ref bool suppressDefaultLog, IDmConversationWithUserEventIdCreateApiResponse apiResponseLocalVar, string participantId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="createMessageRequest"></param>
        private void OnErrorDmConversationWithUserEventIdCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string participantId, Option<CreateMessageRequest> createMessageRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDmConversationWithUserEventIdCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, participantId, createMessageRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="createMessageRequest"></param>
        partial void OnErrorDmConversationWithUserEventIdCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string participantId, Option<CreateMessageRequest> createMessageRequest);

        /// <summary>
        /// Send a new message to a user Creates a new message for a DM Conversation with a participant user by ID
        /// </summary>
        /// <param name="participantId">The ID of the recipient user that will receive the DM.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationWithUserEventIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationWithUserEventIdCreateApiResponse?> DmConversationWithUserEventIdCreateOrDefaultAsync(string participantId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DmConversationWithUserEventIdCreateAsync(participantId, createMessageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send a new message to a user Creates a new message for a DM Conversation with a participant user by ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="participantId">The ID of the recipient user that will receive the DM.</param>
        /// <param name="createMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmConversationWithUserEventIdCreateApiResponse"/>&gt;</returns>
        public async Task<IDmConversationWithUserEventIdCreateApiResponse> DmConversationWithUserEventIdCreateAsync(string participantId, Option<CreateMessageRequest> createMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDmConversationWithUserEventIdCreate(participantId, createMessageRequest);

                FormatDmConversationWithUserEventIdCreate(ref participantId, createMessageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_conversations/with/{participant_id}/messages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bparticipant_id%7D", Uri.EscapeDataString(participantId.ToString()));

                    if (createMessageRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createMessageRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createMessageRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DmConversationWithUserEventIdCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DmConversationWithUserEventIdCreateApiResponse>();

                        DmConversationWithUserEventIdCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_conversations/with/{participant_id}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDmConversationWithUserEventIdCreateDefaultImplementation(apiResponseLocalVar, participantId, createMessageRequest);

                        Events.ExecuteOnDmConversationWithUserEventIdCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDmConversationWithUserEventIdCreateDefaultImplementation(e, "/2/dm_conversations/with/{participant_id}/messages", uriBuilderLocalVar.Path, participantId, createMessageRequest);
                Events.ExecuteOnErrorDmConversationWithUserEventIdCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DmConversationWithUserEventIdCreateApiResponse"/>
        /// </summary>
        public partial class DmConversationWithUserEventIdCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IDmConversationWithUserEventIdCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DmConversationWithUserEventIdCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DmConversationWithUserEventIdCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DmConversationWithUserEventIdCreateApiResponse(ILogger<DmConversationWithUserEventIdCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateDmEventResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateDmEventResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateDmEventResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDmEventDelete(ref string eventId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="eventId"></param>
        /// <returns></returns>
        private void ValidateDmEventDelete(string eventId)
        {
            if (eventId == null)
                throw new ArgumentNullException(nameof(eventId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        private void AfterDmEventDeleteDefaultImplementation(IDmEventDeleteApiResponse apiResponseLocalVar, string eventId)
        {
            bool suppressDefaultLog = false;
            AfterDmEventDelete(ref suppressDefaultLog, apiResponseLocalVar, eventId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        partial void AfterDmEventDelete(ref bool suppressDefaultLog, IDmEventDeleteApiResponse apiResponseLocalVar, string eventId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        private void OnErrorDmEventDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string eventId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDmEventDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, eventId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        partial void OnErrorDmEventDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string eventId);

        /// <summary>
        /// Delete Dm Delete a Dm Event that you own.
        /// </summary>
        /// <param name="eventId">The ID of the direct-message event to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmEventDeleteApiResponse"/>&gt;</returns>
        public async Task<IDmEventDeleteApiResponse?> DmEventDeleteOrDefaultAsync(string eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DmEventDeleteAsync(eventId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Dm Delete a Dm Event that you own.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">The ID of the direct-message event to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDmEventDeleteApiResponse"/>&gt;</returns>
        public async Task<IDmEventDeleteApiResponse> DmEventDeleteAsync(string eventId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDmEventDelete(eventId);

                FormatDmEventDelete(ref eventId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_events/{event_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bevent_id%7D", Uri.EscapeDataString(eventId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DmEventDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DmEventDeleteApiResponse>();

                        DmEventDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_events/{event_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDmEventDeleteDefaultImplementation(apiResponseLocalVar, eventId);

                        Events.ExecuteOnDmEventDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDmEventDeleteDefaultImplementation(e, "/2/dm_events/{event_id}", uriBuilderLocalVar.Path, eventId);
                Events.ExecuteOnErrorDmEventDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DmEventDeleteApiResponse"/>
        /// </summary>
        public partial class DmEventDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDmEventDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DmEventDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DmEventDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DmEventDeleteApiResponse(ILogger<DmEventDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DeleteDmResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DeleteDmResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DeleteDmResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDmConversationsIdDmEvents(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateGetDmConversationsIdDmEvents(string id, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (eventTypes.IsSet && eventTypes.Value == null)
                throw new ArgumentNullException(nameof(eventTypes));

            if (dmEventFields.IsSet && dmEventFields.Value == null)
                throw new ArgumentNullException(nameof(dmEventFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterGetDmConversationsIdDmEventsDefaultImplementation(IGetDmConversationsIdDmEventsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterGetDmConversationsIdDmEvents(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterGetDmConversationsIdDmEvents(ref bool suppressDefaultLog, IGetDmConversationsIdDmEventsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorGetDmConversationsIdDmEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDmConversationsIdDmEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorGetDmConversationsIdDmEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Get DM Events for a DM Conversation Returns DM Events for a DM Conversation
        /// </summary>
        /// <param name="id">The DM Conversation ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsIdDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmConversationsIdDmEventsApiResponse?> GetDmConversationsIdDmEventsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDmConversationsIdDmEventsAsync(id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DM Events for a DM Conversation Returns DM Events for a DM Conversation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The DM Conversation ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsIdDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmConversationsIdDmEventsApiResponse> GetDmConversationsIdDmEventsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDmConversationsIdDmEvents(id, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                FormatGetDmConversationsIdDmEvents(ref id, ref maxResults, ref paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_conversations/{id}/dm_events";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (eventTypes.IsSet)
                        parseQueryStringLocalVar["event_types"] = ClientUtils.ParameterToString(eventTypes.Value);

                    if (dmEventFields.IsSet)
                        parseQueryStringLocalVar["dm_event.fields"] = ClientUtils.ParameterToString(dmEventFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDmConversationsIdDmEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDmConversationsIdDmEventsApiResponse>();

                        GetDmConversationsIdDmEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_conversations/{id}/dm_events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDmConversationsIdDmEventsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                        Events.ExecuteOnGetDmConversationsIdDmEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDmConversationsIdDmEventsDefaultImplementation(e, "/2/dm_conversations/{id}/dm_events", uriBuilderLocalVar.Path, id, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
                Events.ExecuteOnErrorGetDmConversationsIdDmEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDmConversationsIdDmEventsApiResponse"/>
        /// </summary>
        public partial class GetDmConversationsIdDmEventsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDmConversationsIdDmEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDmConversationsIdDmEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDmConversationsIdDmEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDmConversationsIdDmEventsApiResponse(ILogger<GetDmConversationsIdDmEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2DmConversationsIdDmEventsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2DmConversationsIdDmEventsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2DmConversationsIdDmEventsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDmConversationsWithParticipantIdDmEvents(ref string participantId, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="participantId"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateGetDmConversationsWithParticipantIdDmEvents(string participantId, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (participantId == null)
                throw new ArgumentNullException(nameof(participantId));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (eventTypes.IsSet && eventTypes.Value == null)
                throw new ArgumentNullException(nameof(eventTypes));

            if (dmEventFields.IsSet && dmEventFields.Value == null)
                throw new ArgumentNullException(nameof(dmEventFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterGetDmConversationsWithParticipantIdDmEventsDefaultImplementation(IGetDmConversationsWithParticipantIdDmEventsApiResponse apiResponseLocalVar, string participantId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterGetDmConversationsWithParticipantIdDmEvents(ref suppressDefaultLog, apiResponseLocalVar, participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterGetDmConversationsWithParticipantIdDmEvents(ref bool suppressDefaultLog, IGetDmConversationsWithParticipantIdDmEventsApiResponse apiResponseLocalVar, string participantId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorGetDmConversationsWithParticipantIdDmEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string participantId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDmConversationsWithParticipantIdDmEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="participantId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorGetDmConversationsWithParticipantIdDmEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string participantId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Get DM Events for a DM Conversation Returns DM Events for a DM Conversation
        /// </summary>
        /// <param name="participantId">The ID of the participant user for the One to One DM conversation.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsWithParticipantIdDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmConversationsWithParticipantIdDmEventsApiResponse?> GetDmConversationsWithParticipantIdDmEventsOrDefaultAsync(string participantId, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDmConversationsWithParticipantIdDmEventsAsync(participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DM Events for a DM Conversation Returns DM Events for a DM Conversation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="participantId">The ID of the participant user for the One to One DM conversation.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmConversationsWithParticipantIdDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmConversationsWithParticipantIdDmEventsApiResponse> GetDmConversationsWithParticipantIdDmEventsAsync(string participantId, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDmConversationsWithParticipantIdDmEvents(participantId, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                FormatGetDmConversationsWithParticipantIdDmEvents(ref participantId, ref maxResults, ref paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_conversations/with/{participant_id}/dm_events";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bparticipant_id%7D", Uri.EscapeDataString(participantId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (eventTypes.IsSet)
                        parseQueryStringLocalVar["event_types"] = ClientUtils.ParameterToString(eventTypes.Value);

                    if (dmEventFields.IsSet)
                        parseQueryStringLocalVar["dm_event.fields"] = ClientUtils.ParameterToString(dmEventFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDmConversationsWithParticipantIdDmEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDmConversationsWithParticipantIdDmEventsApiResponse>();

                        GetDmConversationsWithParticipantIdDmEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_conversations/with/{participant_id}/dm_events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDmConversationsWithParticipantIdDmEventsDefaultImplementation(apiResponseLocalVar, participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                        Events.ExecuteOnGetDmConversationsWithParticipantIdDmEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDmConversationsWithParticipantIdDmEventsDefaultImplementation(e, "/2/dm_conversations/with/{participant_id}/dm_events", uriBuilderLocalVar.Path, participantId, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
                Events.ExecuteOnErrorGetDmConversationsWithParticipantIdDmEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDmConversationsWithParticipantIdDmEventsApiResponse"/>
        /// </summary>
        public partial class GetDmConversationsWithParticipantIdDmEventsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDmConversationsWithParticipantIdDmEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDmConversationsWithParticipantIdDmEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDmConversationsWithParticipantIdDmEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDmConversationsWithParticipantIdDmEventsApiResponse(ILogger<GetDmConversationsWithParticipantIdDmEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2DmConversationsWithParticipantIdDmEventsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2DmConversationsWithParticipantIdDmEventsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2DmConversationsWithParticipantIdDmEventsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDmEvents(ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateGetDmEvents(Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (eventTypes.IsSet && eventTypes.Value == null)
                throw new ArgumentNullException(nameof(eventTypes));

            if (dmEventFields.IsSet && dmEventFields.Value == null)
                throw new ArgumentNullException(nameof(dmEventFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterGetDmEventsDefaultImplementation(IGetDmEventsApiResponse apiResponseLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterGetDmEvents(ref suppressDefaultLog, apiResponseLocalVar, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterGetDmEvents(ref bool suppressDefaultLog, IGetDmEventsApiResponse apiResponseLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorGetDmEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDmEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="eventTypes"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorGetDmEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> eventTypes, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Get recent DM Events Returns recent DM Events across DM conversations
        /// </summary>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmEventsApiResponse?> GetDmEventsOrDefaultAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDmEventsAsync(maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get recent DM Events Returns recent DM Events across DM conversations
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="eventTypes">The set of event_types to include in the results. (optional)</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsApiResponse"/>&gt;</returns>
        public async Task<IGetDmEventsApiResponse> GetDmEventsAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> eventTypes = default, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDmEvents(paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                FormatGetDmEvents(ref maxResults, ref paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_events";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (eventTypes.IsSet)
                        parseQueryStringLocalVar["event_types"] = ClientUtils.ParameterToString(eventTypes.Value);

                    if (dmEventFields.IsSet)
                        parseQueryStringLocalVar["dm_event.fields"] = ClientUtils.ParameterToString(dmEventFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDmEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDmEventsApiResponse>();

                        GetDmEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDmEventsDefaultImplementation(apiResponseLocalVar, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                        Events.ExecuteOnGetDmEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDmEventsDefaultImplementation(e, "/2/dm_events", uriBuilderLocalVar.Path, maxResults, paginationToken, eventTypes, dmEventFields, expansions, mediaFields, userFields, tweetFields);
                Events.ExecuteOnErrorGetDmEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDmEventsApiResponse"/>
        /// </summary>
        public partial class GetDmEventsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDmEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDmEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDmEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDmEventsApiResponse(ILogger<GetDmEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2DmEventsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2DmEventsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2DmEventsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetDmEventsById(ref string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="eventId"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateGetDmEventsById(string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            if (eventId == null)
                throw new ArgumentNullException(nameof(eventId));

            if (dmEventFields.IsSet && dmEventFields.Value == null)
                throw new ArgumentNullException(nameof(dmEventFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void AfterGetDmEventsByIdDefaultImplementation(IGetDmEventsByIdApiResponse apiResponseLocalVar, string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterGetDmEventsById(ref suppressDefaultLog, apiResponseLocalVar, eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="eventId"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void AfterGetDmEventsById(ref bool suppressDefaultLog, IGetDmEventsByIdApiResponse apiResponseLocalVar, string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorGetDmEventsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDmEventsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="eventId"></param>
        /// <param name="dmEventFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="userFields"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorGetDmEventsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string eventId, Option<List<string>> dmEventFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> userFields, Option<List<string>> tweetFields);

        /// <summary>
        /// Get DM Events by id Returns DM Events by event id.
        /// </summary>
        /// <param name="eventId">dm event id.</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetDmEventsByIdApiResponse?> GetDmEventsByIdOrDefaultAsync(string eventId, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDmEventsByIdAsync(eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get DM Events by id Returns DM Events by event id.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">dm event id.</param>
        /// <param name="dmEventFields">A comma separated list of DmEvent fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDmEventsByIdApiResponse"/>&gt;</returns>
        public async Task<IGetDmEventsByIdApiResponse> GetDmEventsByIdAsync(string eventId, Option<List<string>> dmEventFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> userFields = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDmEventsById(eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                FormatGetDmEventsById(ref eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/dm_events/{event_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bevent_id%7D", Uri.EscapeDataString(eventId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dmEventFields.IsSet)
                        parseQueryStringLocalVar["dm_event.fields"] = ClientUtils.ParameterToString(dmEventFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDmEventsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDmEventsByIdApiResponse>();

                        GetDmEventsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/dm_events/{event_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDmEventsByIdDefaultImplementation(apiResponseLocalVar, eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);

                        Events.ExecuteOnGetDmEventsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDmEventsByIdDefaultImplementation(e, "/2/dm_events/{event_id}", uriBuilderLocalVar.Path, eventId, dmEventFields, expansions, mediaFields, userFields, tweetFields);
                Events.ExecuteOnErrorGetDmEventsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDmEventsByIdApiResponse"/>
        /// </summary>
        public partial class GetDmEventsByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDmEventsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDmEventsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDmEventsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDmEventsByIdApiResponse(ILogger<GetDmEventsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2DmEventsEventIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2DmEventsEventIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2DmEventsEventIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
