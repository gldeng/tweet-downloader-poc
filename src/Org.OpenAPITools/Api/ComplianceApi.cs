// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IComplianceApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ComplianceApiEvents Events { get; }

        /// <summary>
        /// Create compliance job
        /// </summary>
        /// <remarks>
        /// Creates a compliance for the given job type
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBatchComplianceJobApiResponse"/>&gt;</returns>
        Task<ICreateBatchComplianceJobApiResponse> CreateBatchComplianceJobAsync(CreateComplianceJobRequest createComplianceJobRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create compliance job
        /// </summary>
        /// <remarks>
        /// Creates a compliance for the given job type
        /// </remarks>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBatchComplianceJobApiResponse"/>?&gt;</returns>
        Task<ICreateBatchComplianceJobApiResponse?> CreateBatchComplianceJobOrDefaultAsync(CreateComplianceJobRequest createComplianceJobRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Compliance Job
        /// </summary>
        /// <remarks>
        /// Returns a single Compliance Job by ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Compliance Job to retrieve.</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBatchComplianceJobApiResponse"/>&gt;</returns>
        Task<IGetBatchComplianceJobApiResponse> GetBatchComplianceJobAsync(string id, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Compliance Job
        /// </summary>
        /// <remarks>
        /// Returns a single Compliance Job by ID
        /// </remarks>
        /// <param name="id">The ID of the Compliance Job to retrieve.</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBatchComplianceJobApiResponse"/>?&gt;</returns>
        Task<IGetBatchComplianceJobApiResponse?> GetBatchComplianceJobOrDefaultAsync(string id, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Likes Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Users
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLikesComplianceStreamApiResponse"/>&gt;</returns>
        Task<IGetLikesComplianceStreamApiResponse> GetLikesComplianceStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Likes Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Users
        /// </remarks>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLikesComplianceStreamApiResponse"/>?&gt;</returns>
        Task<IGetLikesComplianceStreamApiResponse?> GetLikesComplianceStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Posts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Post Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsComplianceStreamApiResponse"/>&gt;</returns>
        Task<IGetTweetsComplianceStreamApiResponse> GetTweetsComplianceStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Posts
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Post Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsComplianceStreamApiResponse"/>?&gt;</returns>
        Task<IGetTweetsComplianceStreamApiResponse?> GetTweetsComplianceStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts Label stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of labeling events applied to Posts
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsLabelStreamApiResponse"/>&gt;</returns>
        Task<IGetTweetsLabelStreamApiResponse> GetTweetsLabelStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Posts Label stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of labeling events applied to Posts
        /// </remarks>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsLabelStreamApiResponse"/>?&gt;</returns>
        Task<IGetTweetsLabelStreamApiResponse?> GetTweetsLabelStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Users Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Users
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersComplianceStreamApiResponse"/>&gt;</returns>
        Task<IGetUsersComplianceStreamApiResponse> GetUsersComplianceStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Users Compliance stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of compliance data for Users
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersComplianceStreamApiResponse"/>?&gt;</returns>
        Task<IGetUsersComplianceStreamApiResponse?> GetUsersComplianceStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Compliance Jobs
        /// </summary>
        /// <remarks>
        /// Returns recent Compliance Jobs for a given job type and optional job status
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of Compliance Job to list.</param>
        /// <param name="status">Status of Compliance Job to list. (optional)</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBatchComplianceJobsApiResponse"/>&gt;</returns>
        Task<IListBatchComplianceJobsApiResponse> ListBatchComplianceJobsAsync(string type, Option<string> status = default, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Compliance Jobs
        /// </summary>
        /// <remarks>
        /// Returns recent Compliance Jobs for a given job type and optional job status
        /// </remarks>
        /// <param name="type">Type of Compliance Job to list.</param>
        /// <param name="status">Status of Compliance Job to list. (optional)</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBatchComplianceJobsApiResponse"/>?&gt;</returns>
        Task<IListBatchComplianceJobsApiResponse?> ListBatchComplianceJobsOrDefaultAsync(string type, Option<string> status = default, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateBatchComplianceJobApiResponse"/>
    /// </summary>
    public interface ICreateBatchComplianceJobApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.CreateComplianceJobResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetBatchComplianceJobApiResponse"/>
    /// </summary>
    public interface IGetBatchComplianceJobApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ComplianceJobsIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetLikesComplianceStreamApiResponse"/>
    /// </summary>
    public interface IGetLikesComplianceStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.LikesComplianceStreamResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsComplianceStreamApiResponse"/>
    /// </summary>
    public interface IGetTweetsComplianceStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TweetComplianceStreamResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsLabelStreamApiResponse"/>
    /// </summary>
    public interface IGetTweetsLabelStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TweetLabelStreamResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetUsersComplianceStreamApiResponse"/>
    /// </summary>
    public interface IGetUsersComplianceStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserComplianceStreamResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListBatchComplianceJobsApiResponse"/>
    /// </summary>
    public interface IListBatchComplianceJobsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ComplianceJobsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ComplianceApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBatchComplianceJob;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBatchComplianceJob;

        internal void ExecuteOnCreateBatchComplianceJob(ComplianceApi.CreateBatchComplianceJobApiResponse apiResponse)
        {
            OnCreateBatchComplianceJob?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBatchComplianceJob(Exception exception)
        {
            OnErrorCreateBatchComplianceJob?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBatchComplianceJob;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBatchComplianceJob;

        internal void ExecuteOnGetBatchComplianceJob(ComplianceApi.GetBatchComplianceJobApiResponse apiResponse)
        {
            OnGetBatchComplianceJob?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBatchComplianceJob(Exception exception)
        {
            OnErrorGetBatchComplianceJob?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLikesComplianceStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLikesComplianceStream;

        internal void ExecuteOnGetLikesComplianceStream(ComplianceApi.GetLikesComplianceStreamApiResponse apiResponse)
        {
            OnGetLikesComplianceStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLikesComplianceStream(Exception exception)
        {
            OnErrorGetLikesComplianceStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsComplianceStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsComplianceStream;

        internal void ExecuteOnGetTweetsComplianceStream(ComplianceApi.GetTweetsComplianceStreamApiResponse apiResponse)
        {
            OnGetTweetsComplianceStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsComplianceStream(Exception exception)
        {
            OnErrorGetTweetsComplianceStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsLabelStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsLabelStream;

        internal void ExecuteOnGetTweetsLabelStream(ComplianceApi.GetTweetsLabelStreamApiResponse apiResponse)
        {
            OnGetTweetsLabelStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsLabelStream(Exception exception)
        {
            OnErrorGetTweetsLabelStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsersComplianceStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsersComplianceStream;

        internal void ExecuteOnGetUsersComplianceStream(ComplianceApi.GetUsersComplianceStreamApiResponse apiResponse)
        {
            OnGetUsersComplianceStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsersComplianceStream(Exception exception)
        {
            OnErrorGetUsersComplianceStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListBatchComplianceJobs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListBatchComplianceJobs;

        internal void ExecuteOnListBatchComplianceJobs(ComplianceApi.ListBatchComplianceJobsApiResponse apiResponse)
        {
            OnListBatchComplianceJobs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListBatchComplianceJobs(Exception exception)
        {
            OnErrorListBatchComplianceJobs?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ComplianceApi : IComplianceApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ComplianceApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ComplianceApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComplianceApi(ILogger<ComplianceApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ComplianceApiEvents complianceApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ComplianceApi>();
            HttpClient = httpClient;
            Events = complianceApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateBatchComplianceJob(CreateComplianceJobRequest createComplianceJobRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createComplianceJobRequest"></param>
        /// <returns></returns>
        private void ValidateCreateBatchComplianceJob(CreateComplianceJobRequest createComplianceJobRequest)
        {
            if (createComplianceJobRequest == null)
                throw new ArgumentNullException(nameof(createComplianceJobRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createComplianceJobRequest"></param>
        private void AfterCreateBatchComplianceJobDefaultImplementation(ICreateBatchComplianceJobApiResponse apiResponseLocalVar, CreateComplianceJobRequest createComplianceJobRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateBatchComplianceJob(ref suppressDefaultLog, apiResponseLocalVar, createComplianceJobRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createComplianceJobRequest"></param>
        partial void AfterCreateBatchComplianceJob(ref bool suppressDefaultLog, ICreateBatchComplianceJobApiResponse apiResponseLocalVar, CreateComplianceJobRequest createComplianceJobRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createComplianceJobRequest"></param>
        private void OnErrorCreateBatchComplianceJobDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateComplianceJobRequest createComplianceJobRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateBatchComplianceJob(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createComplianceJobRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createComplianceJobRequest"></param>
        partial void OnErrorCreateBatchComplianceJob(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateComplianceJobRequest createComplianceJobRequest);

        /// <summary>
        /// Create compliance job Creates a compliance for the given job type
        /// </summary>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBatchComplianceJobApiResponse"/>&gt;</returns>
        public async Task<ICreateBatchComplianceJobApiResponse?> CreateBatchComplianceJobOrDefaultAsync(CreateComplianceJobRequest createComplianceJobRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBatchComplianceJobAsync(createComplianceJobRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create compliance job Creates a compliance for the given job type
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createComplianceJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBatchComplianceJobApiResponse"/>&gt;</returns>
        public async Task<ICreateBatchComplianceJobApiResponse> CreateBatchComplianceJobAsync(CreateComplianceJobRequest createComplianceJobRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBatchComplianceJob(createComplianceJobRequest);

                FormatCreateBatchComplianceJob(createComplianceJobRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/compliance/jobs";

                    httpRequestMessageLocalVar.Content = (createComplianceJobRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createComplianceJobRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBatchComplianceJobApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBatchComplianceJobApiResponse>();

                        CreateBatchComplianceJobApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/compliance/jobs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBatchComplianceJobDefaultImplementation(apiResponseLocalVar, createComplianceJobRequest);

                        Events.ExecuteOnCreateBatchComplianceJob(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBatchComplianceJobDefaultImplementation(e, "/2/compliance/jobs", uriBuilderLocalVar.Path, createComplianceJobRequest);
                Events.ExecuteOnErrorCreateBatchComplianceJob(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBatchComplianceJobApiResponse"/>
        /// </summary>
        public partial class CreateBatchComplianceJobApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateBatchComplianceJobApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBatchComplianceJobApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBatchComplianceJobApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBatchComplianceJobApiResponse(ILogger<CreateBatchComplianceJobApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CreateComplianceJobResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CreateComplianceJobResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.CreateComplianceJobResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBatchComplianceJob(ref string id, Option<List<string>> complianceJobFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="complianceJobFields"></param>
        /// <returns></returns>
        private void ValidateGetBatchComplianceJob(string id, Option<List<string>> complianceJobFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (complianceJobFields.IsSet && complianceJobFields.Value == null)
                throw new ArgumentNullException(nameof(complianceJobFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="complianceJobFields"></param>
        private void AfterGetBatchComplianceJobDefaultImplementation(IGetBatchComplianceJobApiResponse apiResponseLocalVar, string id, Option<List<string>> complianceJobFields)
        {
            bool suppressDefaultLog = false;
            AfterGetBatchComplianceJob(ref suppressDefaultLog, apiResponseLocalVar, id, complianceJobFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="complianceJobFields"></param>
        partial void AfterGetBatchComplianceJob(ref bool suppressDefaultLog, IGetBatchComplianceJobApiResponse apiResponseLocalVar, string id, Option<List<string>> complianceJobFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="complianceJobFields"></param>
        private void OnErrorGetBatchComplianceJobDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> complianceJobFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBatchComplianceJob(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, complianceJobFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="complianceJobFields"></param>
        partial void OnErrorGetBatchComplianceJob(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> complianceJobFields);

        /// <summary>
        /// Get Compliance Job Returns a single Compliance Job by ID
        /// </summary>
        /// <param name="id">The ID of the Compliance Job to retrieve.</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBatchComplianceJobApiResponse"/>&gt;</returns>
        public async Task<IGetBatchComplianceJobApiResponse?> GetBatchComplianceJobOrDefaultAsync(string id, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBatchComplianceJobAsync(id, complianceJobFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Compliance Job Returns a single Compliance Job by ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Compliance Job to retrieve.</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBatchComplianceJobApiResponse"/>&gt;</returns>
        public async Task<IGetBatchComplianceJobApiResponse> GetBatchComplianceJobAsync(string id, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBatchComplianceJob(id, complianceJobFields);

                FormatGetBatchComplianceJob(ref id, complianceJobFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/compliance/jobs/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (complianceJobFields.IsSet)
                        parseQueryStringLocalVar["compliance_job.fields"] = ClientUtils.ParameterToString(complianceJobFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBatchComplianceJobApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBatchComplianceJobApiResponse>();

                        GetBatchComplianceJobApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/compliance/jobs/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBatchComplianceJobDefaultImplementation(apiResponseLocalVar, id, complianceJobFields);

                        Events.ExecuteOnGetBatchComplianceJob(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBatchComplianceJobDefaultImplementation(e, "/2/compliance/jobs/{id}", uriBuilderLocalVar.Path, id, complianceJobFields);
                Events.ExecuteOnErrorGetBatchComplianceJob(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBatchComplianceJobApiResponse"/>
        /// </summary>
        public partial class GetBatchComplianceJobApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetBatchComplianceJobApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBatchComplianceJobApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBatchComplianceJobApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBatchComplianceJobApiResponse(ILogger<GetBatchComplianceJobApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ComplianceJobsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ComplianceJobsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ComplianceJobsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLikesComplianceStream(ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void AfterGetLikesComplianceStreamDefaultImplementation(IGetLikesComplianceStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLog = false;
            AfterGetLikesComplianceStream(ref suppressDefaultLog, apiResponseLocalVar, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void AfterGetLikesComplianceStream(ref bool suppressDefaultLog, IGetLikesComplianceStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void OnErrorGetLikesComplianceStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLikesComplianceStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void OnErrorGetLikesComplianceStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Likes Compliance stream Streams 100% of compliance data for Users
        /// </summary>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLikesComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetLikesComplianceStreamApiResponse?> GetLikesComplianceStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLikesComplianceStreamAsync(backfillMinutes, startTime, endTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Likes Compliance stream Streams 100% of compliance data for Users
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Likes Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLikesComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetLikesComplianceStreamApiResponse> GetLikesComplianceStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLikesComplianceStream(ref backfillMinutes, ref startTime, ref endTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/likes/compliance/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLikesComplianceStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLikesComplianceStreamApiResponse>();

                        GetLikesComplianceStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/likes/compliance/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLikesComplianceStreamDefaultImplementation(apiResponseLocalVar, backfillMinutes, startTime, endTime);

                        Events.ExecuteOnGetLikesComplianceStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLikesComplianceStreamDefaultImplementation(e, "/2/likes/compliance/stream", uriBuilderLocalVar.Path, backfillMinutes, startTime, endTime);
                Events.ExecuteOnErrorGetLikesComplianceStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLikesComplianceStreamApiResponse"/>
        /// </summary>
        public partial class GetLikesComplianceStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetLikesComplianceStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLikesComplianceStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLikesComplianceStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLikesComplianceStreamApiResponse(ILogger<GetLikesComplianceStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LikesComplianceStreamResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LikesComplianceStreamResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.LikesComplianceStreamResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsComplianceStream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void AfterGetTweetsComplianceStreamDefaultImplementation(IGetTweetsComplianceStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsComplianceStream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void AfterGetTweetsComplianceStream(ref bool suppressDefaultLog, IGetTweetsComplianceStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void OnErrorGetTweetsComplianceStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsComplianceStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void OnErrorGetTweetsComplianceStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Posts Compliance stream Streams 100% of compliance data for Posts
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Post Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsComplianceStreamApiResponse?> GetTweetsComplianceStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsComplianceStreamAsync(partition, backfillMinutes, startTime, endTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Posts Compliance stream Streams 100% of compliance data for Posts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Post Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsComplianceStreamApiResponse> GetTweetsComplianceStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTweetsComplianceStream(ref partition, ref backfillMinutes, ref startTime, ref endTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/compliance/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsComplianceStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsComplianceStreamApiResponse>();

                        GetTweetsComplianceStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/compliance/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsComplianceStreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime);

                        Events.ExecuteOnGetTweetsComplianceStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsComplianceStreamDefaultImplementation(e, "/2/tweets/compliance/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime);
                Events.ExecuteOnErrorGetTweetsComplianceStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsComplianceStreamApiResponse"/>
        /// </summary>
        public partial class GetTweetsComplianceStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsComplianceStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsComplianceStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsComplianceStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsComplianceStreamApiResponse(ILogger<GetTweetsComplianceStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TweetComplianceStreamResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TweetComplianceStreamResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TweetComplianceStreamResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsLabelStream(ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void AfterGetTweetsLabelStreamDefaultImplementation(IGetTweetsLabelStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsLabelStream(ref suppressDefaultLog, apiResponseLocalVar, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void AfterGetTweetsLabelStream(ref bool suppressDefaultLog, IGetTweetsLabelStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void OnErrorGetTweetsLabelStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsLabelStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void OnErrorGetTweetsLabelStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Posts Label stream Streams 100% of labeling events applied to Posts
        /// </summary>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsLabelStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsLabelStreamApiResponse?> GetTweetsLabelStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsLabelStreamAsync(backfillMinutes, startTime, endTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Posts Label stream Streams 100% of labeling events applied to Posts
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Post labels will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsLabelStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsLabelStreamApiResponse> GetTweetsLabelStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTweetsLabelStream(ref backfillMinutes, ref startTime, ref endTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/label/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsLabelStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsLabelStreamApiResponse>();

                        GetTweetsLabelStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/label/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsLabelStreamDefaultImplementation(apiResponseLocalVar, backfillMinutes, startTime, endTime);

                        Events.ExecuteOnGetTweetsLabelStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsLabelStreamDefaultImplementation(e, "/2/tweets/label/stream", uriBuilderLocalVar.Path, backfillMinutes, startTime, endTime);
                Events.ExecuteOnErrorGetTweetsLabelStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsLabelStreamApiResponse"/>
        /// </summary>
        public partial class GetTweetsLabelStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsLabelStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsLabelStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsLabelStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsLabelStreamApiResponse(ILogger<GetTweetsLabelStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TweetLabelStreamResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TweetLabelStreamResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TweetLabelStreamResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUsersComplianceStream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void AfterGetUsersComplianceStreamDefaultImplementation(IGetUsersComplianceStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLog = false;
            AfterGetUsersComplianceStream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void AfterGetUsersComplianceStream(ref bool suppressDefaultLog, IGetUsersComplianceStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        private void OnErrorGetUsersComplianceStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsersComplianceStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        partial void OnErrorGetUsersComplianceStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime);

        /// <summary>
        /// Users Compliance stream Streams 100% of compliance data for Users
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetUsersComplianceStreamApiResponse?> GetUsersComplianceStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersComplianceStreamAsync(partition, backfillMinutes, startTime, endTime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Users Compliance stream Streams 100% of compliance data for Users
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersComplianceStreamApiResponse"/>&gt;</returns>
        public async Task<IGetUsersComplianceStreamApiResponse> GetUsersComplianceStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUsersComplianceStream(ref partition, ref backfillMinutes, ref startTime, ref endTime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/compliance/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersComplianceStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersComplianceStreamApiResponse>();

                        GetUsersComplianceStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/compliance/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersComplianceStreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime);

                        Events.ExecuteOnGetUsersComplianceStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersComplianceStreamDefaultImplementation(e, "/2/users/compliance/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime);
                Events.ExecuteOnErrorGetUsersComplianceStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersComplianceStreamApiResponse"/>
        /// </summary>
        public partial class GetUsersComplianceStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersComplianceStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersComplianceStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersComplianceStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersComplianceStreamApiResponse(ILogger<GetUsersComplianceStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserComplianceStreamResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserComplianceStreamResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserComplianceStreamResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListBatchComplianceJobs(ref string type, ref Option<string> status, Option<List<string>> complianceJobFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="complianceJobFields"></param>
        /// <returns></returns>
        private void ValidateListBatchComplianceJobs(string type, Option<string> status, Option<List<string>> complianceJobFields)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status));

            if (complianceJobFields.IsSet && complianceJobFields.Value == null)
                throw new ArgumentNullException(nameof(complianceJobFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="complianceJobFields"></param>
        private void AfterListBatchComplianceJobsDefaultImplementation(IListBatchComplianceJobsApiResponse apiResponseLocalVar, string type, Option<string> status, Option<List<string>> complianceJobFields)
        {
            bool suppressDefaultLog = false;
            AfterListBatchComplianceJobs(ref suppressDefaultLog, apiResponseLocalVar, type, status, complianceJobFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="complianceJobFields"></param>
        partial void AfterListBatchComplianceJobs(ref bool suppressDefaultLog, IListBatchComplianceJobsApiResponse apiResponseLocalVar, string type, Option<string> status, Option<List<string>> complianceJobFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="complianceJobFields"></param>
        private void OnErrorListBatchComplianceJobsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string type, Option<string> status, Option<List<string>> complianceJobFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListBatchComplianceJobs(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, type, status, complianceJobFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="type"></param>
        /// <param name="status"></param>
        /// <param name="complianceJobFields"></param>
        partial void OnErrorListBatchComplianceJobs(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string type, Option<string> status, Option<List<string>> complianceJobFields);

        /// <summary>
        /// List Compliance Jobs Returns recent Compliance Jobs for a given job type and optional job status
        /// </summary>
        /// <param name="type">Type of Compliance Job to list.</param>
        /// <param name="status">Status of Compliance Job to list. (optional)</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBatchComplianceJobsApiResponse"/>&gt;</returns>
        public async Task<IListBatchComplianceJobsApiResponse?> ListBatchComplianceJobsOrDefaultAsync(string type, Option<string> status = default, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListBatchComplianceJobsAsync(type, status, complianceJobFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Compliance Jobs Returns recent Compliance Jobs for a given job type and optional job status
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of Compliance Job to list.</param>
        /// <param name="status">Status of Compliance Job to list. (optional)</param>
        /// <param name="complianceJobFields">A comma separated list of ComplianceJob fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListBatchComplianceJobsApiResponse"/>&gt;</returns>
        public async Task<IListBatchComplianceJobsApiResponse> ListBatchComplianceJobsAsync(string type, Option<string> status = default, Option<List<string>> complianceJobFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListBatchComplianceJobs(type, status, complianceJobFields);

                FormatListBatchComplianceJobs(ref type, ref status, complianceJobFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/compliance/jobs";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type);

                    if (status.IsSet)
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (complianceJobFields.IsSet)
                        parseQueryStringLocalVar["compliance_job.fields"] = ClientUtils.ParameterToString(complianceJobFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListBatchComplianceJobsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListBatchComplianceJobsApiResponse>();

                        ListBatchComplianceJobsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/compliance/jobs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListBatchComplianceJobsDefaultImplementation(apiResponseLocalVar, type, status, complianceJobFields);

                        Events.ExecuteOnListBatchComplianceJobs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListBatchComplianceJobsDefaultImplementation(e, "/2/compliance/jobs", uriBuilderLocalVar.Path, type, status, complianceJobFields);
                Events.ExecuteOnErrorListBatchComplianceJobs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListBatchComplianceJobsApiResponse"/>
        /// </summary>
        public partial class ListBatchComplianceJobsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListBatchComplianceJobsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListBatchComplianceJobsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListBatchComplianceJobsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListBatchComplianceJobsApiResponse(ILogger<ListBatchComplianceJobsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ComplianceJobsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ComplianceJobsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ComplianceJobsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
