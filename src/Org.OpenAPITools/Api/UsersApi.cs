// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUsersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UsersApiEvents Events { get; }

        /// <summary>
        /// User lookup me
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the requesting User.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMyUserApiResponse"/>&gt;</returns>
        Task<IFindMyUserApiResponse> FindMyUserAsync(Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup me
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about the requesting User.
        /// </remarks>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMyUserApiResponse"/>?&gt;</returns>
        Task<IFindMyUserApiResponse?> FindMyUserOrDefaultAsync(Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by ID
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about a User. Specify User by ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByIdApiResponse"/>&gt;</returns>
        Task<IFindUserByIdApiResponse> FindUserByIdAsync(string id, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by ID
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about a User. Specify User by ID.
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByIdApiResponse"/>?&gt;</returns>
        Task<IFindUserByIdApiResponse?> FindUserByIdOrDefaultAsync(string id, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by username
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about a User. Specify User by username.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A username.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByUsernameApiResponse"/>&gt;</returns>
        Task<IFindUserByUsernameApiResponse> FindUserByUsernameAsync(string username, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by username
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about a User. Specify User by username.
        /// </remarks>
        /// <param name="username">A username.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByUsernameApiResponse"/>?&gt;</returns>
        Task<IFindUserByUsernameApiResponse?> FindUserByUsernameOrDefaultAsync(string username, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by IDs
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about Users. Specify Users by their ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of User IDs, comma-separated. You can specify up to 100 IDs.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByIdApiResponse"/>&gt;</returns>
        Task<IFindUsersByIdApiResponse> FindUsersByIdAsync(List<string> ids, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by IDs
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about Users. Specify Users by their ID.
        /// </remarks>
        /// <param name="ids">A list of User IDs, comma-separated. You can specify up to 100 IDs.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByIdApiResponse"/>?&gt;</returns>
        Task<IFindUsersByIdApiResponse?> FindUsersByIdOrDefaultAsync(List<string> ids, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by usernames
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about Users. Specify Users by their username.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A list of usernames, comma-separated.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByUsernameApiResponse"/>&gt;</returns>
        Task<IFindUsersByUsernameApiResponse> FindUsersByUsernameAsync(List<string> usernames, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User lookup by usernames
        /// </summary>
        /// <remarks>
        /// This endpoint returns information about Users. Specify Users by their username.
        /// </remarks>
        /// <param name="usernames">A list of usernames, comma-separated.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByUsernameApiResponse"/>?&gt;</returns>
        Task<IFindUsersByUsernameApiResponse?> FindUsersByUsernameOrDefaultAsync(List<string> usernames, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that follow a List by the provided List ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that follow a List by the provided List ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetFollowersApiResponse"/>&gt;</returns>
        Task<IListGetFollowersApiResponse> ListGetFollowersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that follow a List by the provided List ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that follow a List by the provided List ID
        /// </remarks>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetFollowersApiResponse"/>?&gt;</returns>
        Task<IListGetFollowersApiResponse?> ListGetFollowersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are members of a List by the provided List ID.
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are members of a List by the provided List ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetMembersApiResponse"/>&gt;</returns>
        Task<IListGetMembersApiResponse> ListGetMembersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are members of a List by the provided List ID.
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are members of a List by the provided List ID.
        /// </remarks>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetMembersApiResponse"/>?&gt;</returns>
        Task<IListGetMembersApiResponse?> ListGetMembersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns repost of user
        /// </summary>
        /// <remarks>
        /// This endpoint returns reposts of the requesting User.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOfRepostOfUserApiResponse"/>&gt;</returns>
        Task<IListOfRepostOfUserApiResponse> ListOfRepostOfUserAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns repost of user
        /// </summary>
        /// <remarks>
        /// This endpoint returns reposts of the requesting User.
        /// </remarks>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOfRepostOfUserApiResponse"/>?&gt;</returns>
        Task<IListOfRepostOfUserApiResponse?> ListOfRepostOfUserOrDefaultAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User search
        /// </summary>
        /// <remarks>
        /// Returns Users that match a search query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">TThe the query string by which to query for users.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserByQueryApiResponse"/>&gt;</returns>
        Task<ISearchUserByQueryApiResponse> SearchUserByQueryAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User search
        /// </summary>
        /// <remarks>
        /// Returns Users that match a search query.
        /// </remarks>
        /// <param name="query">TThe the query string by which to query for users.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserByQueryApiResponse"/>?&gt;</returns>
        Task<ISearchUserByQueryApiResponse?> SearchUserByQueryOrDefaultAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that have liked the provided Post ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that have liked the provided Post ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdLikingUsersApiResponse"/>&gt;</returns>
        Task<ITweetsIdLikingUsersApiResponse> TweetsIdLikingUsersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that have liked the provided Post ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that have liked the provided Post ID
        /// </remarks>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdLikingUsersApiResponse"/>?&gt;</returns>
        Task<ITweetsIdLikingUsersApiResponse?> TweetsIdLikingUsersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that have retweeted the provided Post ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that have retweeted the provided Post ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdRetweetingUsersApiResponse"/>&gt;</returns>
        Task<ITweetsIdRetweetingUsersApiResponse> TweetsIdRetweetingUsersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that have retweeted the provided Post ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that have retweeted the provided Post ID
        /// </remarks>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdRetweetingUsersApiResponse"/>?&gt;</returns>
        Task<ITweetsIdRetweetingUsersApiResponse?> TweetsIdRetweetingUsersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are blocked by provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are blocked by the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBlockingApiResponse"/>&gt;</returns>
        Task<IUsersIdBlockingApiResponse> UsersIdBlockingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are blocked by provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are blocked by the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBlockingApiResponse"/>?&gt;</returns>
        Task<IUsersIdBlockingApiResponse?> UsersIdBlockingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </summary>
        /// <remarks>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the target User that the authenticated user requesting to block dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMBlockApiResponse"/>&gt;</returns>
        Task<IUsersIdDMBlockApiResponse> UsersIdDMBlockAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </summary>
        /// <remarks>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </remarks>
        /// <param name="id">The ID of the target User that the authenticated user requesting to block dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMBlockApiResponse"/>?&gt;</returns>
        Task<IUsersIdDMBlockApiResponse?> UsersIdDMBlockOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </summary>
        /// <remarks>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the target User that the authenticated user requesting to unblock dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMUnBlockApiResponse"/>&gt;</returns>
        Task<IUsersIdDMUnBlockApiResponse> UsersIdDMUnBlockAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </summary>
        /// <remarks>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </remarks>
        /// <param name="id">The ID of the target User that the authenticated user requesting to unblock dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMUnBlockApiResponse"/>?&gt;</returns>
        Task<IUsersIdDMUnBlockApiResponse?> UsersIdDMUnBlockOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Follow User
        /// </summary>
        /// <remarks>
        /// Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to follow the target User.</param>
        /// <param name="usersFollowingCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowApiResponse"/>&gt;</returns>
        Task<IUsersIdFollowApiResponse> UsersIdFollowAsync(string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Follow User
        /// </summary>
        /// <remarks>
        /// Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to follow the target User.</param>
        /// <param name="usersFollowingCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowApiResponse"/>?&gt;</returns>
        Task<IUsersIdFollowApiResponse?> UsersIdFollowOrDefaultAsync(string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Followers by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users who are followers of the specified User ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowersApiResponse"/>&gt;</returns>
        Task<IUsersIdFollowersApiResponse> UsersIdFollowersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Followers by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users who are followers of the specified User ID.
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowersApiResponse"/>?&gt;</returns>
        Task<IUsersIdFollowersApiResponse?> UsersIdFollowersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Following by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are being followed by the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowingApiResponse"/>&gt;</returns>
        Task<IUsersIdFollowingApiResponse> UsersIdFollowingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Following by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are being followed by the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowingApiResponse"/>?&gt;</returns>
        Task<IUsersIdFollowingApiResponse?> UsersIdFollowingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Mute User by User ID.
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to mute the target User.</param>
        /// <param name="muteUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMuteApiResponse"/>&gt;</returns>
        Task<IUsersIdMuteApiResponse> UsersIdMuteAsync(string id, Option<MuteUserRequest> muteUserRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Mute User by User ID.
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to mute the target User.</param>
        /// <param name="muteUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMuteApiResponse"/>?&gt;</returns>
        Task<IUsersIdMuteApiResponse?> UsersIdMuteOrDefaultAsync(string id, Option<MuteUserRequest> muteUserRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are muted by the provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are muted by the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMutingApiResponse"/>&gt;</returns>
        Task<IUsersIdMutingApiResponse> UsersIdMutingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns User objects that are muted by the provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Users that are muted by the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMutingApiResponse"/>?&gt;</returns>
        Task<IUsersIdMutingApiResponse?> UsersIdMutingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unfollow User
        /// </summary>
        /// <remarks>
        /// Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unfollow the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnfollowApiResponse"/>&gt;</returns>
        Task<IUsersIdUnfollowApiResponse> UsersIdUnfollowAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unfollow User
        /// </summary>
        /// <remarks>
        /// Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
        /// </remarks>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unfollow the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnfollowApiResponse"/>?&gt;</returns>
        Task<IUsersIdUnfollowApiResponse?> UsersIdUnfollowOrDefaultAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unmute User by User ID
        /// </summary>
        /// <remarks>
        /// Causes the source User to unmute the target User. The source User must match the User context authorizing the request
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unmute the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unmute.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnmuteApiResponse"/>&gt;</returns>
        Task<IUsersIdUnmuteApiResponse> UsersIdUnmuteAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unmute User by User ID
        /// </summary>
        /// <remarks>
        /// Causes the source User to unmute the target User. The source User must match the User context authorizing the request
        /// </remarks>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unmute the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unmute.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnmuteApiResponse"/>?&gt;</returns>
        Task<IUsersIdUnmuteApiResponse?> UsersIdUnmuteOrDefaultAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFindMyUserApiResponse"/>
    /// </summary>
    public interface IFindMyUserApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersMeResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindUserByIdApiResponse"/>
    /// </summary>
    public interface IFindUserByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindUserByUsernameApiResponse"/>
    /// </summary>
    public interface IFindUserByUsernameApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersByUsernameUsernameResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindUsersByIdApiResponse"/>
    /// </summary>
    public interface IFindUsersByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindUsersByUsernameApiResponse"/>
    /// </summary>
    public interface IFindUsersByUsernameApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersByResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListGetFollowersApiResponse"/>
    /// </summary>
    public interface IListGetFollowersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ListsIdFollowersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListGetMembersApiResponse"/>
    /// </summary>
    public interface IListGetMembersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ListsIdMembersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListOfRepostOfUserApiResponse"/>
    /// </summary>
    public interface IListOfRepostOfUserApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersRepostsOfMeResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISearchUserByQueryApiResponse"/>
    /// </summary>
    public interface ISearchUserByQueryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersSearchResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetsIdLikingUsersApiResponse"/>
    /// </summary>
    public interface ITweetsIdLikingUsersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsIdLikingUsersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetsIdRetweetingUsersApiResponse"/>
    /// </summary>
    public interface ITweetsIdRetweetingUsersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsIdRetweetedByResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdBlockingApiResponse"/>
    /// </summary>
    public interface IUsersIdBlockingApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdBlockingResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdDMBlockApiResponse"/>
    /// </summary>
    public interface IUsersIdDMBlockApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersDMBlockCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdDMUnBlockApiResponse"/>
    /// </summary>
    public interface IUsersIdDMUnBlockApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersDMUnBlockCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdFollowApiResponse"/>
    /// </summary>
    public interface IUsersIdFollowApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersFollowingCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdFollowersApiResponse"/>
    /// </summary>
    public interface IUsersIdFollowersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdFollowersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdFollowingApiResponse"/>
    /// </summary>
    public interface IUsersIdFollowingApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdFollowingResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdMuteApiResponse"/>
    /// </summary>
    public interface IUsersIdMuteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MuteUserMutationResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdMutingApiResponse"/>
    /// </summary>
    public interface IUsersIdMutingApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdMutingResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUnfollowApiResponse"/>
    /// </summary>
    public interface IUsersIdUnfollowApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersFollowingDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUnmuteApiResponse"/>
    /// </summary>
    public interface IUsersIdUnmuteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MuteUserMutationResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindMyUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindMyUser;

        internal void ExecuteOnFindMyUser(UsersApi.FindMyUserApiResponse apiResponse)
        {
            OnFindMyUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindMyUser(Exception exception)
        {
            OnErrorFindMyUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindUserById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindUserById;

        internal void ExecuteOnFindUserById(UsersApi.FindUserByIdApiResponse apiResponse)
        {
            OnFindUserById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindUserById(Exception exception)
        {
            OnErrorFindUserById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindUserByUsername;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindUserByUsername;

        internal void ExecuteOnFindUserByUsername(UsersApi.FindUserByUsernameApiResponse apiResponse)
        {
            OnFindUserByUsername?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindUserByUsername(Exception exception)
        {
            OnErrorFindUserByUsername?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindUsersById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindUsersById;

        internal void ExecuteOnFindUsersById(UsersApi.FindUsersByIdApiResponse apiResponse)
        {
            OnFindUsersById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindUsersById(Exception exception)
        {
            OnErrorFindUsersById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindUsersByUsername;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindUsersByUsername;

        internal void ExecuteOnFindUsersByUsername(UsersApi.FindUsersByUsernameApiResponse apiResponse)
        {
            OnFindUsersByUsername?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindUsersByUsername(Exception exception)
        {
            OnErrorFindUsersByUsername?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListGetFollowers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListGetFollowers;

        internal void ExecuteOnListGetFollowers(UsersApi.ListGetFollowersApiResponse apiResponse)
        {
            OnListGetFollowers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListGetFollowers(Exception exception)
        {
            OnErrorListGetFollowers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListGetMembers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListGetMembers;

        internal void ExecuteOnListGetMembers(UsersApi.ListGetMembersApiResponse apiResponse)
        {
            OnListGetMembers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListGetMembers(Exception exception)
        {
            OnErrorListGetMembers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListOfRepostOfUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListOfRepostOfUser;

        internal void ExecuteOnListOfRepostOfUser(UsersApi.ListOfRepostOfUserApiResponse apiResponse)
        {
            OnListOfRepostOfUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListOfRepostOfUser(Exception exception)
        {
            OnErrorListOfRepostOfUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchUserByQuery;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchUserByQuery;

        internal void ExecuteOnSearchUserByQuery(UsersApi.SearchUserByQueryApiResponse apiResponse)
        {
            OnSearchUserByQuery?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchUserByQuery(Exception exception)
        {
            OnErrorSearchUserByQuery?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetsIdLikingUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetsIdLikingUsers;

        internal void ExecuteOnTweetsIdLikingUsers(UsersApi.TweetsIdLikingUsersApiResponse apiResponse)
        {
            OnTweetsIdLikingUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetsIdLikingUsers(Exception exception)
        {
            OnErrorTweetsIdLikingUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetsIdRetweetingUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetsIdRetweetingUsers;

        internal void ExecuteOnTweetsIdRetweetingUsers(UsersApi.TweetsIdRetweetingUsersApiResponse apiResponse)
        {
            OnTweetsIdRetweetingUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetsIdRetweetingUsers(Exception exception)
        {
            OnErrorTweetsIdRetweetingUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdBlocking;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdBlocking;

        internal void ExecuteOnUsersIdBlocking(UsersApi.UsersIdBlockingApiResponse apiResponse)
        {
            OnUsersIdBlocking?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdBlocking(Exception exception)
        {
            OnErrorUsersIdBlocking?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdDMBlock;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdDMBlock;

        internal void ExecuteOnUsersIdDMBlock(UsersApi.UsersIdDMBlockApiResponse apiResponse)
        {
            OnUsersIdDMBlock?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdDMBlock(Exception exception)
        {
            OnErrorUsersIdDMBlock?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdDMUnBlock;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdDMUnBlock;

        internal void ExecuteOnUsersIdDMUnBlock(UsersApi.UsersIdDMUnBlockApiResponse apiResponse)
        {
            OnUsersIdDMUnBlock?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdDMUnBlock(Exception exception)
        {
            OnErrorUsersIdDMUnBlock?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdFollow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdFollow;

        internal void ExecuteOnUsersIdFollow(UsersApi.UsersIdFollowApiResponse apiResponse)
        {
            OnUsersIdFollow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdFollow(Exception exception)
        {
            OnErrorUsersIdFollow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdFollowers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdFollowers;

        internal void ExecuteOnUsersIdFollowers(UsersApi.UsersIdFollowersApiResponse apiResponse)
        {
            OnUsersIdFollowers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdFollowers(Exception exception)
        {
            OnErrorUsersIdFollowers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdFollowing;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdFollowing;

        internal void ExecuteOnUsersIdFollowing(UsersApi.UsersIdFollowingApiResponse apiResponse)
        {
            OnUsersIdFollowing?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdFollowing(Exception exception)
        {
            OnErrorUsersIdFollowing?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdMute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdMute;

        internal void ExecuteOnUsersIdMute(UsersApi.UsersIdMuteApiResponse apiResponse)
        {
            OnUsersIdMute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdMute(Exception exception)
        {
            OnErrorUsersIdMute?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdMuting;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdMuting;

        internal void ExecuteOnUsersIdMuting(UsersApi.UsersIdMutingApiResponse apiResponse)
        {
            OnUsersIdMuting?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdMuting(Exception exception)
        {
            OnErrorUsersIdMuting?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUnfollow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUnfollow;

        internal void ExecuteOnUsersIdUnfollow(UsersApi.UsersIdUnfollowApiResponse apiResponse)
        {
            OnUsersIdUnfollow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUnfollow(Exception exception)
        {
            OnErrorUsersIdUnfollow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUnmute;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUnmute;

        internal void ExecuteOnUsersIdUnmute(UsersApi.UsersIdUnmuteApiResponse apiResponse)
        {
            OnUsersIdUnmute?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUnmute(Exception exception)
        {
            OnErrorUsersIdUnmute?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UsersApi : IUsersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UsersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UsersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(ILogger<UsersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UsersApiEvents usersApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UsersApi>();
            HttpClient = httpClient;
            Events = usersApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatFindMyUser(Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateFindMyUser(Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterFindMyUserDefaultImplementation(IFindMyUserApiResponse apiResponseLocalVar, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterFindMyUser(ref suppressDefaultLog, apiResponseLocalVar, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterFindMyUser(ref bool suppressDefaultLog, IFindMyUserApiResponse apiResponseLocalVar, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorFindMyUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindMyUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorFindMyUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User lookup me This endpoint returns information about the requesting User.
        /// </summary>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMyUserApiResponse"/>&gt;</returns>
        public async Task<IFindMyUserApiResponse?> FindMyUserOrDefaultAsync(Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindMyUserAsync(userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User lookup me This endpoint returns information about the requesting User.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindMyUserApiResponse"/>&gt;</returns>
        public async Task<IFindMyUserApiResponse> FindMyUserAsync(Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindMyUser(userFields, expansions, tweetFields);

                FormatFindMyUser(userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/me";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindMyUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindMyUserApiResponse>();

                        FindMyUserApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/me", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindMyUserDefaultImplementation(apiResponseLocalVar, userFields, expansions, tweetFields);

                        Events.ExecuteOnFindMyUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindMyUserDefaultImplementation(e, "/2/users/me", uriBuilderLocalVar.Path, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorFindMyUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindMyUserApiResponse"/>
        /// </summary>
        public partial class FindMyUserApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindMyUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindMyUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindMyUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindMyUserApiResponse(ILogger<FindMyUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersMeResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersMeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersMeResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindUserById(ref string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateFindUserById(string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterFindUserByIdDefaultImplementation(IFindUserByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterFindUserById(ref suppressDefaultLog, apiResponseLocalVar, id, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterFindUserById(ref bool suppressDefaultLog, IFindUserByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorFindUserByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindUserById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorFindUserById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User lookup by ID This endpoint returns information about a User. Specify User by ID.
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByIdApiResponse"/>&gt;</returns>
        public async Task<IFindUserByIdApiResponse?> FindUserByIdOrDefaultAsync(string id, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindUserByIdAsync(id, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User lookup by ID This endpoint returns information about a User. Specify User by ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByIdApiResponse"/>&gt;</returns>
        public async Task<IFindUserByIdApiResponse> FindUserByIdAsync(string id, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindUserById(id, userFields, expansions, tweetFields);

                FormatFindUserById(ref id, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindUserByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindUserByIdApiResponse>();

                        FindUserByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindUserByIdDefaultImplementation(apiResponseLocalVar, id, userFields, expansions, tweetFields);

                        Events.ExecuteOnFindUserById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindUserByIdDefaultImplementation(e, "/2/users/{id}", uriBuilderLocalVar.Path, id, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorFindUserById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindUserByIdApiResponse"/>
        /// </summary>
        public partial class FindUserByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindUserByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindUserByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindUserByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindUserByIdApiResponse(ILogger<FindUserByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindUserByUsername(ref string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="username"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateFindUserByUsername(string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterFindUserByUsernameDefaultImplementation(IFindUserByUsernameApiResponse apiResponseLocalVar, string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterFindUserByUsername(ref suppressDefaultLog, apiResponseLocalVar, username, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterFindUserByUsername(ref bool suppressDefaultLog, IFindUserByUsernameApiResponse apiResponseLocalVar, string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorFindUserByUsernameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindUserByUsername(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, username, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="username"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorFindUserByUsername(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string username, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User lookup by username This endpoint returns information about a User. Specify User by username.
        /// </summary>
        /// <param name="username">A username.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByUsernameApiResponse"/>&gt;</returns>
        public async Task<IFindUserByUsernameApiResponse?> FindUserByUsernameOrDefaultAsync(string username, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindUserByUsernameAsync(username, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User lookup by username This endpoint returns information about a User. Specify User by username.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">A username.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUserByUsernameApiResponse"/>&gt;</returns>
        public async Task<IFindUserByUsernameApiResponse> FindUserByUsernameAsync(string username, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindUserByUsername(username, userFields, expansions, tweetFields);

                FormatFindUserByUsername(ref username, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/by/username/{username}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Busername%7D", Uri.EscapeDataString(username.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindUserByUsernameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindUserByUsernameApiResponse>();

                        FindUserByUsernameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/by/username/{username}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindUserByUsernameDefaultImplementation(apiResponseLocalVar, username, userFields, expansions, tweetFields);

                        Events.ExecuteOnFindUserByUsername(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindUserByUsernameDefaultImplementation(e, "/2/users/by/username/{username}", uriBuilderLocalVar.Path, username, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorFindUserByUsername(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindUserByUsernameApiResponse"/>
        /// </summary>
        public partial class FindUserByUsernameApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindUserByUsernameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindUserByUsernameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindUserByUsernameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindUserByUsernameApiResponse(ILogger<FindUserByUsernameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersByUsernameUsernameResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersByUsernameUsernameResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersByUsernameUsernameResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindUsersById(List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateFindUsersById(List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (ids == null)
                throw new ArgumentNullException(nameof(ids));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterFindUsersByIdDefaultImplementation(IFindUsersByIdApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterFindUsersById(ref suppressDefaultLog, apiResponseLocalVar, ids, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterFindUsersById(ref bool suppressDefaultLog, IFindUsersByIdApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorFindUsersByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindUsersById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ids, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorFindUsersById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User lookup by IDs This endpoint returns information about Users. Specify Users by their ID.
        /// </summary>
        /// <param name="ids">A list of User IDs, comma-separated. You can specify up to 100 IDs.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByIdApiResponse"/>&gt;</returns>
        public async Task<IFindUsersByIdApiResponse?> FindUsersByIdOrDefaultAsync(List<string> ids, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindUsersByIdAsync(ids, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User lookup by IDs This endpoint returns information about Users. Specify Users by their ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A list of User IDs, comma-separated. You can specify up to 100 IDs.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByIdApiResponse"/>&gt;</returns>
        public async Task<IFindUsersByIdApiResponse> FindUsersByIdAsync(List<string> ids, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindUsersById(ids, userFields, expansions, tweetFields);

                FormatFindUsersById(ids, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["ids"] = ClientUtils.ParameterToString(ids);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindUsersByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindUsersByIdApiResponse>();

                        FindUsersByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindUsersByIdDefaultImplementation(apiResponseLocalVar, ids, userFields, expansions, tweetFields);

                        Events.ExecuteOnFindUsersById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindUsersByIdDefaultImplementation(e, "/2/users", uriBuilderLocalVar.Path, ids, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorFindUsersById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindUsersByIdApiResponse"/>
        /// </summary>
        public partial class FindUsersByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindUsersByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindUsersByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindUsersByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindUsersByIdApiResponse(ILogger<FindUsersByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindUsersByUsername(List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="usernames"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateFindUsersByUsername(List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (usernames == null)
                throw new ArgumentNullException(nameof(usernames));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="usernames"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterFindUsersByUsernameDefaultImplementation(IFindUsersByUsernameApiResponse apiResponseLocalVar, List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterFindUsersByUsername(ref suppressDefaultLog, apiResponseLocalVar, usernames, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="usernames"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterFindUsersByUsername(ref bool suppressDefaultLog, IFindUsersByUsernameApiResponse apiResponseLocalVar, List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="usernames"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorFindUsersByUsernameDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindUsersByUsername(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, usernames, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="usernames"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorFindUsersByUsername(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> usernames, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User lookup by usernames This endpoint returns information about Users. Specify Users by their username.
        /// </summary>
        /// <param name="usernames">A list of usernames, comma-separated.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByUsernameApiResponse"/>&gt;</returns>
        public async Task<IFindUsersByUsernameApiResponse?> FindUsersByUsernameOrDefaultAsync(List<string> usernames, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindUsersByUsernameAsync(usernames, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User lookup by usernames This endpoint returns information about Users. Specify Users by their username.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="usernames">A list of usernames, comma-separated.</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindUsersByUsernameApiResponse"/>&gt;</returns>
        public async Task<IFindUsersByUsernameApiResponse> FindUsersByUsernameAsync(List<string> usernames, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindUsersByUsername(usernames, userFields, expansions, tweetFields);

                FormatFindUsersByUsername(usernames, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/by";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["usernames"] = ClientUtils.ParameterToString(usernames);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindUsersByUsernameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindUsersByUsernameApiResponse>();

                        FindUsersByUsernameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/by", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindUsersByUsernameDefaultImplementation(apiResponseLocalVar, usernames, userFields, expansions, tweetFields);

                        Events.ExecuteOnFindUsersByUsername(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindUsersByUsernameDefaultImplementation(e, "/2/users/by", uriBuilderLocalVar.Path, usernames, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorFindUsersByUsername(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindUsersByUsernameApiResponse"/>
        /// </summary>
        public partial class FindUsersByUsernameApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindUsersByUsernameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindUsersByUsernameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindUsersByUsernameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindUsersByUsernameApiResponse(ILogger<FindUsersByUsernameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersByResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersByResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersByResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListGetFollowers(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateListGetFollowers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterListGetFollowersDefaultImplementation(IListGetFollowersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterListGetFollowers(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterListGetFollowers(ref bool suppressDefaultLog, IListGetFollowersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorListGetFollowersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListGetFollowers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorListGetFollowers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that follow a List by the provided List ID Returns a list of Users that follow a List by the provided List ID
        /// </summary>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetFollowersApiResponse"/>&gt;</returns>
        public async Task<IListGetFollowersApiResponse?> ListGetFollowersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListGetFollowersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that follow a List by the provided List ID Returns a list of Users that follow a List by the provided List ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetFollowersApiResponse"/>&gt;</returns>
        public async Task<IListGetFollowersApiResponse> ListGetFollowersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListGetFollowers(id, paginationToken, userFields, expansions, tweetFields);

                FormatListGetFollowers(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}/followers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListGetFollowersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListGetFollowersApiResponse>();

                        ListGetFollowersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}/followers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListGetFollowersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnListGetFollowers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListGetFollowersDefaultImplementation(e, "/2/lists/{id}/followers", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorListGetFollowers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListGetFollowersApiResponse"/>
        /// </summary>
        public partial class ListGetFollowersApiResponse : Org.OpenAPITools.Client.ApiResponse, IListGetFollowersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListGetFollowersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListGetFollowersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListGetFollowersApiResponse(ILogger<ListGetFollowersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ListsIdFollowersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ListsIdFollowersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ListsIdFollowersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListGetMembers(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateListGetMembers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterListGetMembersDefaultImplementation(IListGetMembersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterListGetMembers(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterListGetMembers(ref bool suppressDefaultLog, IListGetMembersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorListGetMembersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListGetMembers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorListGetMembers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that are members of a List by the provided List ID. Returns a list of Users that are members of a List by the provided List ID.
        /// </summary>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetMembersApiResponse"/>&gt;</returns>
        public async Task<IListGetMembersApiResponse?> ListGetMembersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListGetMembersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that are members of a List by the provided List ID. Returns a list of Users that are members of a List by the provided List ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListGetMembersApiResponse"/>&gt;</returns>
        public async Task<IListGetMembersApiResponse> ListGetMembersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListGetMembers(id, paginationToken, userFields, expansions, tweetFields);

                FormatListGetMembers(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}/members";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListGetMembersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListGetMembersApiResponse>();

                        ListGetMembersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListGetMembersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnListGetMembers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListGetMembersDefaultImplementation(e, "/2/lists/{id}/members", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorListGetMembers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListGetMembersApiResponse"/>
        /// </summary>
        public partial class ListGetMembersApiResponse : Org.OpenAPITools.Client.ApiResponse, IListGetMembersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListGetMembersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListGetMembersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListGetMembersApiResponse(ILogger<ListGetMembersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ListsIdMembersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ListsIdMembersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ListsIdMembersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListOfRepostOfUser(ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateListOfRepostOfUser(Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterListOfRepostOfUserDefaultImplementation(IListOfRepostOfUserApiResponse apiResponseLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterListOfRepostOfUser(ref suppressDefaultLog, apiResponseLocalVar, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterListOfRepostOfUser(ref bool suppressDefaultLog, IListOfRepostOfUserApiResponse apiResponseLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorListOfRepostOfUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListOfRepostOfUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorListOfRepostOfUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Returns repost of user This endpoint returns reposts of the requesting User.
        /// </summary>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOfRepostOfUserApiResponse"/>&gt;</returns>
        public async Task<IListOfRepostOfUserApiResponse?> ListOfRepostOfUserOrDefaultAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListOfRepostOfUserAsync(maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns repost of user This endpoint returns reposts of the requesting User.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListOfRepostOfUserApiResponse"/>&gt;</returns>
        public async Task<IListOfRepostOfUserApiResponse> ListOfRepostOfUserAsync(Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListOfRepostOfUser(paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatListOfRepostOfUser(ref maxResults, ref paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/reposts_of_me";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListOfRepostOfUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListOfRepostOfUserApiResponse>();

                        ListOfRepostOfUserApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/reposts_of_me", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListOfRepostOfUserDefaultImplementation(apiResponseLocalVar, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnListOfRepostOfUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListOfRepostOfUserDefaultImplementation(e, "/2/users/reposts_of_me", uriBuilderLocalVar.Path, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorListOfRepostOfUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListOfRepostOfUserApiResponse"/>
        /// </summary>
        public partial class ListOfRepostOfUserApiResponse : Org.OpenAPITools.Client.ApiResponse, IListOfRepostOfUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListOfRepostOfUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListOfRepostOfUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListOfRepostOfUserApiResponse(ILogger<ListOfRepostOfUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersRepostsOfMeResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersRepostsOfMeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersRepostsOfMeResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchUserByQuery(ref string query, ref Option<int> maxResults, ref Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="nextToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateSearchUserByQuery(string query, Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterSearchUserByQueryDefaultImplementation(ISearchUserByQueryApiResponse apiResponseLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterSearchUserByQuery(ref suppressDefaultLog, apiResponseLocalVar, query, maxResults, nextToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterSearchUserByQuery(ref bool suppressDefaultLog, ISearchUserByQueryApiResponse apiResponseLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorSearchUserByQueryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchUserByQuery(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, maxResults, nextToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorSearchUserByQuery(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<int> maxResults, Option<string> nextToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// User search Returns Users that match a search query.
        /// </summary>
        /// <param name="query">TThe the query string by which to query for users.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserByQueryApiResponse"/>&gt;</returns>
        public async Task<ISearchUserByQueryApiResponse?> SearchUserByQueryOrDefaultAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchUserByQueryAsync(query, maxResults, nextToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User search Returns Users that match a search query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">TThe the query string by which to query for users.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserByQueryApiResponse"/>&gt;</returns>
        public async Task<ISearchUserByQueryApiResponse> SearchUserByQueryAsync(string query, Option<int> maxResults = default, Option<string> nextToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchUserByQuery(query, nextToken, userFields, expansions, tweetFields);

                FormatSearchUserByQuery(ref query, ref maxResults, ref nextToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/search";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchUserByQueryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchUserByQueryApiResponse>();

                        SearchUserByQueryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchUserByQueryDefaultImplementation(apiResponseLocalVar, query, maxResults, nextToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnSearchUserByQuery(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchUserByQueryDefaultImplementation(e, "/2/users/search", uriBuilderLocalVar.Path, query, maxResults, nextToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorSearchUserByQuery(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchUserByQueryApiResponse"/>
        /// </summary>
        public partial class SearchUserByQueryApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchUserByQueryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchUserByQueryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchUserByQueryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchUserByQueryApiResponse(ILogger<SearchUserByQueryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersSearchResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersSearchResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersSearchResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTweetsIdLikingUsers(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateTweetsIdLikingUsers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterTweetsIdLikingUsersDefaultImplementation(ITweetsIdLikingUsersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetsIdLikingUsers(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterTweetsIdLikingUsers(ref bool suppressDefaultLog, ITweetsIdLikingUsersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorTweetsIdLikingUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetsIdLikingUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorTweetsIdLikingUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that have liked the provided Post ID Returns a list of Users that have liked the provided Post ID
        /// </summary>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdLikingUsersApiResponse"/>&gt;</returns>
        public async Task<ITweetsIdLikingUsersApiResponse?> TweetsIdLikingUsersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetsIdLikingUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that have liked the provided Post ID Returns a list of Users that have liked the provided Post ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdLikingUsersApiResponse"/>&gt;</returns>
        public async Task<ITweetsIdLikingUsersApiResponse> TweetsIdLikingUsersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetsIdLikingUsers(id, paginationToken, userFields, expansions, tweetFields);

                FormatTweetsIdLikingUsers(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}/liking_users";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetsIdLikingUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetsIdLikingUsersApiResponse>();

                        TweetsIdLikingUsersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}/liking_users", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetsIdLikingUsersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnTweetsIdLikingUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetsIdLikingUsersDefaultImplementation(e, "/2/tweets/{id}/liking_users", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorTweetsIdLikingUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetsIdLikingUsersApiResponse"/>
        /// </summary>
        public partial class TweetsIdLikingUsersApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetsIdLikingUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetsIdLikingUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetsIdLikingUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetsIdLikingUsersApiResponse(ILogger<TweetsIdLikingUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsIdLikingUsersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsIdLikingUsersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsIdLikingUsersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTweetsIdRetweetingUsers(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateTweetsIdRetweetingUsers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterTweetsIdRetweetingUsersDefaultImplementation(ITweetsIdRetweetingUsersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetsIdRetweetingUsers(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterTweetsIdRetweetingUsers(ref bool suppressDefaultLog, ITweetsIdRetweetingUsersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorTweetsIdRetweetingUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetsIdRetweetingUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorTweetsIdRetweetingUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that have retweeted the provided Post ID Returns a list of Users that have retweeted the provided Post ID
        /// </summary>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdRetweetingUsersApiResponse"/>&gt;</returns>
        public async Task<ITweetsIdRetweetingUsersApiResponse?> TweetsIdRetweetingUsersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetsIdRetweetingUsersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that have retweeted the provided Post ID Returns a list of Users that have retweeted the provided Post ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsIdRetweetingUsersApiResponse"/>&gt;</returns>
        public async Task<ITweetsIdRetweetingUsersApiResponse> TweetsIdRetweetingUsersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetsIdRetweetingUsers(id, paginationToken, userFields, expansions, tweetFields);

                FormatTweetsIdRetweetingUsers(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}/retweeted_by";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetsIdRetweetingUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetsIdRetweetingUsersApiResponse>();

                        TweetsIdRetweetingUsersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}/retweeted_by", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetsIdRetweetingUsersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnTweetsIdRetweetingUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetsIdRetweetingUsersDefaultImplementation(e, "/2/tweets/{id}/retweeted_by", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorTweetsIdRetweetingUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetsIdRetweetingUsersApiResponse"/>
        /// </summary>
        public partial class TweetsIdRetweetingUsersApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetsIdRetweetingUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetsIdRetweetingUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetsIdRetweetingUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetsIdRetweetingUsersApiResponse(ILogger<TweetsIdRetweetingUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsIdRetweetedByResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsIdRetweetedByResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsIdRetweetedByResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdBlocking(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdBlocking(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterUsersIdBlockingDefaultImplementation(IUsersIdBlockingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdBlocking(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterUsersIdBlocking(ref bool suppressDefaultLog, IUsersIdBlockingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorUsersIdBlockingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdBlocking(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorUsersIdBlocking(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that are blocked by provided User ID Returns a list of Users that are blocked by the provided User ID
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBlockingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdBlockingApiResponse?> UsersIdBlockingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdBlockingAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that are blocked by provided User ID Returns a list of Users that are blocked by the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBlockingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdBlockingApiResponse> UsersIdBlockingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdBlocking(id, paginationToken, userFields, expansions, tweetFields);

                FormatUsersIdBlocking(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/blocking";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdBlockingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdBlockingApiResponse>();

                        UsersIdBlockingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/blocking", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdBlockingDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnUsersIdBlocking(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdBlockingDefaultImplementation(e, "/2/users/{id}/blocking", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorUsersIdBlocking(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdBlockingApiResponse"/>
        /// </summary>
        public partial class UsersIdBlockingApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdBlockingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdBlockingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdBlockingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdBlockingApiResponse(ILogger<UsersIdBlockingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdBlockingResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdBlockingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdBlockingResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdDMBlock(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateUsersIdDMBlock(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterUsersIdDMBlockDefaultImplementation(IUsersIdDMBlockApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdDMBlock(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterUsersIdDMBlock(ref bool suppressDefaultLog, IUsersIdDMBlockApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorUsersIdDMBlockDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdDMBlock(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorUsersIdDMBlock(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </summary>
        /// <param name="id">The ID of the target User that the authenticated user requesting to block dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMBlockApiResponse"/>&gt;</returns>
        public async Task<IUsersIdDMBlockApiResponse?> UsersIdDMBlockOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdDMBlockAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user Causes DMs to/from the target User (in the path) to be blocked by the authenticated request user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the target User that the authenticated user requesting to block dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMBlockApiResponse"/>&gt;</returns>
        public async Task<IUsersIdDMBlockApiResponse> UsersIdDMBlockAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdDMBlock(id);

                FormatUsersIdDMBlock(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/dm/block";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdDMBlockApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdDMBlockApiResponse>();

                        UsersIdDMBlockApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/dm/block", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdDMBlockDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnUsersIdDMBlock(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdDMBlockDefaultImplementation(e, "/2/users/{id}/dm/block", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorUsersIdDMBlock(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdDMBlockApiResponse"/>
        /// </summary>
        public partial class UsersIdDMBlockApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdDMBlockApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdDMBlockApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdDMBlockApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdDMBlockApiResponse(ILogger<UsersIdDMBlockApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersDMBlockCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersDMBlockCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersDMBlockCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdDMUnBlock(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateUsersIdDMUnBlock(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterUsersIdDMUnBlockDefaultImplementation(IUsersIdDMUnBlockApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdDMUnBlock(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterUsersIdDMUnBlock(ref bool suppressDefaultLog, IUsersIdDMUnBlockApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorUsersIdDMUnBlockDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdDMUnBlock(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorUsersIdDMUnBlock(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </summary>
        /// <param name="id">The ID of the target User that the authenticated user requesting to unblock dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMUnBlockApiResponse"/>&gt;</returns>
        public async Task<IUsersIdDMUnBlockApiResponse?> UsersIdDMUnBlockOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdDMUnBlockAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user Causes DMs to/from the target User (in the path) to be unblocked by the authenticated request user
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the target User that the authenticated user requesting to unblock dms for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdDMUnBlockApiResponse"/>&gt;</returns>
        public async Task<IUsersIdDMUnBlockApiResponse> UsersIdDMUnBlockAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdDMUnBlock(id);

                FormatUsersIdDMUnBlock(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/dm/unblock";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdDMUnBlockApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdDMUnBlockApiResponse>();

                        UsersIdDMUnBlockApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/dm/unblock", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdDMUnBlockDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnUsersIdDMUnBlock(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdDMUnBlockDefaultImplementation(e, "/2/users/{id}/dm/unblock", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorUsersIdDMUnBlock(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdDMUnBlockApiResponse"/>
        /// </summary>
        public partial class UsersIdDMUnBlockApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdDMUnBlockApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdDMUnBlockApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdDMUnBlockApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdDMUnBlockApiResponse(ILogger<UsersIdDMUnBlockApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersDMUnBlockCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersDMUnBlockCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersDMUnBlockCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdFollow(ref string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="usersFollowingCreateRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdFollow(string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (usersFollowingCreateRequest.IsSet && usersFollowingCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(usersFollowingCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersFollowingCreateRequest"></param>
        private void AfterUsersIdFollowDefaultImplementation(IUsersIdFollowApiResponse apiResponseLocalVar, string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdFollow(ref suppressDefaultLog, apiResponseLocalVar, id, usersFollowingCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersFollowingCreateRequest"></param>
        partial void AfterUsersIdFollow(ref bool suppressDefaultLog, IUsersIdFollowApiResponse apiResponseLocalVar, string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersFollowingCreateRequest"></param>
        private void OnErrorUsersIdFollowDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdFollow(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, usersFollowingCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersFollowingCreateRequest"></param>
        partial void OnErrorUsersIdFollow(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest);

        /// <summary>
        /// Follow User Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to follow the target User.</param>
        /// <param name="usersFollowingCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowApiResponse?> UsersIdFollowOrDefaultAsync(string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdFollowAsync(id, usersFollowingCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Follow User Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to follow the target User.</param>
        /// <param name="usersFollowingCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowApiResponse> UsersIdFollowAsync(string id, Option<UsersFollowingCreateRequest> usersFollowingCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdFollow(id, usersFollowingCreateRequest);

                FormatUsersIdFollow(ref id, usersFollowingCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/following";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (usersFollowingCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (usersFollowingCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersFollowingCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdFollowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdFollowApiResponse>();

                        UsersIdFollowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/following", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdFollowDefaultImplementation(apiResponseLocalVar, id, usersFollowingCreateRequest);

                        Events.ExecuteOnUsersIdFollow(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdFollowDefaultImplementation(e, "/2/users/{id}/following", uriBuilderLocalVar.Path, id, usersFollowingCreateRequest);
                Events.ExecuteOnErrorUsersIdFollow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdFollowApiResponse"/>
        /// </summary>
        public partial class UsersIdFollowApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdFollowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdFollowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdFollowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdFollowApiResponse(ILogger<UsersIdFollowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersFollowingCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersFollowingCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersFollowingCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdFollowers(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdFollowers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterUsersIdFollowersDefaultImplementation(IUsersIdFollowersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdFollowers(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterUsersIdFollowers(ref bool suppressDefaultLog, IUsersIdFollowersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorUsersIdFollowersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdFollowers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorUsersIdFollowers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Followers by User ID Returns a list of Users who are followers of the specified User ID.
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowersApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowersApiResponse?> UsersIdFollowersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdFollowersAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Followers by User ID Returns a list of Users who are followers of the specified User ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowersApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowersApiResponse> UsersIdFollowersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdFollowers(id, paginationToken, userFields, expansions, tweetFields);

                FormatUsersIdFollowers(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/followers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdFollowersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdFollowersApiResponse>();

                        UsersIdFollowersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/followers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdFollowersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnUsersIdFollowers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdFollowersDefaultImplementation(e, "/2/users/{id}/followers", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorUsersIdFollowers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdFollowersApiResponse"/>
        /// </summary>
        public partial class UsersIdFollowersApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdFollowersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdFollowersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdFollowersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdFollowersApiResponse(ILogger<UsersIdFollowersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdFollowersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdFollowersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdFollowersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdFollowing(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdFollowing(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterUsersIdFollowingDefaultImplementation(IUsersIdFollowingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdFollowing(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterUsersIdFollowing(ref bool suppressDefaultLog, IUsersIdFollowingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorUsersIdFollowingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdFollowing(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorUsersIdFollowing(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Following by User ID Returns a list of Users that are being followed by the provided User ID
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowingApiResponse?> UsersIdFollowingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdFollowingAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Following by User ID Returns a list of Users that are being followed by the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdFollowingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdFollowingApiResponse> UsersIdFollowingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdFollowing(id, paginationToken, userFields, expansions, tweetFields);

                FormatUsersIdFollowing(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/following";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdFollowingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdFollowingApiResponse>();

                        UsersIdFollowingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/following", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdFollowingDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnUsersIdFollowing(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdFollowingDefaultImplementation(e, "/2/users/{id}/following", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorUsersIdFollowing(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdFollowingApiResponse"/>
        /// </summary>
        public partial class UsersIdFollowingApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdFollowingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdFollowingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdFollowingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdFollowingApiResponse(ILogger<UsersIdFollowingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdFollowingResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdFollowingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdFollowingResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdMute(ref string id, Option<MuteUserRequest> muteUserRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="muteUserRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdMute(string id, Option<MuteUserRequest> muteUserRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (muteUserRequest.IsSet && muteUserRequest.Value == null)
                throw new ArgumentNullException(nameof(muteUserRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="muteUserRequest"></param>
        private void AfterUsersIdMuteDefaultImplementation(IUsersIdMuteApiResponse apiResponseLocalVar, string id, Option<MuteUserRequest> muteUserRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdMute(ref suppressDefaultLog, apiResponseLocalVar, id, muteUserRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="muteUserRequest"></param>
        partial void AfterUsersIdMute(ref bool suppressDefaultLog, IUsersIdMuteApiResponse apiResponseLocalVar, string id, Option<MuteUserRequest> muteUserRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="muteUserRequest"></param>
        private void OnErrorUsersIdMuteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<MuteUserRequest> muteUserRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdMute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, muteUserRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="muteUserRequest"></param>
        partial void OnErrorUsersIdMute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<MuteUserRequest> muteUserRequest);

        /// <summary>
        /// Mute User by User ID. Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to mute the target User.</param>
        /// <param name="muteUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMuteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMuteApiResponse?> UsersIdMuteOrDefaultAsync(string id, Option<MuteUserRequest> muteUserRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdMuteAsync(id, muteUserRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Mute User by User ID. Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to mute the target User.</param>
        /// <param name="muteUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMuteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMuteApiResponse> UsersIdMuteAsync(string id, Option<MuteUserRequest> muteUserRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdMute(id, muteUserRequest);

                FormatUsersIdMute(ref id, muteUserRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/muting";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (muteUserRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (muteUserRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(muteUserRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdMuteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdMuteApiResponse>();

                        UsersIdMuteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/muting", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdMuteDefaultImplementation(apiResponseLocalVar, id, muteUserRequest);

                        Events.ExecuteOnUsersIdMute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdMuteDefaultImplementation(e, "/2/users/{id}/muting", uriBuilderLocalVar.Path, id, muteUserRequest);
                Events.ExecuteOnErrorUsersIdMute(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdMuteApiResponse"/>
        /// </summary>
        public partial class UsersIdMuteApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdMuteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdMuteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdMuteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdMuteApiResponse(ILogger<UsersIdMuteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MuteUserMutationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MuteUserMutationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MuteUserMutationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdMuting(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdMuting(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterUsersIdMutingDefaultImplementation(IUsersIdMutingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdMuting(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterUsersIdMuting(ref bool suppressDefaultLog, IUsersIdMutingApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorUsersIdMutingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdMuting(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorUsersIdMuting(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Returns User objects that are muted by the provided User ID Returns a list of Users that are muted by the provided User ID
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMutingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMutingApiResponse?> UsersIdMutingOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdMutingAsync(id, maxResults, paginationToken, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns User objects that are muted by the provided User ID Returns a list of Users that are muted by the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMutingApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMutingApiResponse> UsersIdMutingAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdMuting(id, paginationToken, userFields, expansions, tweetFields);

                FormatUsersIdMuting(ref id, ref maxResults, ref paginationToken, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/muting";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdMutingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdMutingApiResponse>();

                        UsersIdMutingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/muting", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdMutingDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, userFields, expansions, tweetFields);

                        Events.ExecuteOnUsersIdMuting(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdMutingDefaultImplementation(e, "/2/users/{id}/muting", uriBuilderLocalVar.Path, id, maxResults, paginationToken, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorUsersIdMuting(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdMutingApiResponse"/>
        /// </summary>
        public partial class UsersIdMutingApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdMutingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdMutingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdMutingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdMutingApiResponse(ILogger<UsersIdMutingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdMutingResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdMutingResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdMutingResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUnfollow(ref string sourceUserId, ref string targetUserId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        /// <returns></returns>
        private void ValidateUsersIdUnfollow(string sourceUserId, string targetUserId)
        {
            if (sourceUserId == null)
                throw new ArgumentNullException(nameof(sourceUserId));

            if (targetUserId == null)
                throw new ArgumentNullException(nameof(targetUserId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        private void AfterUsersIdUnfollowDefaultImplementation(IUsersIdUnfollowApiResponse apiResponseLocalVar, string sourceUserId, string targetUserId)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUnfollow(ref suppressDefaultLog, apiResponseLocalVar, sourceUserId, targetUserId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        partial void AfterUsersIdUnfollow(ref bool suppressDefaultLog, IUsersIdUnfollowApiResponse apiResponseLocalVar, string sourceUserId, string targetUserId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        private void OnErrorUsersIdUnfollowDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceUserId, string targetUserId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUnfollow(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sourceUserId, targetUserId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        partial void OnErrorUsersIdUnfollow(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceUserId, string targetUserId);

        /// <summary>
        /// Unfollow User Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
        /// </summary>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unfollow the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnfollowApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnfollowApiResponse?> UsersIdUnfollowOrDefaultAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUnfollowAsync(sourceUserId, targetUserId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unfollow User Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unfollow the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnfollowApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnfollowApiResponse> UsersIdUnfollowAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUnfollow(sourceUserId, targetUserId);

                FormatUsersIdUnfollow(ref sourceUserId, ref targetUserId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{source_user_id}/following/{target_user_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsource_user_id%7D", Uri.EscapeDataString(sourceUserId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btarget_user_id%7D", Uri.EscapeDataString(targetUserId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUnfollowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUnfollowApiResponse>();

                        UsersIdUnfollowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{source_user_id}/following/{target_user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUnfollowDefaultImplementation(apiResponseLocalVar, sourceUserId, targetUserId);

                        Events.ExecuteOnUsersIdUnfollow(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUnfollowDefaultImplementation(e, "/2/users/{source_user_id}/following/{target_user_id}", uriBuilderLocalVar.Path, sourceUserId, targetUserId);
                Events.ExecuteOnErrorUsersIdUnfollow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUnfollowApiResponse"/>
        /// </summary>
        public partial class UsersIdUnfollowApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUnfollowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUnfollowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUnfollowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUnfollowApiResponse(ILogger<UsersIdUnfollowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersFollowingDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersFollowingDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersFollowingDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUnmute(ref string sourceUserId, ref string targetUserId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        /// <returns></returns>
        private void ValidateUsersIdUnmute(string sourceUserId, string targetUserId)
        {
            if (sourceUserId == null)
                throw new ArgumentNullException(nameof(sourceUserId));

            if (targetUserId == null)
                throw new ArgumentNullException(nameof(targetUserId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        private void AfterUsersIdUnmuteDefaultImplementation(IUsersIdUnmuteApiResponse apiResponseLocalVar, string sourceUserId, string targetUserId)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUnmute(ref suppressDefaultLog, apiResponseLocalVar, sourceUserId, targetUserId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        partial void AfterUsersIdUnmute(ref bool suppressDefaultLog, IUsersIdUnmuteApiResponse apiResponseLocalVar, string sourceUserId, string targetUserId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        private void OnErrorUsersIdUnmuteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceUserId, string targetUserId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUnmute(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, sourceUserId, targetUserId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="sourceUserId"></param>
        /// <param name="targetUserId"></param>
        partial void OnErrorUsersIdUnmute(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string sourceUserId, string targetUserId);

        /// <summary>
        /// Unmute User by User ID Causes the source User to unmute the target User. The source User must match the User context authorizing the request
        /// </summary>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unmute the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unmute.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnmuteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnmuteApiResponse?> UsersIdUnmuteOrDefaultAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUnmuteAsync(sourceUserId, targetUserId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unmute User by User ID Causes the source User to unmute the target User. The source User must match the User context authorizing the request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceUserId">The ID of the authenticated source User that is requesting to unmute the target User.</param>
        /// <param name="targetUserId">The ID of the User that the source User is requesting to unmute.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnmuteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnmuteApiResponse> UsersIdUnmuteAsync(string sourceUserId, string targetUserId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUnmute(sourceUserId, targetUserId);

                FormatUsersIdUnmute(ref sourceUserId, ref targetUserId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{source_user_id}/muting/{target_user_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsource_user_id%7D", Uri.EscapeDataString(sourceUserId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btarget_user_id%7D", Uri.EscapeDataString(targetUserId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUnmuteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUnmuteApiResponse>();

                        UsersIdUnmuteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{source_user_id}/muting/{target_user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUnmuteDefaultImplementation(apiResponseLocalVar, sourceUserId, targetUserId);

                        Events.ExecuteOnUsersIdUnmute(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUnmuteDefaultImplementation(e, "/2/users/{source_user_id}/muting/{target_user_id}", uriBuilderLocalVar.Path, sourceUserId, targetUserId);
                Events.ExecuteOnErrorUsersIdUnmute(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUnmuteApiResponse"/>
        /// </summary>
        public partial class UsersIdUnmuteApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUnmuteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUnmuteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUnmuteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUnmuteApiResponse(ILogger<UsersIdUnmuteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MuteUserMutationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MuteUserMutationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MuteUserMutationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
