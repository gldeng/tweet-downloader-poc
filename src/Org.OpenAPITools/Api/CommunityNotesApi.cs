// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICommunityNotesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CommunityNotesApiEvents Events { get; }

        /// <summary>
        /// Community Note lookup by Post ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Community Noted specified by the requested Post ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">A single Post ID.</param>
        /// <param name="noteFields">A comma separated list of Note fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindNoteByTweetIdApiResponse"/>&gt;</returns>
        Task<IFindNoteByTweetIdApiResponse> FindNoteByTweetIdAsync(string postId, Option<List<string>> noteFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Community Note lookup by Post ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Community Noted specified by the requested Post ID.
        /// </remarks>
        /// <param name="postId">A single Post ID.</param>
        /// <param name="noteFields">A comma separated list of Note fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindNoteByTweetIdApiResponse"/>?&gt;</returns>
        Task<IFindNoteByTweetIdApiResponse?> FindNoteByTweetIdOrDefaultAsync(string postId, Option<List<string>> noteFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFindNoteByTweetIdApiResponse"/>
    /// </summary>
    public interface IFindNoteByTweetIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2NotesResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CommunityNotesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindNoteByTweetId;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindNoteByTweetId;

        internal void ExecuteOnFindNoteByTweetId(CommunityNotesApi.FindNoteByTweetIdApiResponse apiResponse)
        {
            OnFindNoteByTweetId?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindNoteByTweetId(Exception exception)
        {
            OnErrorFindNoteByTweetId?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CommunityNotesApi : ICommunityNotesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CommunityNotesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CommunityNotesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommunityNotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommunityNotesApi(ILogger<CommunityNotesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CommunityNotesApiEvents communityNotesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CommunityNotesApi>();
            HttpClient = httpClient;
            Events = communityNotesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatFindNoteByTweetId(ref string postId, Option<List<string>> noteFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postId"></param>
        /// <param name="noteFields"></param>
        /// <returns></returns>
        private void ValidateFindNoteByTweetId(string postId, Option<List<string>> noteFields)
        {
            if (postId == null)
                throw new ArgumentNullException(nameof(postId));

            if (noteFields.IsSet && noteFields.Value == null)
                throw new ArgumentNullException(nameof(noteFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postId"></param>
        /// <param name="noteFields"></param>
        private void AfterFindNoteByTweetIdDefaultImplementation(IFindNoteByTweetIdApiResponse apiResponseLocalVar, string postId, Option<List<string>> noteFields)
        {
            bool suppressDefaultLog = false;
            AfterFindNoteByTweetId(ref suppressDefaultLog, apiResponseLocalVar, postId, noteFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postId"></param>
        /// <param name="noteFields"></param>
        partial void AfterFindNoteByTweetId(ref bool suppressDefaultLog, IFindNoteByTweetIdApiResponse apiResponseLocalVar, string postId, Option<List<string>> noteFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="postId"></param>
        /// <param name="noteFields"></param>
        private void OnErrorFindNoteByTweetIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string postId, Option<List<string>> noteFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindNoteByTweetId(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, postId, noteFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="postId"></param>
        /// <param name="noteFields"></param>
        partial void OnErrorFindNoteByTweetId(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string postId, Option<List<string>> noteFields);

        /// <summary>
        /// Community Note lookup by Post ID Returns a variety of information about the Community Noted specified by the requested Post ID.
        /// </summary>
        /// <param name="postId">A single Post ID.</param>
        /// <param name="noteFields">A comma separated list of Note fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindNoteByTweetIdApiResponse"/>&gt;</returns>
        public async Task<IFindNoteByTweetIdApiResponse?> FindNoteByTweetIdOrDefaultAsync(string postId, Option<List<string>> noteFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindNoteByTweetIdAsync(postId, noteFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Community Note lookup by Post ID Returns a variety of information about the Community Noted specified by the requested Post ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">A single Post ID.</param>
        /// <param name="noteFields">A comma separated list of Note fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindNoteByTweetIdApiResponse"/>&gt;</returns>
        public async Task<IFindNoteByTweetIdApiResponse> FindNoteByTweetIdAsync(string postId, Option<List<string>> noteFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindNoteByTweetId(postId, noteFields);

                FormatFindNoteByTweetId(ref postId, noteFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/notes";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["postId"] = ClientUtils.ParameterToString(postId);

                    if (noteFields.IsSet)
                        parseQueryStringLocalVar["note.fields"] = ClientUtils.ParameterToString(noteFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindNoteByTweetIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindNoteByTweetIdApiResponse>();

                        FindNoteByTweetIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/notes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindNoteByTweetIdDefaultImplementation(apiResponseLocalVar, postId, noteFields);

                        Events.ExecuteOnFindNoteByTweetId(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindNoteByTweetIdDefaultImplementation(e, "/2/notes", uriBuilderLocalVar.Path, postId, noteFields);
                Events.ExecuteOnErrorFindNoteByTweetId(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindNoteByTweetIdApiResponse"/>
        /// </summary>
        public partial class FindNoteByTweetIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindNoteByTweetIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindNoteByTweetIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindNoteByTweetIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindNoteByTweetIdApiResponse(ILogger<FindNoteByTweetIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2NotesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2NotesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2NotesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
