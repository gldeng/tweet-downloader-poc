// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMediaUploadApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MediaUploadApiEvents Events { get; }

        /// <summary>
        /// Subtitle Create
        /// </summary>
        /// <remarks>
        /// SubtitleCreate
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSubtitlesApiResponse"/>&gt;</returns>
        Task<ICreateSubtitlesApiResponse> CreateSubtitlesAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Create
        /// </summary>
        /// <remarks>
        /// SubtitleCreate
        /// </remarks>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSubtitlesApiResponse"/>?&gt;</returns>
        Task<ICreateSubtitlesApiResponse?> CreateSubtitlesOrDefaultAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Delete
        /// </summary>
        /// <remarks>
        /// SubtitleDelete
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubtitlesApiResponse"/>&gt;</returns>
        Task<IDeleteSubtitlesApiResponse> DeleteSubtitlesAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Delete
        /// </summary>
        /// <remarks>
        /// SubtitleDelete
        /// </remarks>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubtitlesApiResponse"/>?&gt;</returns>
        Task<IDeleteSubtitlesApiResponse?> DeleteSubtitlesOrDefaultAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Metadata Create
        /// </summary>
        /// <remarks>
        /// MetadataCreate
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metadataCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMetadataCreateApiResponse"/>&gt;</returns>
        Task<IMetadataCreateApiResponse> MetadataCreateAsync(Option<MetadataCreateRequest> metadataCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Metadata Create
        /// </summary>
        /// <remarks>
        /// MetadataCreate
        /// </remarks>
        /// <param name="metadataCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMetadataCreateApiResponse"/>?&gt;</returns>
        Task<IMetadataCreateApiResponse?> MetadataCreateOrDefaultAsync(Option<MetadataCreateRequest> metadataCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Create
        /// </summary>
        /// <remarks>
        /// SubtitleCreate
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleCreateApiResponse"/>&gt;</returns>
        Task<ISubtitleCreateApiResponse> SubtitleCreateAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Create
        /// </summary>
        /// <remarks>
        /// SubtitleCreate
        /// </remarks>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleCreateApiResponse"/>?&gt;</returns>
        Task<ISubtitleCreateApiResponse?> SubtitleCreateOrDefaultAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Delete
        /// </summary>
        /// <remarks>
        /// SubtitleDelete
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleDeleteApiResponse"/>&gt;</returns>
        Task<ISubtitleDeleteApiResponse> SubtitleDeleteAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Subtitle Delete
        /// </summary>
        /// <remarks>
        /// SubtitleDelete
        /// </remarks>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleDeleteApiResponse"/>?&gt;</returns>
        Task<ISubtitleDeleteApiResponse?> SubtitleDeleteOrDefaultAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Media Upload
        /// </summary>
        /// <remarks>
        /// MediaUpload
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="totalBytes">Total number of bytes being uploaded.</param>
        /// <param name="mediaType">The MIME type of the media being uploaded. For example, video/mp4.</param>
        /// <param name="command">The type of command to use.</param>
        /// <param name="mediaCategory">A string enum value which identifies a media usecase. This identifier is used to enforce usecase specific constraints (e.g. file size, video duration) and enable advanced features. (optional)</param>
        /// <param name="additionalOwners">A comma-separated list of user IDs to set as additional owners allowed to use the returned media_id in Tweets or Cards. Up to 100 additional owners may be specified. (optional)</param>
        /// <param name="media">The file to upload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaApiResponse"/>&gt;</returns>
        Task<IUploadMediaApiResponse> UploadMediaAsync(int totalBytes, string mediaType, string command, Option<string> mediaCategory = default, Option<List<string>> additionalOwners = default, Option<System.IO.Stream> media = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Media Upload
        /// </summary>
        /// <remarks>
        /// MediaUpload
        /// </remarks>
        /// <param name="totalBytes">Total number of bytes being uploaded.</param>
        /// <param name="mediaType">The MIME type of the media being uploaded. For example, video/mp4.</param>
        /// <param name="command">The type of command to use.</param>
        /// <param name="mediaCategory">A string enum value which identifies a media usecase. This identifier is used to enforce usecase specific constraints (e.g. file size, video duration) and enable advanced features. (optional)</param>
        /// <param name="additionalOwners">A comma-separated list of user IDs to set as additional owners allowed to use the returned media_id in Tweets or Cards. Up to 100 additional owners may be specified. (optional)</param>
        /// <param name="media">The file to upload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaApiResponse"/>?&gt;</returns>
        Task<IUploadMediaApiResponse?> UploadMediaOrDefaultAsync(int totalBytes, string mediaType, string command, Option<string> mediaCategory = default, Option<List<string>> additionalOwners = default, Option<System.IO.Stream> media = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Media Upload Status
        /// </summary>
        /// <remarks>
        /// Get MediaUpload Status
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaId">Media id for the requested media upload status.</param>
        /// <param name="command">The command for the media upload request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaStatusApiResponse"/>&gt;</returns>
        Task<IUploadMediaStatusApiResponse> UploadMediaStatusAsync(int mediaId, string command, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Media Upload Status
        /// </summary>
        /// <remarks>
        /// Get MediaUpload Status
        /// </remarks>
        /// <param name="mediaId">Media id for the requested media upload status.</param>
        /// <param name="command">The command for the media upload request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaStatusApiResponse"/>?&gt;</returns>
        Task<IUploadMediaStatusApiResponse?> UploadMediaStatusOrDefaultAsync(int mediaId, string command, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateSubtitlesApiResponse"/>
    /// </summary>
    public interface ICreateSubtitlesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SubtitlesCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSubtitlesApiResponse"/>
    /// </summary>
    public interface IDeleteSubtitlesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SubtitlesDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IMetadataCreateApiResponse"/>
    /// </summary>
    public interface IMetadataCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MetadataCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISubtitleCreateApiResponse"/>
    /// </summary>
    public interface ISubtitleCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SubtitlesCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISubtitleDeleteApiResponse"/>
    /// </summary>
    public interface ISubtitleDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SubtitlesDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUploadMediaApiResponse"/>
    /// </summary>
    public interface IUploadMediaApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MediaUploadStatusResponse?>, IAccepted<Org.OpenAPITools.Model.MediaUploadInitResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUploadMediaStatusApiResponse"/>
    /// </summary>
    public interface IUploadMediaStatusApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MediaUploadStatusResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MediaUploadApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateSubtitles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateSubtitles;

        internal void ExecuteOnCreateSubtitles(MediaUploadApi.CreateSubtitlesApiResponse apiResponse)
        {
            OnCreateSubtitles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSubtitles(Exception exception)
        {
            OnErrorCreateSubtitles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSubtitles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSubtitles;

        internal void ExecuteOnDeleteSubtitles(MediaUploadApi.DeleteSubtitlesApiResponse apiResponse)
        {
            OnDeleteSubtitles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSubtitles(Exception exception)
        {
            OnErrorDeleteSubtitles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnMetadataCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorMetadataCreate;

        internal void ExecuteOnMetadataCreate(MediaUploadApi.MetadataCreateApiResponse apiResponse)
        {
            OnMetadataCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorMetadataCreate(Exception exception)
        {
            OnErrorMetadataCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubtitleCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubtitleCreate;

        internal void ExecuteOnSubtitleCreate(MediaUploadApi.SubtitleCreateApiResponse apiResponse)
        {
            OnSubtitleCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubtitleCreate(Exception exception)
        {
            OnErrorSubtitleCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSubtitleDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSubtitleDelete;

        internal void ExecuteOnSubtitleDelete(MediaUploadApi.SubtitleDeleteApiResponse apiResponse)
        {
            OnSubtitleDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSubtitleDelete(Exception exception)
        {
            OnErrorSubtitleDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadMedia;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadMedia;

        internal void ExecuteOnUploadMedia(MediaUploadApi.UploadMediaApiResponse apiResponse)
        {
            OnUploadMedia?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadMedia(Exception exception)
        {
            OnErrorUploadMedia?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadMediaStatus;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadMediaStatus;

        internal void ExecuteOnUploadMediaStatus(MediaUploadApi.UploadMediaStatusApiResponse apiResponse)
        {
            OnUploadMediaStatus?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadMediaStatus(Exception exception)
        {
            OnErrorUploadMediaStatus?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MediaUploadApi : IMediaUploadApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MediaUploadApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MediaUploadApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaUploadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaUploadApi(ILogger<MediaUploadApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MediaUploadApiEvents mediaUploadApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MediaUploadApi>();
            HttpClient = httpClient;
            Events = mediaUploadApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateSubtitles(Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subtitlesCreateRequest"></param>
        /// <returns></returns>
        private void ValidateCreateSubtitles(Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            if (subtitlesCreateRequest.IsSet && subtitlesCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(subtitlesCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        private void AfterCreateSubtitlesDefaultImplementation(ICreateSubtitlesApiResponse apiResponseLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateSubtitles(ref suppressDefaultLog, apiResponseLocalVar, subtitlesCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        partial void AfterCreateSubtitles(ref bool suppressDefaultLog, ICreateSubtitlesApiResponse apiResponseLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        private void OnErrorCreateSubtitlesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSubtitles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, subtitlesCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        partial void OnErrorCreateSubtitles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Subtitle Create SubtitleCreate
        /// </summary>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSubtitlesApiResponse"/>&gt;</returns>
        public async Task<ICreateSubtitlesApiResponse?> CreateSubtitlesOrDefaultAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSubtitlesAsync(subtitlesCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Subtitle Create SubtitleCreate
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSubtitlesApiResponse"/>&gt;</returns>
        public async Task<ICreateSubtitlesApiResponse> CreateSubtitlesAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSubtitles(subtitlesCreateRequest);

                FormatCreateSubtitles(subtitlesCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/subtitles";

                    if (subtitlesCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (subtitlesCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(subtitlesCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSubtitlesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSubtitlesApiResponse>();

                        CreateSubtitlesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/subtitles", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSubtitlesDefaultImplementation(apiResponseLocalVar, subtitlesCreateRequest);

                        Events.ExecuteOnCreateSubtitles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSubtitlesDefaultImplementation(e, "/2/media/subtitles", uriBuilderLocalVar.Path, subtitlesCreateRequest);
                Events.ExecuteOnErrorCreateSubtitles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSubtitlesApiResponse"/>
        /// </summary>
        public partial class CreateSubtitlesApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateSubtitlesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSubtitlesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSubtitlesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSubtitlesApiResponse(ILogger<CreateSubtitlesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubtitlesCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubtitlesCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SubtitlesCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSubtitles(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subtitlesDeleteRequest"></param>
        /// <returns></returns>
        private void ValidateDeleteSubtitles(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            if (subtitlesDeleteRequest.IsSet && subtitlesDeleteRequest.Value == null)
                throw new ArgumentNullException(nameof(subtitlesDeleteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        private void AfterDeleteSubtitlesDefaultImplementation(IDeleteSubtitlesApiResponse apiResponseLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSubtitles(ref suppressDefaultLog, apiResponseLocalVar, subtitlesDeleteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        partial void AfterDeleteSubtitles(ref bool suppressDefaultLog, IDeleteSubtitlesApiResponse apiResponseLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        private void OnErrorDeleteSubtitlesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSubtitles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, subtitlesDeleteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        partial void OnErrorDeleteSubtitles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Subtitle Delete SubtitleDelete
        /// </summary>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubtitlesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSubtitlesApiResponse?> DeleteSubtitlesOrDefaultAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSubtitlesAsync(subtitlesDeleteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Subtitle Delete SubtitleDelete
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSubtitlesApiResponse"/>&gt;</returns>
        public async Task<IDeleteSubtitlesApiResponse> DeleteSubtitlesAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSubtitles(subtitlesDeleteRequest);

                FormatDeleteSubtitles(subtitlesDeleteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/subtitles";

                    if (subtitlesDeleteRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (subtitlesDeleteRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(subtitlesDeleteRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSubtitlesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSubtitlesApiResponse>();

                        DeleteSubtitlesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/subtitles", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSubtitlesDefaultImplementation(apiResponseLocalVar, subtitlesDeleteRequest);

                        Events.ExecuteOnDeleteSubtitles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSubtitlesDefaultImplementation(e, "/2/media/subtitles", uriBuilderLocalVar.Path, subtitlesDeleteRequest);
                Events.ExecuteOnErrorDeleteSubtitles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSubtitlesApiResponse"/>
        /// </summary>
        public partial class DeleteSubtitlesApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteSubtitlesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSubtitlesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSubtitlesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSubtitlesApiResponse(ILogger<DeleteSubtitlesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubtitlesDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubtitlesDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SubtitlesDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatMetadataCreate(Option<MetadataCreateRequest> metadataCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="metadataCreateRequest"></param>
        /// <returns></returns>
        private void ValidateMetadataCreate(Option<MetadataCreateRequest> metadataCreateRequest)
        {
            if (metadataCreateRequest.IsSet && metadataCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(metadataCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metadataCreateRequest"></param>
        private void AfterMetadataCreateDefaultImplementation(IMetadataCreateApiResponse apiResponseLocalVar, Option<MetadataCreateRequest> metadataCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterMetadataCreate(ref suppressDefaultLog, apiResponseLocalVar, metadataCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metadataCreateRequest"></param>
        partial void AfterMetadataCreate(ref bool suppressDefaultLog, IMetadataCreateApiResponse apiResponseLocalVar, Option<MetadataCreateRequest> metadataCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metadataCreateRequest"></param>
        private void OnErrorMetadataCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<MetadataCreateRequest> metadataCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorMetadataCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, metadataCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metadataCreateRequest"></param>
        partial void OnErrorMetadataCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<MetadataCreateRequest> metadataCreateRequest);

        /// <summary>
        /// Metadata Create MetadataCreate
        /// </summary>
        /// <param name="metadataCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMetadataCreateApiResponse"/>&gt;</returns>
        public async Task<IMetadataCreateApiResponse?> MetadataCreateOrDefaultAsync(Option<MetadataCreateRequest> metadataCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await MetadataCreateAsync(metadataCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Metadata Create MetadataCreate
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metadataCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IMetadataCreateApiResponse"/>&gt;</returns>
        public async Task<IMetadataCreateApiResponse> MetadataCreateAsync(Option<MetadataCreateRequest> metadataCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateMetadataCreate(metadataCreateRequest);

                FormatMetadataCreate(metadataCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/metadata/create";

                    if (metadataCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (metadataCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(metadataCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<MetadataCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<MetadataCreateApiResponse>();

                        MetadataCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/metadata/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterMetadataCreateDefaultImplementation(apiResponseLocalVar, metadataCreateRequest);

                        Events.ExecuteOnMetadataCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMetadataCreateDefaultImplementation(e, "/2/media/metadata/create", uriBuilderLocalVar.Path, metadataCreateRequest);
                Events.ExecuteOnErrorMetadataCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="MetadataCreateApiResponse"/>
        /// </summary>
        public partial class MetadataCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IMetadataCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<MetadataCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="MetadataCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public MetadataCreateApiResponse(ILogger<MetadataCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MetadataCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MetadataCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MetadataCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubtitleCreate(Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subtitlesCreateRequest"></param>
        /// <returns></returns>
        private void ValidateSubtitleCreate(Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            if (subtitlesCreateRequest.IsSet && subtitlesCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(subtitlesCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        private void AfterSubtitleCreateDefaultImplementation(ISubtitleCreateApiResponse apiResponseLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterSubtitleCreate(ref suppressDefaultLog, apiResponseLocalVar, subtitlesCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        partial void AfterSubtitleCreate(ref bool suppressDefaultLog, ISubtitleCreateApiResponse apiResponseLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        private void OnErrorSubtitleCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubtitleCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, subtitlesCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesCreateRequest"></param>
        partial void OnErrorSubtitleCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesCreateRequest> subtitlesCreateRequest);

        /// <summary>
        /// Subtitle Create SubtitleCreate
        /// </summary>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleCreateApiResponse"/>&gt;</returns>
        public async Task<ISubtitleCreateApiResponse?> SubtitleCreateOrDefaultAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubtitleCreateAsync(subtitlesCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Subtitle Create SubtitleCreate
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleCreateApiResponse"/>&gt;</returns>
        public async Task<ISubtitleCreateApiResponse> SubtitleCreateAsync(Option<SubtitlesCreateRequest> subtitlesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubtitleCreate(subtitlesCreateRequest);

                FormatSubtitleCreate(subtitlesCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/subtitles/create";

                    if (subtitlesCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (subtitlesCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(subtitlesCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SubtitleCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubtitleCreateApiResponse>();

                        SubtitleCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/subtitles/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSubtitleCreateDefaultImplementation(apiResponseLocalVar, subtitlesCreateRequest);

                        Events.ExecuteOnSubtitleCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubtitleCreateDefaultImplementation(e, "/2/media/subtitles/create", uriBuilderLocalVar.Path, subtitlesCreateRequest);
                Events.ExecuteOnErrorSubtitleCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubtitleCreateApiResponse"/>
        /// </summary>
        public partial class SubtitleCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, ISubtitleCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubtitleCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubtitleCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubtitleCreateApiResponse(ILogger<SubtitleCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubtitlesCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubtitlesCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SubtitlesCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSubtitleDelete(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="subtitlesDeleteRequest"></param>
        /// <returns></returns>
        private void ValidateSubtitleDelete(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            if (subtitlesDeleteRequest.IsSet && subtitlesDeleteRequest.Value == null)
                throw new ArgumentNullException(nameof(subtitlesDeleteRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        private void AfterSubtitleDeleteDefaultImplementation(ISubtitleDeleteApiResponse apiResponseLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            bool suppressDefaultLog = false;
            AfterSubtitleDelete(ref suppressDefaultLog, apiResponseLocalVar, subtitlesDeleteRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        partial void AfterSubtitleDelete(ref bool suppressDefaultLog, ISubtitleDeleteApiResponse apiResponseLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        private void OnErrorSubtitleDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSubtitleDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, subtitlesDeleteRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="subtitlesDeleteRequest"></param>
        partial void OnErrorSubtitleDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<SubtitlesDeleteRequest> subtitlesDeleteRequest);

        /// <summary>
        /// Subtitle Delete SubtitleDelete
        /// </summary>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleDeleteApiResponse"/>&gt;</returns>
        public async Task<ISubtitleDeleteApiResponse?> SubtitleDeleteOrDefaultAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SubtitleDeleteAsync(subtitlesDeleteRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Subtitle Delete SubtitleDelete
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="subtitlesDeleteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISubtitleDeleteApiResponse"/>&gt;</returns>
        public async Task<ISubtitleDeleteApiResponse> SubtitleDeleteAsync(Option<SubtitlesDeleteRequest> subtitlesDeleteRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSubtitleDelete(subtitlesDeleteRequest);

                FormatSubtitleDelete(subtitlesDeleteRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/subtitles/delete";

                    if (subtitlesDeleteRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (subtitlesDeleteRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(subtitlesDeleteRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SubtitleDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SubtitleDeleteApiResponse>();

                        SubtitleDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/subtitles/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSubtitleDeleteDefaultImplementation(apiResponseLocalVar, subtitlesDeleteRequest);

                        Events.ExecuteOnSubtitleDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSubtitleDeleteDefaultImplementation(e, "/2/media/subtitles/delete", uriBuilderLocalVar.Path, subtitlesDeleteRequest);
                Events.ExecuteOnErrorSubtitleDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SubtitleDeleteApiResponse"/>
        /// </summary>
        public partial class SubtitleDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, ISubtitleDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SubtitleDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SubtitleDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SubtitleDeleteApiResponse(ILogger<SubtitleDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SubtitlesDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SubtitlesDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SubtitlesDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadMedia(ref int totalBytes, ref string mediaType, ref string command, ref Option<string> mediaCategory, Option<List<string>> additionalOwners, ref Option<System.IO.Stream> media);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="mediaType"></param>
        /// <param name="command"></param>
        /// <param name="mediaCategory"></param>
        /// <param name="additionalOwners"></param>
        /// <param name="media"></param>
        /// <returns></returns>
        private void ValidateUploadMedia(string mediaType, string command, Option<string> mediaCategory, Option<List<string>> additionalOwners, Option<System.IO.Stream> media)
        {
            if (mediaType == null)
                throw new ArgumentNullException(nameof(mediaType));

            if (command == null)
                throw new ArgumentNullException(nameof(command));

            if (mediaCategory.IsSet && mediaCategory.Value == null)
                throw new ArgumentNullException(nameof(mediaCategory));

            if (additionalOwners.IsSet && additionalOwners.Value == null)
                throw new ArgumentNullException(nameof(additionalOwners));

            if (media.IsSet && media.Value == null)
                throw new ArgumentNullException(nameof(media));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="totalBytes"></param>
        /// <param name="mediaType"></param>
        /// <param name="command"></param>
        /// <param name="mediaCategory"></param>
        /// <param name="additionalOwners"></param>
        /// <param name="media"></param>
        private void AfterUploadMediaDefaultImplementation(IUploadMediaApiResponse apiResponseLocalVar, int totalBytes, string mediaType, string command, Option<string> mediaCategory, Option<List<string>> additionalOwners, Option<System.IO.Stream> media)
        {
            bool suppressDefaultLog = false;
            AfterUploadMedia(ref suppressDefaultLog, apiResponseLocalVar, totalBytes, mediaType, command, mediaCategory, additionalOwners, media);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="totalBytes"></param>
        /// <param name="mediaType"></param>
        /// <param name="command"></param>
        /// <param name="mediaCategory"></param>
        /// <param name="additionalOwners"></param>
        /// <param name="media"></param>
        partial void AfterUploadMedia(ref bool suppressDefaultLog, IUploadMediaApiResponse apiResponseLocalVar, int totalBytes, string mediaType, string command, Option<string> mediaCategory, Option<List<string>> additionalOwners, Option<System.IO.Stream> media);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="totalBytes"></param>
        /// <param name="mediaType"></param>
        /// <param name="command"></param>
        /// <param name="mediaCategory"></param>
        /// <param name="additionalOwners"></param>
        /// <param name="media"></param>
        private void OnErrorUploadMediaDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int totalBytes, string mediaType, string command, Option<string> mediaCategory, Option<List<string>> additionalOwners, Option<System.IO.Stream> media)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadMedia(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, totalBytes, mediaType, command, mediaCategory, additionalOwners, media);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="totalBytes"></param>
        /// <param name="mediaType"></param>
        /// <param name="command"></param>
        /// <param name="mediaCategory"></param>
        /// <param name="additionalOwners"></param>
        /// <param name="media"></param>
        partial void OnErrorUploadMedia(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int totalBytes, string mediaType, string command, Option<string> mediaCategory, Option<List<string>> additionalOwners, Option<System.IO.Stream> media);

        /// <summary>
        /// Media Upload MediaUpload
        /// </summary>
        /// <param name="totalBytes">Total number of bytes being uploaded.</param>
        /// <param name="mediaType">The MIME type of the media being uploaded. For example, video/mp4.</param>
        /// <param name="command">The type of command to use.</param>
        /// <param name="mediaCategory">A string enum value which identifies a media usecase. This identifier is used to enforce usecase specific constraints (e.g. file size, video duration) and enable advanced features. (optional)</param>
        /// <param name="additionalOwners">A comma-separated list of user IDs to set as additional owners allowed to use the returned media_id in Tweets or Cards. Up to 100 additional owners may be specified. (optional)</param>
        /// <param name="media">The file to upload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaApiResponse"/>&gt;</returns>
        public async Task<IUploadMediaApiResponse?> UploadMediaOrDefaultAsync(int totalBytes, string mediaType, string command, Option<string> mediaCategory = default, Option<List<string>> additionalOwners = default, Option<System.IO.Stream> media = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadMediaAsync(totalBytes, mediaType, command, mediaCategory, additionalOwners, media, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Media Upload MediaUpload
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="totalBytes">Total number of bytes being uploaded.</param>
        /// <param name="mediaType">The MIME type of the media being uploaded. For example, video/mp4.</param>
        /// <param name="command">The type of command to use.</param>
        /// <param name="mediaCategory">A string enum value which identifies a media usecase. This identifier is used to enforce usecase specific constraints (e.g. file size, video duration) and enable advanced features. (optional)</param>
        /// <param name="additionalOwners">A comma-separated list of user IDs to set as additional owners allowed to use the returned media_id in Tweets or Cards. Up to 100 additional owners may be specified. (optional)</param>
        /// <param name="media">The file to upload. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaApiResponse"/>&gt;</returns>
        public async Task<IUploadMediaApiResponse> UploadMediaAsync(int totalBytes, string mediaType, string command, Option<string> mediaCategory = default, Option<List<string>> additionalOwners = default, Option<System.IO.Stream> media = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadMedia(mediaType, command, mediaCategory, additionalOwners, media);

                FormatUploadMedia(ref totalBytes, ref mediaType, ref command, ref mediaCategory, additionalOwners, ref media);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/upload";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["total_bytes"] = ClientUtils.ParameterToString(totalBytes);
                    parseQueryStringLocalVar["media_type"] = ClientUtils.ParameterToString(mediaType);
                    parseQueryStringLocalVar["command"] = ClientUtils.ParameterToString(command);

                    if (mediaCategory.IsSet)
                        parseQueryStringLocalVar["media_category"] = ClientUtils.ParameterToString(mediaCategory.Value);

                    if (additionalOwners.IsSet)
                        parseQueryStringLocalVar["additional_owners"] = ClientUtils.ParameterToString(additionalOwners.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (media.IsSet)
                        multipartContentLocalVar.Add(new StreamContent(media.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadMediaApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadMediaApiResponse>();

                        UploadMediaApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/upload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadMediaDefaultImplementation(apiResponseLocalVar, totalBytes, mediaType, command, mediaCategory, additionalOwners, media);

                        Events.ExecuteOnUploadMedia(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadMediaDefaultImplementation(e, "/2/media/upload", uriBuilderLocalVar.Path, totalBytes, mediaType, command, mediaCategory, additionalOwners, media);
                Events.ExecuteOnErrorUploadMedia(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadMediaApiResponse"/>
        /// </summary>
        public partial class UploadMediaApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadMediaApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadMediaApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadMediaApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadMediaApiResponse(ILogger<UploadMediaApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MediaUploadStatusResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MediaUploadStatusResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MediaUploadStatusResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MediaUploadInitResponse? Accepted()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsAccepted
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MediaUploadInitResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 202 Accepted and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryAccepted([NotNullWhen(true)]out Org.OpenAPITools.Model.MediaUploadInitResponse? result)
            {
                result = null;

                try
                {
                    result = Accepted();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)202);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsAccepted && !IsNoContent;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadMediaStatus(ref int mediaId, ref string command);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="command"></param>
        /// <returns></returns>
        private void ValidateUploadMediaStatus(string command)
        {
            if (command == null)
                throw new ArgumentNullException(nameof(command));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mediaId"></param>
        /// <param name="command"></param>
        private void AfterUploadMediaStatusDefaultImplementation(IUploadMediaStatusApiResponse apiResponseLocalVar, int mediaId, string command)
        {
            bool suppressDefaultLog = false;
            AfterUploadMediaStatus(ref suppressDefaultLog, apiResponseLocalVar, mediaId, command);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="mediaId"></param>
        /// <param name="command"></param>
        partial void AfterUploadMediaStatus(ref bool suppressDefaultLog, IUploadMediaStatusApiResponse apiResponseLocalVar, int mediaId, string command);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mediaId"></param>
        /// <param name="command"></param>
        private void OnErrorUploadMediaStatusDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int mediaId, string command)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadMediaStatus(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, mediaId, command);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="mediaId"></param>
        /// <param name="command"></param>
        partial void OnErrorUploadMediaStatus(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int mediaId, string command);

        /// <summary>
        /// Media Upload Status Get MediaUpload Status
        /// </summary>
        /// <param name="mediaId">Media id for the requested media upload status.</param>
        /// <param name="command">The command for the media upload request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaStatusApiResponse"/>&gt;</returns>
        public async Task<IUploadMediaStatusApiResponse?> UploadMediaStatusOrDefaultAsync(int mediaId, string command, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadMediaStatusAsync(mediaId, command, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Media Upload Status Get MediaUpload Status
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaId">Media id for the requested media upload status.</param>
        /// <param name="command">The command for the media upload request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadMediaStatusApiResponse"/>&gt;</returns>
        public async Task<IUploadMediaStatusApiResponse> UploadMediaStatusAsync(int mediaId, string command, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadMediaStatus(command);

                FormatUploadMediaStatus(ref mediaId, ref command);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/media/upload";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["media_id"] = ClientUtils.ParameterToString(mediaId);
                    parseQueryStringLocalVar["command"] = ClientUtils.ParameterToString(command);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadMediaStatusApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadMediaStatusApiResponse>();

                        UploadMediaStatusApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/media/upload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadMediaStatusDefaultImplementation(apiResponseLocalVar, mediaId, command);

                        Events.ExecuteOnUploadMediaStatus(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadMediaStatusDefaultImplementation(e, "/2/media/upload", uriBuilderLocalVar.Path, mediaId, command);
                Events.ExecuteOnErrorUploadMediaStatus(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadMediaStatusApiResponse"/>
        /// </summary>
        public partial class UploadMediaStatusApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadMediaStatusApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadMediaStatusApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadMediaStatusApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadMediaStatusApiResponse(ILogger<UploadMediaStatusApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MediaUploadStatusResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MediaUploadStatusResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MediaUploadStatusResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
