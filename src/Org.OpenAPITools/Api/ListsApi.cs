// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IListsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ListsApiEvents Events { get; }

        /// <summary>
        /// Get a User&#39;s List Memberships
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s List Memberships.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserListMembershipsApiResponse"/>&gt;</returns>
        Task<IGetUserListMembershipsApiResponse> GetUserListMembershipsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a User&#39;s List Memberships
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s List Memberships.
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserListMembershipsApiResponse"/>?&gt;</returns>
        Task<IGetUserListMembershipsApiResponse?> GetUserListMembershipsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a List member
        /// </summary>
        /// <remarks>
        /// Causes a User to become a member of a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List for which to add a member.</param>
        /// <param name="listAddUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAddMemberApiResponse"/>&gt;</returns>
        Task<IListAddMemberApiResponse> ListAddMemberAsync(string id, Option<ListAddUserRequest> listAddUserRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a List member
        /// </summary>
        /// <remarks>
        /// Causes a User to become a member of a List.
        /// </remarks>
        /// <param name="id">The ID of the List for which to add a member.</param>
        /// <param name="listAddUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAddMemberApiResponse"/>?&gt;</returns>
        Task<IListAddMemberApiResponse?> ListAddMemberOrDefaultAsync(string id, Option<ListAddUserRequest> listAddUserRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create List
        /// </summary>
        /// <remarks>
        /// Creates a new List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdCreateApiResponse"/>&gt;</returns>
        Task<IListIdCreateApiResponse> ListIdCreateAsync(Option<ListCreateRequest> listCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create List
        /// </summary>
        /// <remarks>
        /// Creates a new List.
        /// </remarks>
        /// <param name="listCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdCreateApiResponse"/>?&gt;</returns>
        Task<IListIdCreateApiResponse?> ListIdCreateOrDefaultAsync(Option<ListCreateRequest> listCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Delete a List that you own.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdDeleteApiResponse"/>&gt;</returns>
        Task<IListIdDeleteApiResponse> ListIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete List
        /// </summary>
        /// <remarks>
        /// Delete a List that you own.
        /// </remarks>
        /// <param name="id">The ID of the List to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdDeleteApiResponse"/>?&gt;</returns>
        Task<IListIdDeleteApiResponse?> ListIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List lookup by List ID.
        /// </summary>
        /// <remarks>
        /// Returns a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdGetApiResponse"/>&gt;</returns>
        Task<IListIdGetApiResponse> ListIdGetAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List lookup by List ID.
        /// </summary>
        /// <remarks>
        /// Returns a List.
        /// </remarks>
        /// <param name="id">The ID of the List.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdGetApiResponse"/>?&gt;</returns>
        Task<IListIdGetApiResponse?> ListIdGetOrDefaultAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update List.
        /// </summary>
        /// <remarks>
        /// Update a List that you own.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to modify.</param>
        /// <param name="listUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdUpdateApiResponse"/>&gt;</returns>
        Task<IListIdUpdateApiResponse> ListIdUpdateAsync(string id, Option<ListUpdateRequest> listUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update List.
        /// </summary>
        /// <remarks>
        /// Update a List that you own.
        /// </remarks>
        /// <param name="id">The ID of the List to modify.</param>
        /// <param name="listUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdUpdateApiResponse"/>?&gt;</returns>
        Task<IListIdUpdateApiResponse?> ListIdUpdateOrDefaultAsync(string id, Option<ListUpdateRequest> listUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a List member
        /// </summary>
        /// <remarks>
        /// Causes a User to be removed from the members of a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to remove a member.</param>
        /// <param name="userId">The ID of User that will be removed from the List.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListRemoveMemberApiResponse"/>&gt;</returns>
        Task<IListRemoveMemberApiResponse> ListRemoveMemberAsync(string id, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a List member
        /// </summary>
        /// <remarks>
        /// Causes a User to be removed from the members of a List.
        /// </remarks>
        /// <param name="id">The ID of the List to remove a member.</param>
        /// <param name="userId">The ID of User that will be removed from the List.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListRemoveMemberApiResponse"/>?&gt;</returns>
        Task<IListRemoveMemberApiResponse?> ListRemoveMemberOrDefaultAsync(string id, string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Follow a List
        /// </summary>
        /// <remarks>
        /// Causes a User to follow a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will follow the List.</param>
        /// <param name="listFollowedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserFollowApiResponse"/>&gt;</returns>
        Task<IListUserFollowApiResponse> ListUserFollowAsync(string id, Option<ListFollowedRequest> listFollowedRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Follow a List
        /// </summary>
        /// <remarks>
        /// Causes a User to follow a List.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that will follow the List.</param>
        /// <param name="listFollowedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserFollowApiResponse"/>?&gt;</returns>
        Task<IListUserFollowApiResponse?> ListUserFollowOrDefaultAsync(string id, Option<ListFollowedRequest> listFollowedRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a User&#39;s Owned Lists.
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s Owned Lists.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserOwnedListsApiResponse"/>&gt;</returns>
        Task<IListUserOwnedListsApiResponse> ListUserOwnedListsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a User&#39;s Owned Lists.
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s Owned Lists.
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserOwnedListsApiResponse"/>?&gt;</returns>
        Task<IListUserOwnedListsApiResponse?> ListUserOwnedListsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pin a List
        /// </summary>
        /// <remarks>
        /// Causes a User to pin a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will pin the List.</param>
        /// <param name="listPinnedRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinApiResponse"/>&gt;</returns>
        Task<IListUserPinApiResponse> ListUserPinAsync(string id, ListPinnedRequest listPinnedRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pin a List
        /// </summary>
        /// <remarks>
        /// Causes a User to pin a List.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that will pin the List.</param>
        /// <param name="listPinnedRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinApiResponse"/>?&gt;</returns>
        Task<IListUserPinApiResponse?> ListUserPinOrDefaultAsync(string id, ListPinnedRequest listPinnedRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a User&#39;s Pinned Lists
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s Pinned Lists.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinnedListsApiResponse"/>&gt;</returns>
        Task<IListUserPinnedListsApiResponse> ListUserPinnedListsAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a User&#39;s Pinned Lists
        /// </summary>
        /// <remarks>
        /// Get a User&#39;s Pinned Lists.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinnedListsApiResponse"/>?&gt;</returns>
        Task<IListUserPinnedListsApiResponse?> ListUserPinnedListsOrDefaultAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unfollow a List
        /// </summary>
        /// <remarks>
        /// Causes a User to unfollow a List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will unfollow the List.</param>
        /// <param name="listId">The ID of the List to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnfollowApiResponse"/>&gt;</returns>
        Task<IListUserUnfollowApiResponse> ListUserUnfollowAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unfollow a List
        /// </summary>
        /// <remarks>
        /// Causes a User to unfollow a List.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that will unfollow the List.</param>
        /// <param name="listId">The ID of the List to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnfollowApiResponse"/>?&gt;</returns>
        Task<IListUserUnfollowApiResponse?> ListUserUnfollowOrDefaultAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unpin a List
        /// </summary>
        /// <remarks>
        /// Causes a User to remove a pinned List.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listId">The ID of the List to unpin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnpinApiResponse"/>&gt;</returns>
        Task<IListUserUnpinApiResponse> ListUserUnpinAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unpin a List
        /// </summary>
        /// <remarks>
        /// Causes a User to remove a pinned List.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listId">The ID of the List to unpin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnpinApiResponse"/>?&gt;</returns>
        Task<IListUserUnpinApiResponse?> ListUserUnpinOrDefaultAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User&#39;s Followed Lists
        /// </summary>
        /// <remarks>
        /// Returns a User&#39;s followed Lists.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowedListsApiResponse"/>&gt;</returns>
        Task<IUserFollowedListsApiResponse> UserFollowedListsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User&#39;s Followed Lists
        /// </summary>
        /// <remarks>
        /// Returns a User&#39;s followed Lists.
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowedListsApiResponse"/>?&gt;</returns>
        Task<IUserFollowedListsApiResponse?> UserFollowedListsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetUserListMembershipsApiResponse"/>
    /// </summary>
    public interface IGetUserListMembershipsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdListMembershipsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListAddMemberApiResponse"/>
    /// </summary>
    public interface IListAddMemberApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListMutateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListIdCreateApiResponse"/>
    /// </summary>
    public interface IListIdCreateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListIdDeleteApiResponse"/>
    /// </summary>
    public interface IListIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListIdGetApiResponse"/>
    /// </summary>
    public interface IListIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ListsIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListIdUpdateApiResponse"/>
    /// </summary>
    public interface IListIdUpdateApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListUpdateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListRemoveMemberApiResponse"/>
    /// </summary>
    public interface IListRemoveMemberApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListMutateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserFollowApiResponse"/>
    /// </summary>
    public interface IListUserFollowApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListFollowedResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserOwnedListsApiResponse"/>
    /// </summary>
    public interface IListUserOwnedListsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdOwnedListsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserPinApiResponse"/>
    /// </summary>
    public interface IListUserPinApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListPinnedResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserPinnedListsApiResponse"/>
    /// </summary>
    public interface IListUserPinnedListsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdPinnedListsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserUnfollowApiResponse"/>
    /// </summary>
    public interface IListUserUnfollowApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListFollowedResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListUserUnpinApiResponse"/>
    /// </summary>
    public interface IListUserUnpinApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ListUnpinResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUserFollowedListsApiResponse"/>
    /// </summary>
    public interface IUserFollowedListsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdFollowedListsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ListsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserListMemberships;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserListMemberships;

        internal void ExecuteOnGetUserListMemberships(ListsApi.GetUserListMembershipsApiResponse apiResponse)
        {
            OnGetUserListMemberships?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserListMemberships(Exception exception)
        {
            OnErrorGetUserListMemberships?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListAddMember;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListAddMember;

        internal void ExecuteOnListAddMember(ListsApi.ListAddMemberApiResponse apiResponse)
        {
            OnListAddMember?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAddMember(Exception exception)
        {
            OnErrorListAddMember?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIdCreate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIdCreate;

        internal void ExecuteOnListIdCreate(ListsApi.ListIdCreateApiResponse apiResponse)
        {
            OnListIdCreate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIdCreate(Exception exception)
        {
            OnErrorListIdCreate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIdDelete;

        internal void ExecuteOnListIdDelete(ListsApi.ListIdDeleteApiResponse apiResponse)
        {
            OnListIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIdDelete(Exception exception)
        {
            OnErrorListIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIdGet;

        internal void ExecuteOnListIdGet(ListsApi.ListIdGetApiResponse apiResponse)
        {
            OnListIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIdGet(Exception exception)
        {
            OnErrorListIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListIdUpdate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListIdUpdate;

        internal void ExecuteOnListIdUpdate(ListsApi.ListIdUpdateApiResponse apiResponse)
        {
            OnListIdUpdate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListIdUpdate(Exception exception)
        {
            OnErrorListIdUpdate?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListRemoveMember;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListRemoveMember;

        internal void ExecuteOnListRemoveMember(ListsApi.ListRemoveMemberApiResponse apiResponse)
        {
            OnListRemoveMember?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListRemoveMember(Exception exception)
        {
            OnErrorListRemoveMember?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserFollow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserFollow;

        internal void ExecuteOnListUserFollow(ListsApi.ListUserFollowApiResponse apiResponse)
        {
            OnListUserFollow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserFollow(Exception exception)
        {
            OnErrorListUserFollow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserOwnedLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserOwnedLists;

        internal void ExecuteOnListUserOwnedLists(ListsApi.ListUserOwnedListsApiResponse apiResponse)
        {
            OnListUserOwnedLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserOwnedLists(Exception exception)
        {
            OnErrorListUserOwnedLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserPin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserPin;

        internal void ExecuteOnListUserPin(ListsApi.ListUserPinApiResponse apiResponse)
        {
            OnListUserPin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserPin(Exception exception)
        {
            OnErrorListUserPin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserPinnedLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserPinnedLists;

        internal void ExecuteOnListUserPinnedLists(ListsApi.ListUserPinnedListsApiResponse apiResponse)
        {
            OnListUserPinnedLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserPinnedLists(Exception exception)
        {
            OnErrorListUserPinnedLists?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserUnfollow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserUnfollow;

        internal void ExecuteOnListUserUnfollow(ListsApi.ListUserUnfollowApiResponse apiResponse)
        {
            OnListUserUnfollow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserUnfollow(Exception exception)
        {
            OnErrorListUserUnfollow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListUserUnpin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListUserUnpin;

        internal void ExecuteOnListUserUnpin(ListsApi.ListUserUnpinApiResponse apiResponse)
        {
            OnListUserUnpin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListUserUnpin(Exception exception)
        {
            OnErrorListUserUnpin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUserFollowedLists;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUserFollowedLists;

        internal void ExecuteOnUserFollowedLists(ListsApi.UserFollowedListsApiResponse apiResponse)
        {
            OnUserFollowedLists?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUserFollowedLists(Exception exception)
        {
            OnErrorUserFollowedLists?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ListsApi : IListsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ListsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ListsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(ILogger<ListsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ListsApiEvents listsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ListsApi>();
            HttpClient = httpClient;
            Events = listsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetUserListMemberships(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <returns></returns>
        private void ValidateGetUserListMemberships(string id, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (listFields.IsSet && listFields.Value == null)
                throw new ArgumentNullException(nameof(listFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void AfterGetUserListMembershipsDefaultImplementation(IGetUserListMembershipsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLog = false;
            AfterGetUserListMemberships(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void AfterGetUserListMemberships(ref bool suppressDefaultLog, IGetUserListMembershipsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void OnErrorGetUserListMembershipsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserListMemberships(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void OnErrorGetUserListMemberships(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Get a User&#39;s List Memberships Get a User&#39;s List Memberships.
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserListMembershipsApiResponse"/>&gt;</returns>
        public async Task<IGetUserListMembershipsApiResponse?> GetUserListMembershipsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserListMembershipsAsync(id, maxResults, paginationToken, listFields, expansions, userFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a User&#39;s List Memberships Get a User&#39;s List Memberships.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserListMembershipsApiResponse"/>&gt;</returns>
        public async Task<IGetUserListMembershipsApiResponse> GetUserListMembershipsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserListMemberships(id, paginationToken, listFields, expansions, userFields);

                FormatGetUserListMemberships(ref id, ref maxResults, ref paginationToken, listFields, expansions, userFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/list_memberships";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (listFields.IsSet)
                        parseQueryStringLocalVar["list.fields"] = ClientUtils.ParameterToString(listFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserListMembershipsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserListMembershipsApiResponse>();

                        GetUserListMembershipsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/list_memberships", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserListMembershipsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);

                        Events.ExecuteOnGetUserListMemberships(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserListMembershipsDefaultImplementation(e, "/2/users/{id}/list_memberships", uriBuilderLocalVar.Path, id, maxResults, paginationToken, listFields, expansions, userFields);
                Events.ExecuteOnErrorGetUserListMemberships(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserListMembershipsApiResponse"/>
        /// </summary>
        public partial class GetUserListMembershipsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserListMembershipsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserListMembershipsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserListMembershipsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserListMembershipsApiResponse(ILogger<GetUserListMembershipsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdListMembershipsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdListMembershipsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdListMembershipsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListAddMember(ref string id, Option<ListAddUserRequest> listAddUserRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listAddUserRequest"></param>
        /// <returns></returns>
        private void ValidateListAddMember(string id, Option<ListAddUserRequest> listAddUserRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listAddUserRequest.IsSet && listAddUserRequest.Value == null)
                throw new ArgumentNullException(nameof(listAddUserRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listAddUserRequest"></param>
        private void AfterListAddMemberDefaultImplementation(IListAddMemberApiResponse apiResponseLocalVar, string id, Option<ListAddUserRequest> listAddUserRequest)
        {
            bool suppressDefaultLog = false;
            AfterListAddMember(ref suppressDefaultLog, apiResponseLocalVar, id, listAddUserRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listAddUserRequest"></param>
        partial void AfterListAddMember(ref bool suppressDefaultLog, IListAddMemberApiResponse apiResponseLocalVar, string id, Option<ListAddUserRequest> listAddUserRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listAddUserRequest"></param>
        private void OnErrorListAddMemberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListAddUserRequest> listAddUserRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListAddMember(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listAddUserRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listAddUserRequest"></param>
        partial void OnErrorListAddMember(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListAddUserRequest> listAddUserRequest);

        /// <summary>
        /// Add a List member Causes a User to become a member of a List.
        /// </summary>
        /// <param name="id">The ID of the List for which to add a member.</param>
        /// <param name="listAddUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAddMemberApiResponse"/>&gt;</returns>
        public async Task<IListAddMemberApiResponse?> ListAddMemberOrDefaultAsync(string id, Option<ListAddUserRequest> listAddUserRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAddMemberAsync(id, listAddUserRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a List member Causes a User to become a member of a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List for which to add a member.</param>
        /// <param name="listAddUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAddMemberApiResponse"/>&gt;</returns>
        public async Task<IListAddMemberApiResponse> ListAddMemberAsync(string id, Option<ListAddUserRequest> listAddUserRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListAddMember(id, listAddUserRequest);

                FormatListAddMember(ref id, listAddUserRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}/members";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (listAddUserRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (listAddUserRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(listAddUserRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAddMemberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAddMemberApiResponse>();

                        ListAddMemberApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAddMemberDefaultImplementation(apiResponseLocalVar, id, listAddUserRequest);

                        Events.ExecuteOnListAddMember(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAddMemberDefaultImplementation(e, "/2/lists/{id}/members", uriBuilderLocalVar.Path, id, listAddUserRequest);
                Events.ExecuteOnErrorListAddMember(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAddMemberApiResponse"/>
        /// </summary>
        public partial class ListAddMemberApiResponse : Org.OpenAPITools.Client.ApiResponse, IListAddMemberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAddMemberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAddMemberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAddMemberApiResponse(ILogger<ListAddMemberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListMutateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListMutateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListMutateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIdCreate(Option<ListCreateRequest> listCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="listCreateRequest"></param>
        /// <returns></returns>
        private void ValidateListIdCreate(Option<ListCreateRequest> listCreateRequest)
        {
            if (listCreateRequest.IsSet && listCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(listCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listCreateRequest"></param>
        private void AfterListIdCreateDefaultImplementation(IListIdCreateApiResponse apiResponseLocalVar, Option<ListCreateRequest> listCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterListIdCreate(ref suppressDefaultLog, apiResponseLocalVar, listCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="listCreateRequest"></param>
        partial void AfterListIdCreate(ref bool suppressDefaultLog, IListIdCreateApiResponse apiResponseLocalVar, Option<ListCreateRequest> listCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listCreateRequest"></param>
        private void OnErrorListIdCreateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ListCreateRequest> listCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIdCreate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, listCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="listCreateRequest"></param>
        partial void OnErrorListIdCreate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<ListCreateRequest> listCreateRequest);

        /// <summary>
        /// Create List Creates a new List.
        /// </summary>
        /// <param name="listCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdCreateApiResponse"/>&gt;</returns>
        public async Task<IListIdCreateApiResponse?> ListIdCreateOrDefaultAsync(Option<ListCreateRequest> listCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIdCreateAsync(listCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create List Creates a new List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="listCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdCreateApiResponse"/>&gt;</returns>
        public async Task<IListIdCreateApiResponse> ListIdCreateAsync(Option<ListCreateRequest> listCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIdCreate(listCreateRequest);

                FormatListIdCreate(listCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists";

                    if (listCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (listCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(listCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIdCreateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIdCreateApiResponse>();

                        ListIdCreateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIdCreateDefaultImplementation(apiResponseLocalVar, listCreateRequest);

                        Events.ExecuteOnListIdCreate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIdCreateDefaultImplementation(e, "/2/lists", uriBuilderLocalVar.Path, listCreateRequest);
                Events.ExecuteOnErrorListIdCreate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIdCreateApiResponse"/>
        /// </summary>
        public partial class ListIdCreateApiResponse : Org.OpenAPITools.Client.ApiResponse, IListIdCreateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIdCreateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIdCreateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIdCreateApiResponse(ILogger<ListIdCreateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIdDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateListIdDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterListIdDeleteDefaultImplementation(IListIdDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterListIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterListIdDelete(ref bool suppressDefaultLog, IListIdDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorListIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorListIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete List Delete a List that you own.
        /// </summary>
        /// <param name="id">The ID of the List to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IListIdDeleteApiResponse?> ListIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete List Delete a List that you own.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IListIdDeleteApiResponse> ListIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIdDelete(id);

                FormatListIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIdDeleteApiResponse>();

                        ListIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnListIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIdDeleteDefaultImplementation(e, "/2/lists/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorListIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIdDeleteApiResponse"/>
        /// </summary>
        public partial class ListIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IListIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIdDeleteApiResponse(ILogger<ListIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIdGet(ref string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <returns></returns>
        private void ValidateListIdGet(string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listFields.IsSet && listFields.Value == null)
                throw new ArgumentNullException(nameof(listFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void AfterListIdGetDefaultImplementation(IListIdGetApiResponse apiResponseLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLog = false;
            AfterListIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, listFields, expansions, userFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void AfterListIdGet(ref bool suppressDefaultLog, IListIdGetApiResponse apiResponseLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void OnErrorListIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listFields, expansions, userFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void OnErrorListIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// List lookup by List ID. Returns a List.
        /// </summary>
        /// <param name="id">The ID of the List.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdGetApiResponse"/>&gt;</returns>
        public async Task<IListIdGetApiResponse?> ListIdGetOrDefaultAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIdGetAsync(id, listFields, expansions, userFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List lookup by List ID. Returns a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdGetApiResponse"/>&gt;</returns>
        public async Task<IListIdGetApiResponse> ListIdGetAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIdGet(id, listFields, expansions, userFields);

                FormatListIdGet(ref id, listFields, expansions, userFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (listFields.IsSet)
                        parseQueryStringLocalVar["list.fields"] = ClientUtils.ParameterToString(listFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIdGetApiResponse>();

                        ListIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIdGetDefaultImplementation(apiResponseLocalVar, id, listFields, expansions, userFields);

                        Events.ExecuteOnListIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIdGetDefaultImplementation(e, "/2/lists/{id}", uriBuilderLocalVar.Path, id, listFields, expansions, userFields);
                Events.ExecuteOnErrorListIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIdGetApiResponse"/>
        /// </summary>
        public partial class ListIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IListIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIdGetApiResponse(ILogger<ListIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ListsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ListsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ListsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListIdUpdate(ref string id, Option<ListUpdateRequest> listUpdateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listUpdateRequest"></param>
        /// <returns></returns>
        private void ValidateListIdUpdate(string id, Option<ListUpdateRequest> listUpdateRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listUpdateRequest.IsSet && listUpdateRequest.Value == null)
                throw new ArgumentNullException(nameof(listUpdateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listUpdateRequest"></param>
        private void AfterListIdUpdateDefaultImplementation(IListIdUpdateApiResponse apiResponseLocalVar, string id, Option<ListUpdateRequest> listUpdateRequest)
        {
            bool suppressDefaultLog = false;
            AfterListIdUpdate(ref suppressDefaultLog, apiResponseLocalVar, id, listUpdateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listUpdateRequest"></param>
        partial void AfterListIdUpdate(ref bool suppressDefaultLog, IListIdUpdateApiResponse apiResponseLocalVar, string id, Option<ListUpdateRequest> listUpdateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listUpdateRequest"></param>
        private void OnErrorListIdUpdateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListUpdateRequest> listUpdateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListIdUpdate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listUpdateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listUpdateRequest"></param>
        partial void OnErrorListIdUpdate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListUpdateRequest> listUpdateRequest);

        /// <summary>
        /// Update List. Update a List that you own.
        /// </summary>
        /// <param name="id">The ID of the List to modify.</param>
        /// <param name="listUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdUpdateApiResponse"/>&gt;</returns>
        public async Task<IListIdUpdateApiResponse?> ListIdUpdateOrDefaultAsync(string id, Option<ListUpdateRequest> listUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListIdUpdateAsync(id, listUpdateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update List. Update a List that you own.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to modify.</param>
        /// <param name="listUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListIdUpdateApiResponse"/>&gt;</returns>
        public async Task<IListIdUpdateApiResponse> ListIdUpdateAsync(string id, Option<ListUpdateRequest> listUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListIdUpdate(id, listUpdateRequest);

                FormatListIdUpdate(ref id, listUpdateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (listUpdateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (listUpdateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(listUpdateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListIdUpdateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListIdUpdateApiResponse>();

                        ListIdUpdateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListIdUpdateDefaultImplementation(apiResponseLocalVar, id, listUpdateRequest);

                        Events.ExecuteOnListIdUpdate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListIdUpdateDefaultImplementation(e, "/2/lists/{id}", uriBuilderLocalVar.Path, id, listUpdateRequest);
                Events.ExecuteOnErrorListIdUpdate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListIdUpdateApiResponse"/>
        /// </summary>
        public partial class ListIdUpdateApiResponse : Org.OpenAPITools.Client.ApiResponse, IListIdUpdateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListIdUpdateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListIdUpdateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListIdUpdateApiResponse(ILogger<ListIdUpdateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListUpdateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListUpdateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListUpdateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListRemoveMember(ref string id, ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateListRemoveMember(string id, string userId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        private void AfterListRemoveMemberDefaultImplementation(IListRemoveMemberApiResponse apiResponseLocalVar, string id, string userId)
        {
            bool suppressDefaultLog = false;
            AfterListRemoveMember(ref suppressDefaultLog, apiResponseLocalVar, id, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        partial void AfterListRemoveMember(ref bool suppressDefaultLog, IListRemoveMemberApiResponse apiResponseLocalVar, string id, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        private void OnErrorListRemoveMemberDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListRemoveMember(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="userId"></param>
        partial void OnErrorListRemoveMember(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string userId);

        /// <summary>
        /// Remove a List member Causes a User to be removed from the members of a List.
        /// </summary>
        /// <param name="id">The ID of the List to remove a member.</param>
        /// <param name="userId">The ID of User that will be removed from the List.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListRemoveMemberApiResponse"/>&gt;</returns>
        public async Task<IListRemoveMemberApiResponse?> ListRemoveMemberOrDefaultAsync(string id, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListRemoveMemberAsync(id, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove a List member Causes a User to be removed from the members of a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List to remove a member.</param>
        /// <param name="userId">The ID of User that will be removed from the List.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListRemoveMemberApiResponse"/>&gt;</returns>
        public async Task<IListRemoveMemberApiResponse> ListRemoveMemberAsync(string id, string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListRemoveMember(id, userId);

                FormatListRemoveMember(ref id, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}/members/{user_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListRemoveMemberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListRemoveMemberApiResponse>();

                        ListRemoveMemberApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}/members/{user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListRemoveMemberDefaultImplementation(apiResponseLocalVar, id, userId);

                        Events.ExecuteOnListRemoveMember(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListRemoveMemberDefaultImplementation(e, "/2/lists/{id}/members/{user_id}", uriBuilderLocalVar.Path, id, userId);
                Events.ExecuteOnErrorListRemoveMember(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListRemoveMemberApiResponse"/>
        /// </summary>
        public partial class ListRemoveMemberApiResponse : Org.OpenAPITools.Client.ApiResponse, IListRemoveMemberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListRemoveMemberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListRemoveMemberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListRemoveMemberApiResponse(ILogger<ListRemoveMemberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListMutateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListMutateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListMutateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserFollow(ref string id, Option<ListFollowedRequest> listFollowedRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listFollowedRequest"></param>
        /// <returns></returns>
        private void ValidateListUserFollow(string id, Option<ListFollowedRequest> listFollowedRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listFollowedRequest.IsSet && listFollowedRequest.Value == null)
                throw new ArgumentNullException(nameof(listFollowedRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFollowedRequest"></param>
        private void AfterListUserFollowDefaultImplementation(IListUserFollowApiResponse apiResponseLocalVar, string id, Option<ListFollowedRequest> listFollowedRequest)
        {
            bool suppressDefaultLog = false;
            AfterListUserFollow(ref suppressDefaultLog, apiResponseLocalVar, id, listFollowedRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFollowedRequest"></param>
        partial void AfterListUserFollow(ref bool suppressDefaultLog, IListUserFollowApiResponse apiResponseLocalVar, string id, Option<ListFollowedRequest> listFollowedRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFollowedRequest"></param>
        private void OnErrorListUserFollowDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListFollowedRequest> listFollowedRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserFollow(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listFollowedRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFollowedRequest"></param>
        partial void OnErrorListUserFollow(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<ListFollowedRequest> listFollowedRequest);

        /// <summary>
        /// Follow a List Causes a User to follow a List.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that will follow the List.</param>
        /// <param name="listFollowedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserFollowApiResponse"/>&gt;</returns>
        public async Task<IListUserFollowApiResponse?> ListUserFollowOrDefaultAsync(string id, Option<ListFollowedRequest> listFollowedRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserFollowAsync(id, listFollowedRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Follow a List Causes a User to follow a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will follow the List.</param>
        /// <param name="listFollowedRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserFollowApiResponse"/>&gt;</returns>
        public async Task<IListUserFollowApiResponse> ListUserFollowAsync(string id, Option<ListFollowedRequest> listFollowedRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserFollow(id, listFollowedRequest);

                FormatListUserFollow(ref id, listFollowedRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/followed_lists";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (listFollowedRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (listFollowedRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(listFollowedRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserFollowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserFollowApiResponse>();

                        ListUserFollowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/followed_lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserFollowDefaultImplementation(apiResponseLocalVar, id, listFollowedRequest);

                        Events.ExecuteOnListUserFollow(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserFollowDefaultImplementation(e, "/2/users/{id}/followed_lists", uriBuilderLocalVar.Path, id, listFollowedRequest);
                Events.ExecuteOnErrorListUserFollow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserFollowApiResponse"/>
        /// </summary>
        public partial class ListUserFollowApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserFollowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserFollowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserFollowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserFollowApiResponse(ILogger<ListUserFollowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListFollowedResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListFollowedResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListFollowedResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserOwnedLists(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <returns></returns>
        private void ValidateListUserOwnedLists(string id, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (listFields.IsSet && listFields.Value == null)
                throw new ArgumentNullException(nameof(listFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void AfterListUserOwnedListsDefaultImplementation(IListUserOwnedListsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLog = false;
            AfterListUserOwnedLists(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void AfterListUserOwnedLists(ref bool suppressDefaultLog, IListUserOwnedListsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void OnErrorListUserOwnedListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserOwnedLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void OnErrorListUserOwnedLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Get a User&#39;s Owned Lists. Get a User&#39;s Owned Lists.
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserOwnedListsApiResponse"/>&gt;</returns>
        public async Task<IListUserOwnedListsApiResponse?> ListUserOwnedListsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserOwnedListsAsync(id, maxResults, paginationToken, listFields, expansions, userFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a User&#39;s Owned Lists. Get a User&#39;s Owned Lists.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserOwnedListsApiResponse"/>&gt;</returns>
        public async Task<IListUserOwnedListsApiResponse> ListUserOwnedListsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserOwnedLists(id, paginationToken, listFields, expansions, userFields);

                FormatListUserOwnedLists(ref id, ref maxResults, ref paginationToken, listFields, expansions, userFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/owned_lists";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (listFields.IsSet)
                        parseQueryStringLocalVar["list.fields"] = ClientUtils.ParameterToString(listFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserOwnedListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserOwnedListsApiResponse>();

                        ListUserOwnedListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/owned_lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserOwnedListsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);

                        Events.ExecuteOnListUserOwnedLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserOwnedListsDefaultImplementation(e, "/2/users/{id}/owned_lists", uriBuilderLocalVar.Path, id, maxResults, paginationToken, listFields, expansions, userFields);
                Events.ExecuteOnErrorListUserOwnedLists(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserOwnedListsApiResponse"/>
        /// </summary>
        public partial class ListUserOwnedListsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserOwnedListsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserOwnedListsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserOwnedListsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserOwnedListsApiResponse(ILogger<ListUserOwnedListsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdOwnedListsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdOwnedListsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdOwnedListsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserPin(ref string id, ListPinnedRequest listPinnedRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listPinnedRequest"></param>
        /// <returns></returns>
        private void ValidateListUserPin(string id, ListPinnedRequest listPinnedRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listPinnedRequest == null)
                throw new ArgumentNullException(nameof(listPinnedRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listPinnedRequest"></param>
        private void AfterListUserPinDefaultImplementation(IListUserPinApiResponse apiResponseLocalVar, string id, ListPinnedRequest listPinnedRequest)
        {
            bool suppressDefaultLog = false;
            AfterListUserPin(ref suppressDefaultLog, apiResponseLocalVar, id, listPinnedRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listPinnedRequest"></param>
        partial void AfterListUserPin(ref bool suppressDefaultLog, IListUserPinApiResponse apiResponseLocalVar, string id, ListPinnedRequest listPinnedRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listPinnedRequest"></param>
        private void OnErrorListUserPinDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ListPinnedRequest listPinnedRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserPin(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listPinnedRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listPinnedRequest"></param>
        partial void OnErrorListUserPin(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ListPinnedRequest listPinnedRequest);

        /// <summary>
        /// Pin a List Causes a User to pin a List.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that will pin the List.</param>
        /// <param name="listPinnedRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinApiResponse"/>&gt;</returns>
        public async Task<IListUserPinApiResponse?> ListUserPinOrDefaultAsync(string id, ListPinnedRequest listPinnedRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserPinAsync(id, listPinnedRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Pin a List Causes a User to pin a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will pin the List.</param>
        /// <param name="listPinnedRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinApiResponse"/>&gt;</returns>
        public async Task<IListUserPinApiResponse> ListUserPinAsync(string id, ListPinnedRequest listPinnedRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserPin(id, listPinnedRequest);

                FormatListUserPin(ref id, listPinnedRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/pinned_lists";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (listPinnedRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(listPinnedRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserPinApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserPinApiResponse>();

                        ListUserPinApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/pinned_lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserPinDefaultImplementation(apiResponseLocalVar, id, listPinnedRequest);

                        Events.ExecuteOnListUserPin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserPinDefaultImplementation(e, "/2/users/{id}/pinned_lists", uriBuilderLocalVar.Path, id, listPinnedRequest);
                Events.ExecuteOnErrorListUserPin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserPinApiResponse"/>
        /// </summary>
        public partial class ListUserPinApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserPinApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserPinApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserPinApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserPinApiResponse(ILogger<ListUserPinApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListPinnedResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListPinnedResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListPinnedResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserPinnedLists(ref string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <returns></returns>
        private void ValidateListUserPinnedLists(string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listFields.IsSet && listFields.Value == null)
                throw new ArgumentNullException(nameof(listFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void AfterListUserPinnedListsDefaultImplementation(IListUserPinnedListsApiResponse apiResponseLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLog = false;
            AfterListUserPinnedLists(ref suppressDefaultLog, apiResponseLocalVar, id, listFields, expansions, userFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void AfterListUserPinnedLists(ref bool suppressDefaultLog, IListUserPinnedListsApiResponse apiResponseLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void OnErrorListUserPinnedListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserPinnedLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listFields, expansions, userFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void OnErrorListUserPinnedLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Get a User&#39;s Pinned Lists Get a User&#39;s Pinned Lists.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinnedListsApiResponse"/>&gt;</returns>
        public async Task<IListUserPinnedListsApiResponse?> ListUserPinnedListsOrDefaultAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserPinnedListsAsync(id, listFields, expansions, userFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a User&#39;s Pinned Lists Get a User&#39;s Pinned Lists.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserPinnedListsApiResponse"/>&gt;</returns>
        public async Task<IListUserPinnedListsApiResponse> ListUserPinnedListsAsync(string id, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserPinnedLists(id, listFields, expansions, userFields);

                FormatListUserPinnedLists(ref id, listFields, expansions, userFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/pinned_lists";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (listFields.IsSet)
                        parseQueryStringLocalVar["list.fields"] = ClientUtils.ParameterToString(listFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserPinnedListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserPinnedListsApiResponse>();

                        ListUserPinnedListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/pinned_lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserPinnedListsDefaultImplementation(apiResponseLocalVar, id, listFields, expansions, userFields);

                        Events.ExecuteOnListUserPinnedLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserPinnedListsDefaultImplementation(e, "/2/users/{id}/pinned_lists", uriBuilderLocalVar.Path, id, listFields, expansions, userFields);
                Events.ExecuteOnErrorListUserPinnedLists(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserPinnedListsApiResponse"/>
        /// </summary>
        public partial class ListUserPinnedListsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserPinnedListsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserPinnedListsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserPinnedListsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserPinnedListsApiResponse(ILogger<ListUserPinnedListsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdPinnedListsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdPinnedListsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdPinnedListsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserUnfollow(ref string id, ref string listId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        /// <returns></returns>
        private void ValidateListUserUnfollow(string id, string listId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listId == null)
                throw new ArgumentNullException(nameof(listId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        private void AfterListUserUnfollowDefaultImplementation(IListUserUnfollowApiResponse apiResponseLocalVar, string id, string listId)
        {
            bool suppressDefaultLog = false;
            AfterListUserUnfollow(ref suppressDefaultLog, apiResponseLocalVar, id, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        partial void AfterListUserUnfollow(ref bool suppressDefaultLog, IListUserUnfollowApiResponse apiResponseLocalVar, string id, string listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        private void OnErrorListUserUnfollowDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserUnfollow(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        partial void OnErrorListUserUnfollow(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string listId);

        /// <summary>
        /// Unfollow a List Causes a User to unfollow a List.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that will unfollow the List.</param>
        /// <param name="listId">The ID of the List to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnfollowApiResponse"/>&gt;</returns>
        public async Task<IListUserUnfollowApiResponse?> ListUserUnfollowOrDefaultAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserUnfollowAsync(id, listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unfollow a List Causes a User to unfollow a List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that will unfollow the List.</param>
        /// <param name="listId">The ID of the List to unfollow.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnfollowApiResponse"/>&gt;</returns>
        public async Task<IListUserUnfollowApiResponse> ListUserUnfollowAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserUnfollow(id, listId);

                FormatListUserUnfollow(ref id, ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/followed_lists/{list_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blist_id%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserUnfollowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserUnfollowApiResponse>();

                        ListUserUnfollowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/followed_lists/{list_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserUnfollowDefaultImplementation(apiResponseLocalVar, id, listId);

                        Events.ExecuteOnListUserUnfollow(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserUnfollowDefaultImplementation(e, "/2/users/{id}/followed_lists/{list_id}", uriBuilderLocalVar.Path, id, listId);
                Events.ExecuteOnErrorListUserUnfollow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserUnfollowApiResponse"/>
        /// </summary>
        public partial class ListUserUnfollowApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserUnfollowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserUnfollowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserUnfollowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserUnfollowApiResponse(ILogger<ListUserUnfollowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListFollowedResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListFollowedResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListFollowedResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListUserUnpin(ref string id, ref string listId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        /// <returns></returns>
        private void ValidateListUserUnpin(string id, string listId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (listId == null)
                throw new ArgumentNullException(nameof(listId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        private void AfterListUserUnpinDefaultImplementation(IListUserUnpinApiResponse apiResponseLocalVar, string id, string listId)
        {
            bool suppressDefaultLog = false;
            AfterListUserUnpin(ref suppressDefaultLog, apiResponseLocalVar, id, listId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        partial void AfterListUserUnpin(ref bool suppressDefaultLog, IListUserUnpinApiResponse apiResponseLocalVar, string id, string listId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        private void OnErrorListUserUnpinDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string listId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListUserUnpin(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, listId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="listId"></param>
        partial void OnErrorListUserUnpin(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string listId);

        /// <summary>
        /// Unpin a List Causes a User to remove a pinned List.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listId">The ID of the List to unpin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnpinApiResponse"/>&gt;</returns>
        public async Task<IListUserUnpinApiResponse?> ListUserUnpinOrDefaultAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListUserUnpinAsync(id, listId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unpin a List Causes a User to remove a pinned List.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="listId">The ID of the List to unpin.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListUserUnpinApiResponse"/>&gt;</returns>
        public async Task<IListUserUnpinApiResponse> ListUserUnpinAsync(string id, string listId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListUserUnpin(id, listId);

                FormatListUserUnpin(ref id, ref listId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/pinned_lists/{list_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Blist_id%7D", Uri.EscapeDataString(listId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListUserUnpinApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListUserUnpinApiResponse>();

                        ListUserUnpinApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/pinned_lists/{list_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListUserUnpinDefaultImplementation(apiResponseLocalVar, id, listId);

                        Events.ExecuteOnListUserUnpin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListUserUnpinDefaultImplementation(e, "/2/users/{id}/pinned_lists/{list_id}", uriBuilderLocalVar.Path, id, listId);
                Events.ExecuteOnErrorListUserUnpin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListUserUnpinApiResponse"/>
        /// </summary>
        public partial class ListUserUnpinApiResponse : Org.OpenAPITools.Client.ApiResponse, IListUserUnpinApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListUserUnpinApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListUserUnpinApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListUserUnpinApiResponse(ILogger<ListUserUnpinApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ListUnpinResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ListUnpinResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ListUnpinResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUserFollowedLists(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        /// <returns></returns>
        private void ValidateUserFollowedLists(string id, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (listFields.IsSet && listFields.Value == null)
                throw new ArgumentNullException(nameof(listFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void AfterUserFollowedListsDefaultImplementation(IUserFollowedListsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLog = false;
            AfterUserFollowedLists(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void AfterUserFollowedLists(ref bool suppressDefaultLog, IUserFollowedListsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        private void OnErrorUserFollowedListsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUserFollowedLists(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="listFields"></param>
        /// <param name="expansions"></param>
        /// <param name="userFields"></param>
        partial void OnErrorUserFollowedLists(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> listFields, Option<List<string>> expansions, Option<List<string>> userFields);

        /// <summary>
        /// Get User&#39;s Followed Lists Returns a User&#39;s followed Lists.
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowedListsApiResponse"/>&gt;</returns>
        public async Task<IUserFollowedListsApiResponse?> UserFollowedListsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UserFollowedListsAsync(id, maxResults, paginationToken, listFields, expansions, userFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User&#39;s Followed Lists Returns a User&#39;s followed Lists.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="listFields">A comma separated list of List fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUserFollowedListsApiResponse"/>&gt;</returns>
        public async Task<IUserFollowedListsApiResponse> UserFollowedListsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> listFields = default, Option<List<string>> expansions = default, Option<List<string>> userFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUserFollowedLists(id, paginationToken, listFields, expansions, userFields);

                FormatUserFollowedLists(ref id, ref maxResults, ref paginationToken, listFields, expansions, userFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/followed_lists";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (listFields.IsSet)
                        parseQueryStringLocalVar["list.fields"] = ClientUtils.ParameterToString(listFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UserFollowedListsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UserFollowedListsApiResponse>();

                        UserFollowedListsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/followed_lists", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUserFollowedListsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, listFields, expansions, userFields);

                        Events.ExecuteOnUserFollowedLists(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUserFollowedListsDefaultImplementation(e, "/2/users/{id}/followed_lists", uriBuilderLocalVar.Path, id, maxResults, paginationToken, listFields, expansions, userFields);
                Events.ExecuteOnErrorUserFollowedLists(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UserFollowedListsApiResponse"/>
        /// </summary>
        public partial class UserFollowedListsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUserFollowedListsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UserFollowedListsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UserFollowedListsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UserFollowedListsApiResponse(ILogger<UserFollowedListsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdFollowedListsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdFollowedListsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdFollowedListsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
