// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBookmarksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BookmarksApiEvents Events { get; }

        /// <summary>
        /// Bookmark Folder Posts by User and Folder id
        /// </summary>
        /// <remarks>
        /// Returns posts belonging to input bookmarks folder id that have been created by the requesting User
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="folderId">The ID of the Bookmark Folder that the authenticated User is trying to fetch Posts for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFolderPostsApiResponse"/>&gt;</returns>
        Task<IGetUsersIdBookmarkFolderPostsApiResponse> GetUsersIdBookmarkFolderPostsAsync(string id, string folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bookmark Folder Posts by User and Folder id
        /// </summary>
        /// <remarks>
        /// Returns posts belonging to input bookmarks folder id that have been created by the requesting User
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="folderId">The ID of the Bookmark Folder that the authenticated User is trying to fetch Posts for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFolderPostsApiResponse"/>?&gt;</returns>
        Task<IGetUsersIdBookmarkFolderPostsApiResponse?> GetUsersIdBookmarkFolderPostsOrDefaultAsync(string id, string folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bookmark folders by User
        /// </summary>
        /// <remarks>
        /// Returns metadata about Bookmark folders that have been created by the requesting User
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFoldersApiResponse"/>&gt;</returns>
        Task<IGetUsersIdBookmarkFoldersApiResponse> GetUsersIdBookmarkFoldersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bookmark folders by User
        /// </summary>
        /// <remarks>
        /// Returns metadata about Bookmark folders that have been created by the requesting User
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFoldersApiResponse"/>?&gt;</returns>
        Task<IGetUsersIdBookmarkFoldersApiResponse?> GetUsersIdBookmarkFoldersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bookmarks by User
        /// </summary>
        /// <remarks>
        /// Returns Post objects that have been bookmarked by the requesting User
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarksApiResponse"/>&gt;</returns>
        Task<IGetUsersIdBookmarksApiResponse> GetUsersIdBookmarksAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Bookmarks by User
        /// </summary>
        /// <remarks>
        /// Returns Post objects that have been bookmarked by the requesting User
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarksApiResponse"/>?&gt;</returns>
        Task<IGetUsersIdBookmarksApiResponse?> GetUsersIdBookmarksOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Post to Bookmarks
        /// </summary>
        /// <remarks>
        /// Adds a Post (ID in the body) to the requesting User&#39;s (in the path) bookmarks
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to add bookmarks.</param>
        /// <param name="bookmarkAddRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostUsersIdBookmarksApiResponse"/>&gt;</returns>
        Task<IPostUsersIdBookmarksApiResponse> PostUsersIdBookmarksAsync(string id, BookmarkAddRequest bookmarkAddRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Post to Bookmarks
        /// </summary>
        /// <remarks>
        /// Adds a Post (ID in the body) to the requesting User&#39;s (in the path) bookmarks
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User for whom to add bookmarks.</param>
        /// <param name="bookmarkAddRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostUsersIdBookmarksApiResponse"/>?&gt;</returns>
        Task<IPostUsersIdBookmarksApiResponse?> PostUsersIdBookmarksOrDefaultAsync(string id, BookmarkAddRequest bookmarkAddRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a bookmarked Post
        /// </summary>
        /// <remarks>
        /// Removes a Post from the requesting User&#39;s bookmarked Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User whose bookmark is to be removed.</param>
        /// <param name="tweetId">The ID of the Post that the source User is removing from bookmarks.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBookmarksDeleteApiResponse"/>&gt;</returns>
        Task<IUsersIdBookmarksDeleteApiResponse> UsersIdBookmarksDeleteAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a bookmarked Post
        /// </summary>
        /// <remarks>
        /// Removes a Post from the requesting User&#39;s bookmarked Posts.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User whose bookmark is to be removed.</param>
        /// <param name="tweetId">The ID of the Post that the source User is removing from bookmarks.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBookmarksDeleteApiResponse"/>?&gt;</returns>
        Task<IUsersIdBookmarksDeleteApiResponse?> UsersIdBookmarksDeleteOrDefaultAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetUsersIdBookmarkFolderPostsApiResponse"/>
    /// </summary>
    public interface IGetUsersIdBookmarkFolderPostsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BookmarkFolderPostsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetUsersIdBookmarkFoldersApiResponse"/>
    /// </summary>
    public interface IGetUsersIdBookmarkFoldersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BookmarkFoldersResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetUsersIdBookmarksApiResponse"/>
    /// </summary>
    public interface IGetUsersIdBookmarksApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdBookmarksResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IPostUsersIdBookmarksApiResponse"/>
    /// </summary>
    public interface IPostUsersIdBookmarksApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BookmarkMutationResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdBookmarksDeleteApiResponse"/>
    /// </summary>
    public interface IUsersIdBookmarksDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BookmarkMutationResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BookmarksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsersIdBookmarkFolderPosts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsersIdBookmarkFolderPosts;

        internal void ExecuteOnGetUsersIdBookmarkFolderPosts(BookmarksApi.GetUsersIdBookmarkFolderPostsApiResponse apiResponse)
        {
            OnGetUsersIdBookmarkFolderPosts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsersIdBookmarkFolderPosts(Exception exception)
        {
            OnErrorGetUsersIdBookmarkFolderPosts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsersIdBookmarkFolders;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsersIdBookmarkFolders;

        internal void ExecuteOnGetUsersIdBookmarkFolders(BookmarksApi.GetUsersIdBookmarkFoldersApiResponse apiResponse)
        {
            OnGetUsersIdBookmarkFolders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsersIdBookmarkFolders(Exception exception)
        {
            OnErrorGetUsersIdBookmarkFolders?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsersIdBookmarks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsersIdBookmarks;

        internal void ExecuteOnGetUsersIdBookmarks(BookmarksApi.GetUsersIdBookmarksApiResponse apiResponse)
        {
            OnGetUsersIdBookmarks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsersIdBookmarks(Exception exception)
        {
            OnErrorGetUsersIdBookmarks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostUsersIdBookmarks;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostUsersIdBookmarks;

        internal void ExecuteOnPostUsersIdBookmarks(BookmarksApi.PostUsersIdBookmarksApiResponse apiResponse)
        {
            OnPostUsersIdBookmarks?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostUsersIdBookmarks(Exception exception)
        {
            OnErrorPostUsersIdBookmarks?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdBookmarksDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdBookmarksDelete;

        internal void ExecuteOnUsersIdBookmarksDelete(BookmarksApi.UsersIdBookmarksDeleteApiResponse apiResponse)
        {
            OnUsersIdBookmarksDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdBookmarksDelete(Exception exception)
        {
            OnErrorUsersIdBookmarksDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BookmarksApi : IBookmarksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BookmarksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BookmarksApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookmarksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookmarksApi(ILogger<BookmarksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BookmarksApiEvents bookmarksApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BookmarksApi>();
            HttpClient = httpClient;
            Events = bookmarksApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetUsersIdBookmarkFolderPosts(ref string id, ref string folderId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderId"></param>
        /// <returns></returns>
        private void ValidateGetUsersIdBookmarkFolderPosts(string id, string folderId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (folderId == null)
                throw new ArgumentNullException(nameof(folderId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderId"></param>
        private void AfterGetUsersIdBookmarkFolderPostsDefaultImplementation(IGetUsersIdBookmarkFolderPostsApiResponse apiResponseLocalVar, string id, string folderId)
        {
            bool suppressDefaultLog = false;
            AfterGetUsersIdBookmarkFolderPosts(ref suppressDefaultLog, apiResponseLocalVar, id, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderId"></param>
        partial void AfterGetUsersIdBookmarkFolderPosts(ref bool suppressDefaultLog, IGetUsersIdBookmarkFolderPostsApiResponse apiResponseLocalVar, string id, string folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderId"></param>
        private void OnErrorGetUsersIdBookmarkFolderPostsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsersIdBookmarkFolderPosts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderId"></param>
        partial void OnErrorGetUsersIdBookmarkFolderPosts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string folderId);

        /// <summary>
        /// Bookmark Folder Posts by User and Folder id Returns posts belonging to input bookmarks folder id that have been created by the requesting User
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="folderId">The ID of the Bookmark Folder that the authenticated User is trying to fetch Posts for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFolderPostsApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarkFolderPostsApiResponse?> GetUsersIdBookmarkFolderPostsOrDefaultAsync(string id, string folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersIdBookmarkFolderPostsAsync(id, folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bookmark Folder Posts by User and Folder id Returns posts belonging to input bookmarks folder id that have been created by the requesting User
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="folderId">The ID of the Bookmark Folder that the authenticated User is trying to fetch Posts for.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFolderPostsApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarkFolderPostsApiResponse> GetUsersIdBookmarkFolderPostsAsync(string id, string folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUsersIdBookmarkFolderPosts(id, folderId);

                FormatGetUsersIdBookmarkFolderPosts(ref id, ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/bookmarks/folders/{folder_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfolder_id%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersIdBookmarkFolderPostsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersIdBookmarkFolderPostsApiResponse>();

                        GetUsersIdBookmarkFolderPostsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/bookmarks/folders/{folder_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersIdBookmarkFolderPostsDefaultImplementation(apiResponseLocalVar, id, folderId);

                        Events.ExecuteOnGetUsersIdBookmarkFolderPosts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersIdBookmarkFolderPostsDefaultImplementation(e, "/2/users/{id}/bookmarks/folders/{folder_id}", uriBuilderLocalVar.Path, id, folderId);
                Events.ExecuteOnErrorGetUsersIdBookmarkFolderPosts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersIdBookmarkFolderPostsApiResponse"/>
        /// </summary>
        public partial class GetUsersIdBookmarkFolderPostsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersIdBookmarkFolderPostsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersIdBookmarkFolderPostsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersIdBookmarkFolderPostsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersIdBookmarkFolderPostsApiResponse(ILogger<GetUsersIdBookmarkFolderPostsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BookmarkFolderPostsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BookmarkFolderPostsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BookmarkFolderPostsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUsersIdBookmarkFolders(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <returns></returns>
        private void ValidateGetUsersIdBookmarkFolders(string id, Option<string> paginationToken)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        private void AfterGetUsersIdBookmarkFoldersDefaultImplementation(IGetUsersIdBookmarkFoldersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken)
        {
            bool suppressDefaultLog = false;
            AfterGetUsersIdBookmarkFolders(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        partial void AfterGetUsersIdBookmarkFolders(ref bool suppressDefaultLog, IGetUsersIdBookmarkFoldersApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        private void OnErrorGetUsersIdBookmarkFoldersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsersIdBookmarkFolders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        partial void OnErrorGetUsersIdBookmarkFolders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken);

        /// <summary>
        /// Bookmark folders by User Returns metadata about Bookmark folders that have been created by the requesting User
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarkFoldersApiResponse?> GetUsersIdBookmarkFoldersOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersIdBookmarkFoldersAsync(id, maxResults, paginationToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bookmark folders by User Returns metadata about Bookmark folders that have been created by the requesting User
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarkFoldersApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarkFoldersApiResponse> GetUsersIdBookmarkFoldersAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUsersIdBookmarkFolders(id, paginationToken);

                FormatGetUsersIdBookmarkFolders(ref id, ref maxResults, ref paginationToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/bookmarks/folders";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersIdBookmarkFoldersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersIdBookmarkFoldersApiResponse>();

                        GetUsersIdBookmarkFoldersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/bookmarks/folders", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersIdBookmarkFoldersDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken);

                        Events.ExecuteOnGetUsersIdBookmarkFolders(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersIdBookmarkFoldersDefaultImplementation(e, "/2/users/{id}/bookmarks/folders", uriBuilderLocalVar.Path, id, maxResults, paginationToken);
                Events.ExecuteOnErrorGetUsersIdBookmarkFolders(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersIdBookmarkFoldersApiResponse"/>
        /// </summary>
        public partial class GetUsersIdBookmarkFoldersApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersIdBookmarkFoldersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersIdBookmarkFoldersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersIdBookmarkFoldersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersIdBookmarkFoldersApiResponse(ILogger<GetUsersIdBookmarkFoldersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BookmarkFoldersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BookmarkFoldersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BookmarkFoldersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUsersIdBookmarks(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetUsersIdBookmarks(string id, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetUsersIdBookmarksDefaultImplementation(IGetUsersIdBookmarksApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetUsersIdBookmarks(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetUsersIdBookmarks(ref bool suppressDefaultLog, IGetUsersIdBookmarksApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetUsersIdBookmarksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsersIdBookmarks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetUsersIdBookmarks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Bookmarks by User Returns Post objects that have been bookmarked by the requesting User
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarksApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarksApiResponse?> GetUsersIdBookmarksOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersIdBookmarksAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Bookmarks by User Returns Post objects that have been bookmarked by the requesting User
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to return results.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersIdBookmarksApiResponse"/>&gt;</returns>
        public async Task<IGetUsersIdBookmarksApiResponse> GetUsersIdBookmarksAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUsersIdBookmarks(id, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetUsersIdBookmarks(ref id, ref maxResults, ref paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/bookmarks";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersIdBookmarksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersIdBookmarksApiResponse>();

                        GetUsersIdBookmarksApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/bookmarks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersIdBookmarksDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetUsersIdBookmarks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersIdBookmarksDefaultImplementation(e, "/2/users/{id}/bookmarks", uriBuilderLocalVar.Path, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetUsersIdBookmarks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersIdBookmarksApiResponse"/>
        /// </summary>
        public partial class GetUsersIdBookmarksApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersIdBookmarksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersIdBookmarksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersIdBookmarksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersIdBookmarksApiResponse(ILogger<GetUsersIdBookmarksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdBookmarksResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdBookmarksResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdBookmarksResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostUsersIdBookmarks(ref string id, BookmarkAddRequest bookmarkAddRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="bookmarkAddRequest"></param>
        /// <returns></returns>
        private void ValidatePostUsersIdBookmarks(string id, BookmarkAddRequest bookmarkAddRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (bookmarkAddRequest == null)
                throw new ArgumentNullException(nameof(bookmarkAddRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bookmarkAddRequest"></param>
        private void AfterPostUsersIdBookmarksDefaultImplementation(IPostUsersIdBookmarksApiResponse apiResponseLocalVar, string id, BookmarkAddRequest bookmarkAddRequest)
        {
            bool suppressDefaultLog = false;
            AfterPostUsersIdBookmarks(ref suppressDefaultLog, apiResponseLocalVar, id, bookmarkAddRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bookmarkAddRequest"></param>
        partial void AfterPostUsersIdBookmarks(ref bool suppressDefaultLog, IPostUsersIdBookmarksApiResponse apiResponseLocalVar, string id, BookmarkAddRequest bookmarkAddRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bookmarkAddRequest"></param>
        private void OnErrorPostUsersIdBookmarksDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, BookmarkAddRequest bookmarkAddRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostUsersIdBookmarks(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, bookmarkAddRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="bookmarkAddRequest"></param>
        partial void OnErrorPostUsersIdBookmarks(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, BookmarkAddRequest bookmarkAddRequest);

        /// <summary>
        /// Add Post to Bookmarks Adds a Post (ID in the body) to the requesting User&#39;s (in the path) bookmarks
        /// </summary>
        /// <param name="id">The ID of the authenticated source User for whom to add bookmarks.</param>
        /// <param name="bookmarkAddRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostUsersIdBookmarksApiResponse"/>&gt;</returns>
        public async Task<IPostUsersIdBookmarksApiResponse?> PostUsersIdBookmarksOrDefaultAsync(string id, BookmarkAddRequest bookmarkAddRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostUsersIdBookmarksAsync(id, bookmarkAddRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Post to Bookmarks Adds a Post (ID in the body) to the requesting User&#39;s (in the path) bookmarks
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User for whom to add bookmarks.</param>
        /// <param name="bookmarkAddRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostUsersIdBookmarksApiResponse"/>&gt;</returns>
        public async Task<IPostUsersIdBookmarksApiResponse> PostUsersIdBookmarksAsync(string id, BookmarkAddRequest bookmarkAddRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostUsersIdBookmarks(id, bookmarkAddRequest);

                FormatPostUsersIdBookmarks(ref id, bookmarkAddRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/bookmarks";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (bookmarkAddRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(bookmarkAddRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostUsersIdBookmarksApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostUsersIdBookmarksApiResponse>();

                        PostUsersIdBookmarksApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/bookmarks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostUsersIdBookmarksDefaultImplementation(apiResponseLocalVar, id, bookmarkAddRequest);

                        Events.ExecuteOnPostUsersIdBookmarks(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostUsersIdBookmarksDefaultImplementation(e, "/2/users/{id}/bookmarks", uriBuilderLocalVar.Path, id, bookmarkAddRequest);
                Events.ExecuteOnErrorPostUsersIdBookmarks(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostUsersIdBookmarksApiResponse"/>
        /// </summary>
        public partial class PostUsersIdBookmarksApiResponse : Org.OpenAPITools.Client.ApiResponse, IPostUsersIdBookmarksApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostUsersIdBookmarksApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostUsersIdBookmarksApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostUsersIdBookmarksApiResponse(ILogger<PostUsersIdBookmarksApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BookmarkMutationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BookmarkMutationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BookmarkMutationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdBookmarksDelete(ref string id, ref string tweetId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        /// <returns></returns>
        private void ValidateUsersIdBookmarksDelete(string id, string tweetId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tweetId == null)
                throw new ArgumentNullException(nameof(tweetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        private void AfterUsersIdBookmarksDeleteDefaultImplementation(IUsersIdBookmarksDeleteApiResponse apiResponseLocalVar, string id, string tweetId)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdBookmarksDelete(ref suppressDefaultLog, apiResponseLocalVar, id, tweetId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        partial void AfterUsersIdBookmarksDelete(ref bool suppressDefaultLog, IUsersIdBookmarksDeleteApiResponse apiResponseLocalVar, string id, string tweetId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        private void OnErrorUsersIdBookmarksDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string tweetId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdBookmarksDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, tweetId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        partial void OnErrorUsersIdBookmarksDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string tweetId);

        /// <summary>
        /// Remove a bookmarked Post Removes a Post from the requesting User&#39;s bookmarked Posts.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User whose bookmark is to be removed.</param>
        /// <param name="tweetId">The ID of the Post that the source User is removing from bookmarks.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBookmarksDeleteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdBookmarksDeleteApiResponse?> UsersIdBookmarksDeleteOrDefaultAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdBookmarksDeleteAsync(id, tweetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove a bookmarked Post Removes a Post from the requesting User&#39;s bookmarked Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User whose bookmark is to be removed.</param>
        /// <param name="tweetId">The ID of the Post that the source User is removing from bookmarks.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdBookmarksDeleteApiResponse"/>&gt;</returns>
        public async Task<IUsersIdBookmarksDeleteApiResponse> UsersIdBookmarksDeleteAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdBookmarksDelete(id, tweetId);

                FormatUsersIdBookmarksDelete(ref id, ref tweetId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/bookmarks/{tweet_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btweet_id%7D", Uri.EscapeDataString(tweetId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdBookmarksDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdBookmarksDeleteApiResponse>();

                        UsersIdBookmarksDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/bookmarks/{tweet_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdBookmarksDeleteDefaultImplementation(apiResponseLocalVar, id, tweetId);

                        Events.ExecuteOnUsersIdBookmarksDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdBookmarksDeleteDefaultImplementation(e, "/2/users/{id}/bookmarks/{tweet_id}", uriBuilderLocalVar.Path, id, tweetId);
                Events.ExecuteOnErrorUsersIdBookmarksDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdBookmarksDeleteApiResponse"/>
        /// </summary>
        public partial class UsersIdBookmarksDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdBookmarksDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdBookmarksDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdBookmarksDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdBookmarksDeleteApiResponse(ILogger<UsersIdBookmarksDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BookmarkMutationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BookmarkMutationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BookmarkMutationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
