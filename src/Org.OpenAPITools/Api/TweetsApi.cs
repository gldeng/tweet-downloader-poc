// <auto-generated>
/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITweetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TweetsApiEvents Events { get; }

        /// <summary>
        /// Add/Delete rules
        /// </summary>
        /// <remarks>
        /// Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun">Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)</param>
        /// <param name="deleteAll">Delete All can be used to delete all of the rules associated this client app, it should be specified with no other parameters. Once deleted, rules cannot be recovered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrDeleteRulesApiResponse"/>&gt;</returns>
        Task<IAddOrDeleteRulesApiResponse> AddOrDeleteRulesAsync(AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun = default, Option<bool> deleteAll = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add/Delete rules
        /// </summary>
        /// <remarks>
        /// Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
        /// </remarks>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun">Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)</param>
        /// <param name="deleteAll">Delete All can be used to delete all of the rules associated this client app, it should be specified with no other parameters. Once deleted, rules cannot be recovered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrDeleteRulesApiResponse"/>?&gt;</returns>
        Task<IAddOrDeleteRulesApiResponse?> AddOrDeleteRulesOrDefaultAsync(AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun = default, Option<bool> deleteAll = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creation of a Post
        /// </summary>
        /// <remarks>
        /// Causes the User to create a Post under the authorized account.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTweetApiResponse"/>&gt;</returns>
        Task<ICreateTweetApiResponse> CreateTweetAsync(TweetCreateRequest tweetCreateRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creation of a Post
        /// </summary>
        /// <remarks>
        /// Causes the User to create a Post under the authorized account.
        /// </remarks>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTweetApiResponse"/>?&gt;</returns>
        Task<ICreateTweetApiResponse?> CreateTweetOrDefaultAsync(TweetCreateRequest tweetCreateRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post delete by Post ID
        /// </summary>
        /// <remarks>
        /// Delete specified Post (in the path) by ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTweetByIdApiResponse"/>&gt;</returns>
        Task<IDeleteTweetByIdApiResponse> DeleteTweetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post delete by Post ID
        /// </summary>
        /// <remarks>
        /// Delete specified Post (in the path) by ID.
        /// </remarks>
        /// <param name="id">The ID of the Post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTweetByIdApiResponse"/>?&gt;</returns>
        Task<IDeleteTweetByIdApiResponse?> DeleteTweetByIdOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post lookup by Post ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Post specified by the requested ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetByIdApiResponse"/>&gt;</returns>
        Task<IFindTweetByIdApiResponse> FindTweetByIdAsync(string id, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post lookup by Post ID
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Post specified by the requested ID.
        /// </remarks>
        /// <param name="id">A single Post ID.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetByIdApiResponse"/>?&gt;</returns>
        Task<IFindTweetByIdApiResponse?> FindTweetByIdOrDefaultAsync(string id, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post lookup by Post IDs
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Post specified by the requested ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of Post IDs. Up to 100 are allowed in a single request.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsByIdApiResponse"/>&gt;</returns>
        Task<IFindTweetsByIdApiResponse> FindTweetsByIdAsync(List<string> ids, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post lookup by Post IDs
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about the Post specified by the requested ID.
        /// </remarks>
        /// <param name="ids">A comma separated list of Post IDs. Up to 100 are allowed in a single request.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsByIdApiResponse"/>?&gt;</returns>
        Task<IFindTweetsByIdApiResponse?> FindTweetsByIdOrDefaultAsync(List<string> ids, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts that quote a Post.
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about each Post that quotes the Post specified by the requested ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results to be returned. (optional, default to 10)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatQuoteATweetApiResponse"/>&gt;</returns>
        Task<IFindTweetsThatQuoteATweetApiResponse> FindTweetsThatQuoteATweetAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts that quote a Post.
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about each Post that quotes the Post specified by the requested ID.
        /// </remarks>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results to be returned. (optional, default to 10)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatQuoteATweetApiResponse"/>?&gt;</returns>
        Task<IFindTweetsThatQuoteATweetApiResponse?> FindTweetsThatQuoteATweetOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts that repost a Post.
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about each Post that has retweeted the Post specified by the requested ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatRetweetATweetApiResponse"/>&gt;</returns>
        Task<IFindTweetsThatRetweetATweetApiResponse> FindTweetsThatRetweetATweetAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts that repost a Post.
        /// </summary>
        /// <remarks>
        /// Returns a variety of information about each Post that has retweeted the Post specified by the requested ID.
        /// </remarks>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatRetweetATweetApiResponse"/>?&gt;</returns>
        Task<IFindTweetsThatRetweetATweetApiResponse?> FindTweetsThatRetweetATweetOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rules lookup
        /// </summary>
        /// <remarks>
        /// Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of Rule IDs. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 1000)</param>
        /// <param name="paginationToken">This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRulesApiResponse"/>&gt;</returns>
        Task<IGetRulesApiResponse> GetRulesAsync(Option<List<string>> ids = default, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Rules lookup
        /// </summary>
        /// <remarks>
        /// Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
        /// </remarks>
        /// <param name="ids">A comma-separated list of Rule IDs. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 1000)</param>
        /// <param name="paginationToken">This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRulesApiResponse"/>?&gt;</returns>
        Task<IGetRulesApiResponse?> GetRulesOrDefaultAsync(Option<List<string>> ids = default, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamApiResponse"/>&gt;</returns>
        Task<IGetTweetsFirehoseStreamApiResponse> GetTweetsFirehoseStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamApiResponse"/>?&gt;</returns>
        Task<IGetTweetsFirehoseStreamApiResponse?> GetTweetsFirehoseStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// English Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of English Language public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangEnApiResponse"/>&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangEnApiResponse> GetTweetsFirehoseStreamLangEnAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// English Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of English Language public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangEnApiResponse"/>?&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangEnApiResponse?> GetTweetsFirehoseStreamLangEnOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Japanese Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Japanese Language public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangJaApiResponse"/>&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangJaApiResponse> GetTweetsFirehoseStreamLangJaAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Japanese Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Japanese Language public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangJaApiResponse"/>?&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangJaApiResponse?> GetTweetsFirehoseStreamLangJaOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Korean Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Korean Language public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangKoApiResponse"/>&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangKoApiResponse> GetTweetsFirehoseStreamLangKoAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Korean Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Korean Language public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangKoApiResponse"/>?&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangKoApiResponse?> GetTweetsFirehoseStreamLangKoOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Portuguese Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Portuguese Language public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangPtApiResponse"/>&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangPtApiResponse> GetTweetsFirehoseStreamLangPtAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Portuguese Language Firehose stream
        /// </summary>
        /// <remarks>
        /// Streams 100% of Portuguese Language public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangPtApiResponse"/>?&gt;</returns>
        Task<IGetTweetsFirehoseStreamLangPtApiResponse?> GetTweetsFirehoseStreamLangPtOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sample 10% stream
        /// </summary>
        /// <remarks>
        /// Streams a deterministic 10% of public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsSample10StreamApiResponse"/>&gt;</returns>
        Task<IGetTweetsSample10StreamApiResponse> GetTweetsSample10StreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sample 10% stream
        /// </summary>
        /// <remarks>
        /// Streams a deterministic 10% of public Posts.
        /// </remarks>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsSample10StreamApiResponse"/>?&gt;</returns>
        Task<IGetTweetsSample10StreamApiResponse?> GetTweetsSample10StreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Hide replies
        /// </summary>
        /// <remarks>
        /// Hides or unhides a reply to an owned conversation.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetId">The ID of the reply that you want to hide or unhide.</param>
        /// <param name="tweetHideRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHideReplyByIdApiResponse"/>&gt;</returns>
        Task<IHideReplyByIdApiResponse> HideReplyByIdAsync(string tweetId, Option<TweetHideRequest> tweetHideRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Hide replies
        /// </summary>
        /// <remarks>
        /// Hides or unhides a reply to an owned conversation.
        /// </remarks>
        /// <param name="tweetId">The ID of the reply that you want to hide or unhide.</param>
        /// <param name="tweetHideRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHideReplyByIdApiResponse"/>?&gt;</returns>
        Task<IHideReplyByIdApiResponse?> HideReplyByIdOrDefaultAsync(string tweetId, Option<TweetHideRequest> tweetHideRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Historical Metrics for Posts
        /// </summary>
        /// <remarks>
        /// Get Historical Metrics for Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetIds">List of PostIds for historical metrics.</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the end of the time range.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the start of the time range.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoricalEngagementApiApiResponse"/>&gt;</returns>
        Task<IHistoricalEngagementApiApiResponse> HistoricalEngagementApiAsync(List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Historical Metrics for Posts
        /// </summary>
        /// <remarks>
        /// Get Historical Metrics for Posts.
        /// </remarks>
        /// <param name="tweetIds">List of PostIds for historical metrics.</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the end of the time range.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the start of the time range.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoricalEngagementApiApiResponse"/>?&gt;</returns>
        Task<IHistoricalEngagementApiApiResponse?> HistoricalEngagementApiOrDefaultAsync(List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Posts timeline by List ID.
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts associated with the provided List ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListsIdTweetsApiResponse"/>&gt;</returns>
        Task<IListsIdTweetsApiResponse> ListsIdTweetsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Posts timeline by List ID.
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts associated with the provided List ID.
        /// </remarks>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListsIdTweetsApiResponse"/>?&gt;</returns>
        Task<IListsIdTweetsApiResponse?> ListsIdTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sample stream
        /// </summary>
        /// <remarks>
        /// Streams a deterministic 1% of public Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISampleStreamApiResponse"/>&gt;</returns>
        Task<ISampleStreamApiResponse> SampleStreamAsync(Option<int> backfillMinutes = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sample stream
        /// </summary>
        /// <remarks>
        /// Streams a deterministic 1% of public Posts.
        /// </remarks>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISampleStreamApiResponse"/>?&gt;</returns>
        Task<ISampleStreamApiResponse?> SampleStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Filtered stream
        /// </summary>
        /// <remarks>
        /// Streams Posts matching the stream&#39;s active rule set.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchStreamApiResponse"/>&gt;</returns>
        Task<ISearchStreamApiResponse> SearchStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Filtered stream
        /// </summary>
        /// <remarks>
        /// Streams Posts matching the stream&#39;s active rule set.
        /// </remarks>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchStreamApiResponse"/>?&gt;</returns>
        Task<ISearchStreamApiResponse?> SearchStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <remarks>
        /// Retrieves the list of Users who purchased a ticket to the given space
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        Task<ISpaceBuyersApiResponse> SpaceBuyersAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <remarks>
        /// Retrieves the list of Users who purchased a ticket to the given space
        /// </remarks>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>?&gt;</returns>
        Task<ISpaceBuyersApiResponse?> SpaceBuyersOrDefaultAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts from a Space.
        /// </summary>
        /// <remarks>
        /// Retrieves Posts shared in the specified Space.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        Task<ISpaceTweetsApiResponse> SpaceTweetsAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Posts from a Space.
        /// </summary>
        /// <remarks>
        /// Retrieves Posts shared in the specified Space.
        /// </remarks>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>?&gt;</returns>
        Task<ISpaceTweetsApiResponse?> SpaceTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Full archive search counts
        /// </summary>
        /// <remarks>
        /// Returns Post Counts that match a search query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsFullArchiveSearchApiResponse"/>&gt;</returns>
        Task<ITweetCountsFullArchiveSearchApiResponse> TweetCountsFullArchiveSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Full archive search counts
        /// </summary>
        /// <remarks>
        /// Returns Post Counts that match a search query.
        /// </remarks>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsFullArchiveSearchApiResponse"/>?&gt;</returns>
        Task<ITweetCountsFullArchiveSearchApiResponse?> TweetCountsFullArchiveSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recent search counts
        /// </summary>
        /// <remarks>
        /// Returns Post Counts from the last 7 days that match a search query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsRecentSearchApiResponse"/>&gt;</returns>
        Task<ITweetCountsRecentSearchApiResponse> TweetCountsRecentSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recent search counts
        /// </summary>
        /// <remarks>
        /// Returns Post Counts from the last 7 days that match a search query.
        /// </remarks>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsRecentSearchApiResponse"/>?&gt;</returns>
        Task<ITweetCountsRecentSearchApiResponse?> TweetCountsRecentSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Full-archive search
        /// </summary>
        /// <remarks>
        /// Returns Posts that match a search query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsFullarchiveSearchApiResponse"/>&gt;</returns>
        Task<ITweetsFullarchiveSearchApiResponse> TweetsFullarchiveSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Full-archive search
        /// </summary>
        /// <remarks>
        /// Returns Posts that match a search query.
        /// </remarks>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsFullarchiveSearchApiResponse"/>?&gt;</returns>
        Task<ITweetsFullarchiveSearchApiResponse?> TweetsFullarchiveSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recent search
        /// </summary>
        /// <remarks>
        /// Returns Posts from the last 7 days that match a search query.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsRecentSearchApiResponse"/>&gt;</returns>
        Task<ITweetsRecentSearchApiResponse> TweetsRecentSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recent search
        /// </summary>
        /// <remarks>
        /// Returns Posts from the last 7 days that match a search query.
        /// </remarks>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsRecentSearchApiResponse"/>?&gt;</returns>
        Task<ITweetsRecentSearchApiResponse?> TweetsRecentSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Last 28hr Metrics for Posts
        /// </summary>
        /// <remarks>
        /// Get 28hr Metrics for Posts.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetIds">List of PostIds for 28hr metrics.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITwentyEightHoursEngagementApiApiResponse"/>&gt;</returns>
        Task<ITwentyEightHoursEngagementApiApiResponse> TwentyEightHoursEngagementApiAsync(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Last 28hr Metrics for Posts
        /// </summary>
        /// <remarks>
        /// Get 28hr Metrics for Posts.
        /// </remarks>
        /// <param name="tweetIds">List of PostIds for 28hr metrics.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITwentyEightHoursEngagementApiApiResponse"/>?&gt;</returns>
        Task<ITwentyEightHoursEngagementApiApiResponse?> TwentyEightHoursEngagementApiOrDefaultAsync(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to like the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to like the specified Post. The User in the path must match the User context authorizing the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to like the Post.</param>
        /// <param name="usersLikesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikeApiResponse"/>&gt;</returns>
        Task<IUsersIdLikeApiResponse> UsersIdLikeAsync(string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to like the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to like the specified Post. The User in the path must match the User context authorizing the request.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to like the Post.</param>
        /// <param name="usersLikesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikeApiResponse"/>?&gt;</returns>
        Task<IUsersIdLikeApiResponse?> UsersIdLikeOrDefaultAsync(string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns Post objects liked by the provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts liked by the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikedTweetsApiResponse"/>&gt;</returns>
        Task<IUsersIdLikedTweetsApiResponse> UsersIdLikedTweetsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns Post objects liked by the provided User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts liked by the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikedTweetsApiResponse"/>?&gt;</returns>
        Task<IUsersIdLikedTweetsApiResponse?> UsersIdLikedTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User mention timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns Post objects that mention username associated to the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMentionsApiResponse"/>&gt;</returns>
        Task<IUsersIdMentionsApiResponse> UsersIdMentionsAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User mention timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns Post objects that mention username associated to the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMentionsApiResponse"/>?&gt;</returns>
        Task<IUsersIdMentionsApiResponse?> UsersIdMentionsOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to repost the specified Post.
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to repost the specified Post. The User in the path must match the User context authorizing the request.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="usersRetweetsCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdRetweetsApiResponse"/>&gt;</returns>
        Task<IUsersIdRetweetsApiResponse> UsersIdRetweetsAsync(string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to repost the specified Post.
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to repost the specified Post. The User in the path must match the User context authorizing the request.
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="usersRetweetsCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdRetweetsApiResponse"/>?&gt;</returns>
        Task<IUsersIdRetweetsApiResponse?> UsersIdRetweetsOrDefaultAsync(string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User home timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns Post objects that appears in the provided User ID&#39;s home timeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User to list Reverse Chronological Timeline Posts of.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTimelineApiResponse"/>&gt;</returns>
        Task<IUsersIdTimelineApiResponse> UsersIdTimelineAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User home timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns Post objects that appears in the provided User ID&#39;s home timeline
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User to list Reverse Chronological Timeline Posts of.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTimelineApiResponse"/>?&gt;</returns>
        Task<IUsersIdTimelineApiResponse?> UsersIdTimelineOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User Posts timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts authored by the provided User ID
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTweetsApiResponse"/>&gt;</returns>
        Task<IUsersIdTweetsApiResponse> UsersIdTweetsAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// User Posts timeline by User ID
        /// </summary>
        /// <remarks>
        /// Returns a list of Posts authored by the provided User ID
        /// </remarks>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTweetsApiResponse"/>?&gt;</returns>
        Task<IUsersIdTweetsApiResponse?> UsersIdTweetsOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to unlike the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to unlike the specified Post. The User must match the User context authorizing the request
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to unlike the Post.</param>
        /// <param name="tweetId">The ID of the Post that the User is requesting to unlike.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnlikeApiResponse"/>&gt;</returns>
        Task<IUsersIdUnlikeApiResponse> UsersIdUnlikeAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to unlike the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to unlike the specified Post. The User must match the User context authorizing the request
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to unlike the Post.</param>
        /// <param name="tweetId">The ID of the Post that the User is requesting to unlike.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnlikeApiResponse"/>?&gt;</returns>
        Task<IUsersIdUnlikeApiResponse?> UsersIdUnlikeOrDefaultAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to unretweet the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to unretweet the specified Post. The User must match the User context authorizing the request
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="sourceTweetId">The ID of the Post that the User is requesting to unretweet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnretweetsApiResponse"/>&gt;</returns>
        Task<IUsersIdUnretweetsApiResponse> UsersIdUnretweetsAsync(string id, string sourceTweetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Causes the User (in the path) to unretweet the specified Post
        /// </summary>
        /// <remarks>
        /// Causes the User (in the path) to unretweet the specified Post. The User must match the User context authorizing the request
        /// </remarks>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="sourceTweetId">The ID of the Post that the User is requesting to unretweet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnretweetsApiResponse"/>?&gt;</returns>
        Task<IUsersIdUnretweetsApiResponse?> UsersIdUnretweetsOrDefaultAsync(string id, string sourceTweetId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddOrDeleteRulesApiResponse"/>
    /// </summary>
    public interface IAddOrDeleteRulesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.AddOrDeleteRulesResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateTweetApiResponse"/>
    /// </summary>
    public interface ICreateTweetApiResponse : Org.OpenAPITools.Client.IApiResponse, ICreated<Org.OpenAPITools.Model.TweetCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTweetByIdApiResponse"/>
    /// </summary>
    public interface IDeleteTweetByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TweetDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindTweetByIdApiResponse"/>
    /// </summary>
    public interface IFindTweetByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsIdResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindTweetsByIdApiResponse"/>
    /// </summary>
    public interface IFindTweetsByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindTweetsThatQuoteATweetApiResponse"/>
    /// </summary>
    public interface IFindTweetsThatQuoteATweetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsIdQuoteTweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IFindTweetsThatRetweetATweetApiResponse"/>
    /// </summary>
    public interface IFindTweetsThatRetweetATweetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsIdRetweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetRulesApiResponse"/>
    /// </summary>
    public interface IGetRulesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.RulesLookupResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsFirehoseStreamApiResponse"/>
    /// </summary>
    public interface IGetTweetsFirehoseStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsFirehoseStreamLangEnApiResponse"/>
    /// </summary>
    public interface IGetTweetsFirehoseStreamLangEnApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsFirehoseStreamLangJaApiResponse"/>
    /// </summary>
    public interface IGetTweetsFirehoseStreamLangJaApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsFirehoseStreamLangKoApiResponse"/>
    /// </summary>
    public interface IGetTweetsFirehoseStreamLangKoApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsFirehoseStreamLangPtApiResponse"/>
    /// </summary>
    public interface IGetTweetsFirehoseStreamLangPtApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetTweetsSample10StreamApiResponse"/>
    /// </summary>
    public interface IGetTweetsSample10StreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsSample10StreamResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IHideReplyByIdApiResponse"/>
    /// </summary>
    public interface IHideReplyByIdApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.TweetHideResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IHistoricalEngagementApiApiResponse"/>
    /// </summary>
    public interface IHistoricalEngagementApiApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2InsightsHistoricalResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListsIdTweetsApiResponse"/>
    /// </summary>
    public interface IListsIdTweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2ListsIdTweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISampleStreamApiResponse"/>
    /// </summary>
    public interface ISampleStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.StreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ISearchStreamApiResponse"/>
    /// </summary>
    public interface ISearchStreamApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FilteredStreamingTweetResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetCountsFullArchiveSearchApiResponse"/>
    /// </summary>
    public interface ITweetCountsFullArchiveSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsCountsAllResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetCountsRecentSearchApiResponse"/>
    /// </summary>
    public interface ITweetCountsRecentSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsCountsRecentResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetsFullarchiveSearchApiResponse"/>
    /// </summary>
    public interface ITweetsFullarchiveSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsSearchAllResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITweetsRecentSearchApiResponse"/>
    /// </summary>
    public interface ITweetsRecentSearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2TweetsSearchRecentResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ITwentyEightHoursEngagementApiApiResponse"/>
    /// </summary>
    public interface ITwentyEightHoursEngagementApiApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2Insights28hrResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdLikeApiResponse"/>
    /// </summary>
    public interface IUsersIdLikeApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersLikesCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdLikedTweetsApiResponse"/>
    /// </summary>
    public interface IUsersIdLikedTweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdLikedTweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdMentionsApiResponse"/>
    /// </summary>
    public interface IUsersIdMentionsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdMentionsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdRetweetsApiResponse"/>
    /// </summary>
    public interface IUsersIdRetweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersRetweetsCreateResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdTimelineApiResponse"/>
    /// </summary>
    public interface IUsersIdTimelineApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdTimelinesReverseChronologicalResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdTweetsApiResponse"/>
    /// </summary>
    public interface IUsersIdTweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Get2UsersIdTweetsResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUnlikeApiResponse"/>
    /// </summary>
    public interface IUsersIdUnlikeApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersLikesDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUsersIdUnretweetsApiResponse"/>
    /// </summary>
    public interface IUsersIdUnretweetsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UsersRetweetsDeleteResponse?>, IDefault<Org.OpenAPITools.Model.Error?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TweetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddOrDeleteRules;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddOrDeleteRules;

        internal void ExecuteOnAddOrDeleteRules(TweetsApi.AddOrDeleteRulesApiResponse apiResponse)
        {
            OnAddOrDeleteRules?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddOrDeleteRules(Exception exception)
        {
            OnErrorAddOrDeleteRules?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateTweet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateTweet;

        internal void ExecuteOnCreateTweet(TweetsApi.CreateTweetApiResponse apiResponse)
        {
            OnCreateTweet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateTweet(Exception exception)
        {
            OnErrorCreateTweet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteTweetById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteTweetById;

        internal void ExecuteOnDeleteTweetById(TweetsApi.DeleteTweetByIdApiResponse apiResponse)
        {
            OnDeleteTweetById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTweetById(Exception exception)
        {
            OnErrorDeleteTweetById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindTweetById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindTweetById;

        internal void ExecuteOnFindTweetById(TweetsApi.FindTweetByIdApiResponse apiResponse)
        {
            OnFindTweetById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindTweetById(Exception exception)
        {
            OnErrorFindTweetById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindTweetsById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindTweetsById;

        internal void ExecuteOnFindTweetsById(TweetsApi.FindTweetsByIdApiResponse apiResponse)
        {
            OnFindTweetsById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindTweetsById(Exception exception)
        {
            OnErrorFindTweetsById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindTweetsThatQuoteATweet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindTweetsThatQuoteATweet;

        internal void ExecuteOnFindTweetsThatQuoteATweet(TweetsApi.FindTweetsThatQuoteATweetApiResponse apiResponse)
        {
            OnFindTweetsThatQuoteATweet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindTweetsThatQuoteATweet(Exception exception)
        {
            OnErrorFindTweetsThatQuoteATweet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindTweetsThatRetweetATweet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindTweetsThatRetweetATweet;

        internal void ExecuteOnFindTweetsThatRetweetATweet(TweetsApi.FindTweetsThatRetweetATweetApiResponse apiResponse)
        {
            OnFindTweetsThatRetweetATweet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindTweetsThatRetweetATweet(Exception exception)
        {
            OnErrorFindTweetsThatRetweetATweet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRules;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRules;

        internal void ExecuteOnGetRules(TweetsApi.GetRulesApiResponse apiResponse)
        {
            OnGetRules?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRules(Exception exception)
        {
            OnErrorGetRules?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsFirehoseStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsFirehoseStream;

        internal void ExecuteOnGetTweetsFirehoseStream(TweetsApi.GetTweetsFirehoseStreamApiResponse apiResponse)
        {
            OnGetTweetsFirehoseStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsFirehoseStream(Exception exception)
        {
            OnErrorGetTweetsFirehoseStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsFirehoseStreamLangEn;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsFirehoseStreamLangEn;

        internal void ExecuteOnGetTweetsFirehoseStreamLangEn(TweetsApi.GetTweetsFirehoseStreamLangEnApiResponse apiResponse)
        {
            OnGetTweetsFirehoseStreamLangEn?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsFirehoseStreamLangEn(Exception exception)
        {
            OnErrorGetTweetsFirehoseStreamLangEn?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsFirehoseStreamLangJa;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsFirehoseStreamLangJa;

        internal void ExecuteOnGetTweetsFirehoseStreamLangJa(TweetsApi.GetTweetsFirehoseStreamLangJaApiResponse apiResponse)
        {
            OnGetTweetsFirehoseStreamLangJa?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsFirehoseStreamLangJa(Exception exception)
        {
            OnErrorGetTweetsFirehoseStreamLangJa?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsFirehoseStreamLangKo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsFirehoseStreamLangKo;

        internal void ExecuteOnGetTweetsFirehoseStreamLangKo(TweetsApi.GetTweetsFirehoseStreamLangKoApiResponse apiResponse)
        {
            OnGetTweetsFirehoseStreamLangKo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsFirehoseStreamLangKo(Exception exception)
        {
            OnErrorGetTweetsFirehoseStreamLangKo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsFirehoseStreamLangPt;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsFirehoseStreamLangPt;

        internal void ExecuteOnGetTweetsFirehoseStreamLangPt(TweetsApi.GetTweetsFirehoseStreamLangPtApiResponse apiResponse)
        {
            OnGetTweetsFirehoseStreamLangPt?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsFirehoseStreamLangPt(Exception exception)
        {
            OnErrorGetTweetsFirehoseStreamLangPt?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTweetsSample10Stream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTweetsSample10Stream;

        internal void ExecuteOnGetTweetsSample10Stream(TweetsApi.GetTweetsSample10StreamApiResponse apiResponse)
        {
            OnGetTweetsSample10Stream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTweetsSample10Stream(Exception exception)
        {
            OnErrorGetTweetsSample10Stream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnHideReplyById;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorHideReplyById;

        internal void ExecuteOnHideReplyById(TweetsApi.HideReplyByIdApiResponse apiResponse)
        {
            OnHideReplyById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorHideReplyById(Exception exception)
        {
            OnErrorHideReplyById?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnHistoricalEngagementApi;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorHistoricalEngagementApi;

        internal void ExecuteOnHistoricalEngagementApi(TweetsApi.HistoricalEngagementApiApiResponse apiResponse)
        {
            OnHistoricalEngagementApi?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorHistoricalEngagementApi(Exception exception)
        {
            OnErrorHistoricalEngagementApi?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListsIdTweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListsIdTweets;

        internal void ExecuteOnListsIdTweets(TweetsApi.ListsIdTweetsApiResponse apiResponse)
        {
            OnListsIdTweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListsIdTweets(Exception exception)
        {
            OnErrorListsIdTweets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSampleStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSampleStream;

        internal void ExecuteOnSampleStream(TweetsApi.SampleStreamApiResponse apiResponse)
        {
            OnSampleStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSampleStream(Exception exception)
        {
            OnErrorSampleStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchStream;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchStream;

        internal void ExecuteOnSearchStream(TweetsApi.SearchStreamApiResponse apiResponse)
        {
            OnSearchStream?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchStream(Exception exception)
        {
            OnErrorSearchStream?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSpaceBuyers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSpaceBuyers;

        internal void ExecuteOnSpaceBuyers(SpacesApi.SpaceBuyersApiResponse apiResponse)
        {
            OnSpaceBuyers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSpaceBuyers(Exception exception)
        {
            OnErrorSpaceBuyers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSpaceTweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSpaceTweets;

        internal void ExecuteOnSpaceTweets(SpacesApi.SpaceTweetsApiResponse apiResponse)
        {
            OnSpaceTweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSpaceTweets(Exception exception)
        {
            OnErrorSpaceTweets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetCountsFullArchiveSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetCountsFullArchiveSearch;

        internal void ExecuteOnTweetCountsFullArchiveSearch(TweetsApi.TweetCountsFullArchiveSearchApiResponse apiResponse)
        {
            OnTweetCountsFullArchiveSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetCountsFullArchiveSearch(Exception exception)
        {
            OnErrorTweetCountsFullArchiveSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetCountsRecentSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetCountsRecentSearch;

        internal void ExecuteOnTweetCountsRecentSearch(TweetsApi.TweetCountsRecentSearchApiResponse apiResponse)
        {
            OnTweetCountsRecentSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetCountsRecentSearch(Exception exception)
        {
            OnErrorTweetCountsRecentSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetsFullarchiveSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetsFullarchiveSearch;

        internal void ExecuteOnTweetsFullarchiveSearch(TweetsApi.TweetsFullarchiveSearchApiResponse apiResponse)
        {
            OnTweetsFullarchiveSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetsFullarchiveSearch(Exception exception)
        {
            OnErrorTweetsFullarchiveSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTweetsRecentSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTweetsRecentSearch;

        internal void ExecuteOnTweetsRecentSearch(TweetsApi.TweetsRecentSearchApiResponse apiResponse)
        {
            OnTweetsRecentSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTweetsRecentSearch(Exception exception)
        {
            OnErrorTweetsRecentSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTwentyEightHoursEngagementApi;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTwentyEightHoursEngagementApi;

        internal void ExecuteOnTwentyEightHoursEngagementApi(TweetsApi.TwentyEightHoursEngagementApiApiResponse apiResponse)
        {
            OnTwentyEightHoursEngagementApi?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTwentyEightHoursEngagementApi(Exception exception)
        {
            OnErrorTwentyEightHoursEngagementApi?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdLike;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdLike;

        internal void ExecuteOnUsersIdLike(TweetsApi.UsersIdLikeApiResponse apiResponse)
        {
            OnUsersIdLike?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdLike(Exception exception)
        {
            OnErrorUsersIdLike?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdLikedTweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdLikedTweets;

        internal void ExecuteOnUsersIdLikedTweets(TweetsApi.UsersIdLikedTweetsApiResponse apiResponse)
        {
            OnUsersIdLikedTweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdLikedTweets(Exception exception)
        {
            OnErrorUsersIdLikedTweets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdMentions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdMentions;

        internal void ExecuteOnUsersIdMentions(TweetsApi.UsersIdMentionsApiResponse apiResponse)
        {
            OnUsersIdMentions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdMentions(Exception exception)
        {
            OnErrorUsersIdMentions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdRetweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdRetweets;

        internal void ExecuteOnUsersIdRetweets(TweetsApi.UsersIdRetweetsApiResponse apiResponse)
        {
            OnUsersIdRetweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdRetweets(Exception exception)
        {
            OnErrorUsersIdRetweets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdTimeline;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdTimeline;

        internal void ExecuteOnUsersIdTimeline(TweetsApi.UsersIdTimelineApiResponse apiResponse)
        {
            OnUsersIdTimeline?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdTimeline(Exception exception)
        {
            OnErrorUsersIdTimeline?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdTweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdTweets;

        internal void ExecuteOnUsersIdTweets(TweetsApi.UsersIdTweetsApiResponse apiResponse)
        {
            OnUsersIdTweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdTweets(Exception exception)
        {
            OnErrorUsersIdTweets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUnlike;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUnlike;

        internal void ExecuteOnUsersIdUnlike(TweetsApi.UsersIdUnlikeApiResponse apiResponse)
        {
            OnUsersIdUnlike?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUnlike(Exception exception)
        {
            OnErrorUsersIdUnlike?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUsersIdUnretweets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUsersIdUnretweets;

        internal void ExecuteOnUsersIdUnretweets(TweetsApi.UsersIdUnretweetsApiResponse apiResponse)
        {
            OnUsersIdUnretweets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUsersIdUnretweets(Exception exception)
        {
            OnErrorUsersIdUnretweets?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TweetsApi : ITweetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TweetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TweetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TweetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TweetsApi(ILogger<TweetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TweetsApiEvents tweetsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TweetsApi>();
            HttpClient = httpClient;
            Events = tweetsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddOrDeleteRules(AddOrDeleteRulesRequest addOrDeleteRulesRequest, ref Option<bool> dryRun, ref Option<bool> deleteAll);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <returns></returns>
        private void ValidateAddOrDeleteRules(AddOrDeleteRulesRequest addOrDeleteRulesRequest)
        {
            if (addOrDeleteRulesRequest == null)
                throw new ArgumentNullException(nameof(addOrDeleteRulesRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun"></param>
        /// <param name="deleteAll"></param>
        private void AfterAddOrDeleteRulesDefaultImplementation(IAddOrDeleteRulesApiResponse apiResponseLocalVar, AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun, Option<bool> deleteAll)
        {
            bool suppressDefaultLog = false;
            AfterAddOrDeleteRules(ref suppressDefaultLog, apiResponseLocalVar, addOrDeleteRulesRequest, dryRun, deleteAll);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun"></param>
        /// <param name="deleteAll"></param>
        partial void AfterAddOrDeleteRules(ref bool suppressDefaultLog, IAddOrDeleteRulesApiResponse apiResponseLocalVar, AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun, Option<bool> deleteAll);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun"></param>
        /// <param name="deleteAll"></param>
        private void OnErrorAddOrDeleteRulesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun, Option<bool> deleteAll)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddOrDeleteRules(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addOrDeleteRulesRequest, dryRun, deleteAll);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun"></param>
        /// <param name="deleteAll"></param>
        partial void OnErrorAddOrDeleteRules(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun, Option<bool> deleteAll);

        /// <summary>
        /// Add/Delete rules Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
        /// </summary>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun">Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)</param>
        /// <param name="deleteAll">Delete All can be used to delete all of the rules associated this client app, it should be specified with no other parameters. Once deleted, rules cannot be recovered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrDeleteRulesApiResponse"/>&gt;</returns>
        public async Task<IAddOrDeleteRulesApiResponse?> AddOrDeleteRulesOrDefaultAsync(AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun = default, Option<bool> deleteAll = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddOrDeleteRulesAsync(addOrDeleteRulesRequest, dryRun, deleteAll, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add/Delete rules Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOrDeleteRulesRequest"></param>
        /// <param name="dryRun">Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)</param>
        /// <param name="deleteAll">Delete All can be used to delete all of the rules associated this client app, it should be specified with no other parameters. Once deleted, rules cannot be recovered. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddOrDeleteRulesApiResponse"/>&gt;</returns>
        public async Task<IAddOrDeleteRulesApiResponse> AddOrDeleteRulesAsync(AddOrDeleteRulesRequest addOrDeleteRulesRequest, Option<bool> dryRun = default, Option<bool> deleteAll = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddOrDeleteRules(addOrDeleteRulesRequest);

                FormatAddOrDeleteRules(addOrDeleteRulesRequest, ref dryRun, ref deleteAll);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/search/stream/rules";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dryRun.IsSet)
                        parseQueryStringLocalVar["dry_run"] = ClientUtils.ParameterToString(dryRun.Value);

                    if (deleteAll.IsSet)
                        parseQueryStringLocalVar["delete_all"] = ClientUtils.ParameterToString(deleteAll.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (addOrDeleteRulesRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addOrDeleteRulesRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddOrDeleteRulesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddOrDeleteRulesApiResponse>();

                        AddOrDeleteRulesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/search/stream/rules", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddOrDeleteRulesDefaultImplementation(apiResponseLocalVar, addOrDeleteRulesRequest, dryRun, deleteAll);

                        Events.ExecuteOnAddOrDeleteRules(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddOrDeleteRulesDefaultImplementation(e, "/2/tweets/search/stream/rules", uriBuilderLocalVar.Path, addOrDeleteRulesRequest, dryRun, deleteAll);
                Events.ExecuteOnErrorAddOrDeleteRules(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddOrDeleteRulesApiResponse"/>
        /// </summary>
        public partial class AddOrDeleteRulesApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddOrDeleteRulesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddOrDeleteRulesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddOrDeleteRulesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddOrDeleteRulesApiResponse(ILogger<AddOrDeleteRulesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.AddOrDeleteRulesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.AddOrDeleteRulesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.AddOrDeleteRulesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateTweet(TweetCreateRequest tweetCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetCreateRequest"></param>
        /// <returns></returns>
        private void ValidateCreateTweet(TweetCreateRequest tweetCreateRequest)
        {
            if (tweetCreateRequest == null)
                throw new ArgumentNullException(nameof(tweetCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetCreateRequest"></param>
        private void AfterCreateTweetDefaultImplementation(ICreateTweetApiResponse apiResponseLocalVar, TweetCreateRequest tweetCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateTweet(ref suppressDefaultLog, apiResponseLocalVar, tweetCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetCreateRequest"></param>
        partial void AfterCreateTweet(ref bool suppressDefaultLog, ICreateTweetApiResponse apiResponseLocalVar, TweetCreateRequest tweetCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetCreateRequest"></param>
        private void OnErrorCreateTweetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TweetCreateRequest tweetCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateTweet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tweetCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetCreateRequest"></param>
        partial void OnErrorCreateTweet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TweetCreateRequest tweetCreateRequest);

        /// <summary>
        /// Creation of a Post Causes the User to create a Post under the authorized account.
        /// </summary>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTweetApiResponse"/>&gt;</returns>
        public async Task<ICreateTweetApiResponse?> CreateTweetOrDefaultAsync(TweetCreateRequest tweetCreateRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateTweetAsync(tweetCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creation of a Post Causes the User to create a Post under the authorized account.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTweetApiResponse"/>&gt;</returns>
        public async Task<ICreateTweetApiResponse> CreateTweetAsync(TweetCreateRequest tweetCreateRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateTweet(tweetCreateRequest);

                FormatCreateTweet(tweetCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets";

                    httpRequestMessageLocalVar.Content = (tweetCreateRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(tweetCreateRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateTweetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateTweetApiResponse>();

                        CreateTweetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateTweetDefaultImplementation(apiResponseLocalVar, tweetCreateRequest);

                        Events.ExecuteOnCreateTweet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateTweetDefaultImplementation(e, "/2/tweets", uriBuilderLocalVar.Path, tweetCreateRequest);
                Events.ExecuteOnErrorCreateTweet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateTweetApiResponse"/>
        /// </summary>
        public partial class CreateTweetApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateTweetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateTweetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateTweetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateTweetApiResponse(ILogger<CreateTweetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TweetCreateResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TweetCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Org.OpenAPITools.Model.TweetCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsCreated;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTweetById(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteTweetById(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteTweetByIdDefaultImplementation(IDeleteTweetByIdApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTweetById(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteTweetById(ref bool suppressDefaultLog, IDeleteTweetByIdApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteTweetByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTweetById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteTweetById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Post delete by Post ID Delete specified Post (in the path) by ID.
        /// </summary>
        /// <param name="id">The ID of the Post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTweetByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteTweetByIdApiResponse?> DeleteTweetByIdOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTweetByIdAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Post delete by Post ID Delete specified Post (in the path) by ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Post to be deleted.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTweetByIdApiResponse"/>&gt;</returns>
        public async Task<IDeleteTweetByIdApiResponse> DeleteTweetByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTweetById(id);

                FormatDeleteTweetById(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteTweetByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTweetByIdApiResponse>();

                        DeleteTweetByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTweetByIdDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteTweetById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTweetByIdDefaultImplementation(e, "/2/tweets/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteTweetById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTweetByIdApiResponse"/>
        /// </summary>
        public partial class DeleteTweetByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteTweetByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTweetByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTweetByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTweetByIdApiResponse(ILogger<DeleteTweetByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TweetDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TweetDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TweetDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindTweetById(ref string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateFindTweetById(string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterFindTweetByIdDefaultImplementation(IFindTweetByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterFindTweetById(ref suppressDefaultLog, apiResponseLocalVar, id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterFindTweetById(ref bool suppressDefaultLog, IFindTweetByIdApiResponse apiResponseLocalVar, string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorFindTweetByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindTweetById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorFindTweetById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Post lookup by Post ID Returns a variety of information about the Post specified by the requested ID.
        /// </summary>
        /// <param name="id">A single Post ID.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetByIdApiResponse"/>&gt;</returns>
        public async Task<IFindTweetByIdApiResponse?> FindTweetByIdOrDefaultAsync(string id, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindTweetByIdAsync(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Post lookup by Post ID Returns a variety of information about the Post specified by the requested ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetByIdApiResponse"/>&gt;</returns>
        public async Task<IFindTweetByIdApiResponse> FindTweetByIdAsync(string id, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindTweetById(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatFindTweetById(ref id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindTweetByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindTweetByIdApiResponse>();

                        FindTweetByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindTweetByIdDefaultImplementation(apiResponseLocalVar, id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnFindTweetById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindTweetByIdDefaultImplementation(e, "/2/tweets/{id}", uriBuilderLocalVar.Path, id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorFindTweetById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindTweetByIdApiResponse"/>
        /// </summary>
        public partial class FindTweetByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindTweetByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindTweetByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindTweetByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindTweetByIdApiResponse(ILogger<FindTweetByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindTweetsById(List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateFindTweetsById(List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (ids == null)
                throw new ArgumentNullException(nameof(ids));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterFindTweetsByIdDefaultImplementation(IFindTweetsByIdApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterFindTweetsById(ref suppressDefaultLog, apiResponseLocalVar, ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterFindTweetsById(ref bool suppressDefaultLog, IFindTweetsByIdApiResponse apiResponseLocalVar, List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorFindTweetsByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindTweetsById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorFindTweetsById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> ids, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Post lookup by Post IDs Returns a variety of information about the Post specified by the requested ID.
        /// </summary>
        /// <param name="ids">A comma separated list of Post IDs. Up to 100 are allowed in a single request.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsByIdApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsByIdApiResponse?> FindTweetsByIdOrDefaultAsync(List<string> ids, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindTweetsByIdAsync(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Post lookup by Post IDs Returns a variety of information about the Post specified by the requested ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma separated list of Post IDs. Up to 100 are allowed in a single request.</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsByIdApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsByIdApiResponse> FindTweetsByIdAsync(List<string> ids, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindTweetsById(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatFindTweetsById(ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["ids"] = ClientUtils.ParameterToString(ids);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindTweetsByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindTweetsByIdApiResponse>();

                        FindTweetsByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindTweetsByIdDefaultImplementation(apiResponseLocalVar, ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnFindTweetsById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindTweetsByIdDefaultImplementation(e, "/2/tweets", uriBuilderLocalVar.Path, ids, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorFindTweetsById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindTweetsByIdApiResponse"/>
        /// </summary>
        public partial class FindTweetsByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindTweetsByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindTweetsByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindTweetsByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindTweetsByIdApiResponse(ILogger<FindTweetsByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindTweetsThatQuoteATweet(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateFindTweetsThatQuoteATweet(string id, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (exclude.IsSet && exclude.Value == null)
                throw new ArgumentNullException(nameof(exclude));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterFindTweetsThatQuoteATweetDefaultImplementation(IFindTweetsThatQuoteATweetApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterFindTweetsThatQuoteATweet(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterFindTweetsThatQuoteATweet(ref bool suppressDefaultLog, IFindTweetsThatQuoteATweetApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorFindTweetsThatQuoteATweetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindTweetsThatQuoteATweet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorFindTweetsThatQuoteATweet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Retrieve Posts that quote a Post. Returns a variety of information about each Post that quotes the Post specified by the requested ID.
        /// </summary>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results to be returned. (optional, default to 10)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatQuoteATweetApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsThatQuoteATweetApiResponse?> FindTweetsThatQuoteATweetOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindTweetsThatQuoteATweetAsync(id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve Posts that quote a Post. Returns a variety of information about each Post that quotes the Post specified by the requested ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results to be returned. (optional, default to 10)</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatQuoteATweetApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsThatQuoteATweetApiResponse> FindTweetsThatQuoteATweetAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindTweetsThatQuoteATweet(id, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatFindTweetsThatQuoteATweet(ref id, ref maxResults, ref paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}/quote_tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (exclude.IsSet)
                        parseQueryStringLocalVar["exclude"] = ClientUtils.ParameterToString(exclude.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindTweetsThatQuoteATweetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindTweetsThatQuoteATweetApiResponse>();

                        FindTweetsThatQuoteATweetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}/quote_tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindTweetsThatQuoteATweetDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnFindTweetsThatQuoteATweet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindTweetsThatQuoteATweetDefaultImplementation(e, "/2/tweets/{id}/quote_tweets", uriBuilderLocalVar.Path, id, maxResults, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorFindTweetsThatQuoteATweet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindTweetsThatQuoteATweetApiResponse"/>
        /// </summary>
        public partial class FindTweetsThatQuoteATweetApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindTweetsThatQuoteATweetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindTweetsThatQuoteATweetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindTweetsThatQuoteATweetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindTweetsThatQuoteATweetApiResponse(ILogger<FindTweetsThatQuoteATweetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsIdQuoteTweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsIdQuoteTweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsIdQuoteTweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFindTweetsThatRetweetATweet(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateFindTweetsThatRetweetATweet(string id, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterFindTweetsThatRetweetATweetDefaultImplementation(IFindTweetsThatRetweetATweetApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterFindTweetsThatRetweetATweet(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterFindTweetsThatRetweetATweet(ref bool suppressDefaultLog, IFindTweetsThatRetweetATweetApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorFindTweetsThatRetweetATweetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindTweetsThatRetweetATweet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorFindTweetsThatRetweetATweet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Retrieve Posts that repost a Post. Returns a variety of information about each Post that has retweeted the Post specified by the requested ID.
        /// </summary>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatRetweetATweetApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsThatRetweetATweetApiResponse?> FindTweetsThatRetweetATweetOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindTweetsThatRetweetATweetAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve Posts that repost a Post. Returns a variety of information about each Post that has retweeted the Post specified by the requested ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">A single Post ID.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindTweetsThatRetweetATweetApiResponse"/>&gt;</returns>
        public async Task<IFindTweetsThatRetweetATweetApiResponse> FindTweetsThatRetweetATweetAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindTweetsThatRetweetATweet(id, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatFindTweetsThatRetweetATweet(ref id, ref maxResults, ref paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{id}/retweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindTweetsThatRetweetATweetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindTweetsThatRetweetATweetApiResponse>();

                        FindTweetsThatRetweetATweetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{id}/retweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindTweetsThatRetweetATweetDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnFindTweetsThatRetweetATweet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindTweetsThatRetweetATweetDefaultImplementation(e, "/2/tweets/{id}/retweets", uriBuilderLocalVar.Path, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorFindTweetsThatRetweetATweet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindTweetsThatRetweetATweetApiResponse"/>
        /// </summary>
        public partial class FindTweetsThatRetweetATweetApiResponse : Org.OpenAPITools.Client.ApiResponse, IFindTweetsThatRetweetATweetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindTweetsThatRetweetATweetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindTweetsThatRetweetATweetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindTweetsThatRetweetATweetApiResponse(ILogger<FindTweetsThatRetweetATweetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsIdRetweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsIdRetweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsIdRetweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRules(Option<List<string>> ids, ref Option<int> maxResults, ref Option<string> paginationToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ids"></param>
        /// <param name="paginationToken"></param>
        /// <returns></returns>
        private void ValidateGetRules(Option<List<string>> ids, Option<string> paginationToken)
        {
            if (ids.IsSet && ids.Value == null)
                throw new ArgumentNullException(nameof(ids));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        private void AfterGetRulesDefaultImplementation(IGetRulesApiResponse apiResponseLocalVar, Option<List<string>> ids, Option<int> maxResults, Option<string> paginationToken)
        {
            bool suppressDefaultLog = false;
            AfterGetRules(ref suppressDefaultLog, apiResponseLocalVar, ids, maxResults, paginationToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        partial void AfterGetRules(ref bool suppressDefaultLog, IGetRulesApiResponse apiResponseLocalVar, Option<List<string>> ids, Option<int> maxResults, Option<string> paginationToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        private void OnErrorGetRulesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> ids, Option<int> maxResults, Option<string> paginationToken)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRules(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ids, maxResults, paginationToken);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ids"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        partial void OnErrorGetRules(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<List<string>> ids, Option<int> maxResults, Option<string> paginationToken);

        /// <summary>
        /// Rules lookup Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
        /// </summary>
        /// <param name="ids">A comma-separated list of Rule IDs. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 1000)</param>
        /// <param name="paginationToken">This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRulesApiResponse"/>&gt;</returns>
        public async Task<IGetRulesApiResponse?> GetRulesOrDefaultAsync(Option<List<string>> ids = default, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRulesAsync(ids, maxResults, paginationToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Rules lookup Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">A comma-separated list of Rule IDs. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 1000)</param>
        /// <param name="paginationToken">This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRulesApiResponse"/>&gt;</returns>
        public async Task<IGetRulesApiResponse> GetRulesAsync(Option<List<string>> ids = default, Option<int> maxResults = default, Option<string> paginationToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRules(ids, paginationToken);

                FormatGetRules(ids, ref maxResults, ref paginationToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/search/stream/rules";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (ids.IsSet)
                        parseQueryStringLocalVar["ids"] = ClientUtils.ParameterToString(ids.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRulesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRulesApiResponse>();

                        GetRulesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/search/stream/rules", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRulesDefaultImplementation(apiResponseLocalVar, ids, maxResults, paginationToken);

                        Events.ExecuteOnGetRules(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRulesDefaultImplementation(e, "/2/tweets/search/stream/rules", uriBuilderLocalVar.Path, ids, maxResults, paginationToken);
                Events.ExecuteOnErrorGetRules(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRulesApiResponse"/>
        /// </summary>
        public partial class GetRulesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetRulesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRulesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRulesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRulesApiResponse(ILogger<GetRulesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.RulesLookupResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.RulesLookupResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.RulesLookupResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsFirehoseStream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsFirehoseStream(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsFirehoseStreamDefaultImplementation(IGetTweetsFirehoseStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsFirehoseStream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsFirehoseStream(ref bool suppressDefaultLog, IGetTweetsFirehoseStreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsFirehoseStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsFirehoseStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsFirehoseStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Firehose stream Streams 100% of public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamApiResponse?> GetTweetsFirehoseStreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsFirehoseStreamAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Firehose stream Streams 100% of public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamApiResponse> GetTweetsFirehoseStreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsFirehoseStream(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsFirehoseStream(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/firehose/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsFirehoseStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsFirehoseStreamApiResponse>();

                        GetTweetsFirehoseStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/firehose/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsFirehoseStreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsFirehoseStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsFirehoseStreamDefaultImplementation(e, "/2/tweets/firehose/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsFirehoseStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsFirehoseStreamApiResponse"/>
        /// </summary>
        public partial class GetTweetsFirehoseStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsFirehoseStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsFirehoseStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsFirehoseStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsFirehoseStreamApiResponse(ILogger<GetTweetsFirehoseStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsFirehoseStreamLangEn(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsFirehoseStreamLangEn(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsFirehoseStreamLangEnDefaultImplementation(IGetTweetsFirehoseStreamLangEnApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsFirehoseStreamLangEn(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsFirehoseStreamLangEn(ref bool suppressDefaultLog, IGetTweetsFirehoseStreamLangEnApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsFirehoseStreamLangEnDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsFirehoseStreamLangEn(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsFirehoseStreamLangEn(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// English Language Firehose stream Streams 100% of English Language public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangEnApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangEnApiResponse?> GetTweetsFirehoseStreamLangEnOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsFirehoseStreamLangEnAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// English Language Firehose stream Streams 100% of English Language public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangEnApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangEnApiResponse> GetTweetsFirehoseStreamLangEnAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsFirehoseStreamLangEn(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsFirehoseStreamLangEn(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/firehose/stream/lang/en";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsFirehoseStreamLangEnApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsFirehoseStreamLangEnApiResponse>();

                        GetTweetsFirehoseStreamLangEnApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/firehose/stream/lang/en", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsFirehoseStreamLangEnDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsFirehoseStreamLangEn(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsFirehoseStreamLangEnDefaultImplementation(e, "/2/tweets/firehose/stream/lang/en", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsFirehoseStreamLangEn(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsFirehoseStreamLangEnApiResponse"/>
        /// </summary>
        public partial class GetTweetsFirehoseStreamLangEnApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsFirehoseStreamLangEnApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsFirehoseStreamLangEnApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsFirehoseStreamLangEnApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsFirehoseStreamLangEnApiResponse(ILogger<GetTweetsFirehoseStreamLangEnApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsFirehoseStreamLangJa(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsFirehoseStreamLangJa(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsFirehoseStreamLangJaDefaultImplementation(IGetTweetsFirehoseStreamLangJaApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsFirehoseStreamLangJa(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsFirehoseStreamLangJa(ref bool suppressDefaultLog, IGetTweetsFirehoseStreamLangJaApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsFirehoseStreamLangJaDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsFirehoseStreamLangJa(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsFirehoseStreamLangJa(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Japanese Language Firehose stream Streams 100% of Japanese Language public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangJaApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangJaApiResponse?> GetTweetsFirehoseStreamLangJaOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsFirehoseStreamLangJaAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Japanese Language Firehose stream Streams 100% of Japanese Language public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangJaApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangJaApiResponse> GetTweetsFirehoseStreamLangJaAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsFirehoseStreamLangJa(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsFirehoseStreamLangJa(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/firehose/stream/lang/ja";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsFirehoseStreamLangJaApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsFirehoseStreamLangJaApiResponse>();

                        GetTweetsFirehoseStreamLangJaApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/firehose/stream/lang/ja", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsFirehoseStreamLangJaDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsFirehoseStreamLangJa(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsFirehoseStreamLangJaDefaultImplementation(e, "/2/tweets/firehose/stream/lang/ja", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsFirehoseStreamLangJa(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsFirehoseStreamLangJaApiResponse"/>
        /// </summary>
        public partial class GetTweetsFirehoseStreamLangJaApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsFirehoseStreamLangJaApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsFirehoseStreamLangJaApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsFirehoseStreamLangJaApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsFirehoseStreamLangJaApiResponse(ILogger<GetTweetsFirehoseStreamLangJaApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsFirehoseStreamLangKo(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsFirehoseStreamLangKo(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsFirehoseStreamLangKoDefaultImplementation(IGetTweetsFirehoseStreamLangKoApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsFirehoseStreamLangKo(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsFirehoseStreamLangKo(ref bool suppressDefaultLog, IGetTweetsFirehoseStreamLangKoApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsFirehoseStreamLangKoDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsFirehoseStreamLangKo(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsFirehoseStreamLangKo(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Korean Language Firehose stream Streams 100% of Korean Language public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangKoApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangKoApiResponse?> GetTweetsFirehoseStreamLangKoOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsFirehoseStreamLangKoAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Korean Language Firehose stream Streams 100% of Korean Language public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangKoApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangKoApiResponse> GetTweetsFirehoseStreamLangKoAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsFirehoseStreamLangKo(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsFirehoseStreamLangKo(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/firehose/stream/lang/ko";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsFirehoseStreamLangKoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsFirehoseStreamLangKoApiResponse>();

                        GetTweetsFirehoseStreamLangKoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/firehose/stream/lang/ko", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsFirehoseStreamLangKoDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsFirehoseStreamLangKo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsFirehoseStreamLangKoDefaultImplementation(e, "/2/tweets/firehose/stream/lang/ko", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsFirehoseStreamLangKo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsFirehoseStreamLangKoApiResponse"/>
        /// </summary>
        public partial class GetTweetsFirehoseStreamLangKoApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsFirehoseStreamLangKoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsFirehoseStreamLangKoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsFirehoseStreamLangKoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsFirehoseStreamLangKoApiResponse(ILogger<GetTweetsFirehoseStreamLangKoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsFirehoseStreamLangPt(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsFirehoseStreamLangPt(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsFirehoseStreamLangPtDefaultImplementation(IGetTweetsFirehoseStreamLangPtApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsFirehoseStreamLangPt(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsFirehoseStreamLangPt(ref bool suppressDefaultLog, IGetTweetsFirehoseStreamLangPtApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsFirehoseStreamLangPtDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsFirehoseStreamLangPt(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsFirehoseStreamLangPt(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Portuguese Language Firehose stream Streams 100% of Portuguese Language public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangPtApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangPtApiResponse?> GetTweetsFirehoseStreamLangPtOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsFirehoseStreamLangPtAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Portuguese Language Firehose stream Streams 100% of Portuguese Language public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsFirehoseStreamLangPtApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsFirehoseStreamLangPtApiResponse> GetTweetsFirehoseStreamLangPtAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsFirehoseStreamLangPt(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsFirehoseStreamLangPt(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/firehose/stream/lang/pt";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsFirehoseStreamLangPtApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsFirehoseStreamLangPtApiResponse>();

                        GetTweetsFirehoseStreamLangPtApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/firehose/stream/lang/pt", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsFirehoseStreamLangPtDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsFirehoseStreamLangPt(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsFirehoseStreamLangPtDefaultImplementation(e, "/2/tweets/firehose/stream/lang/pt", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsFirehoseStreamLangPt(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsFirehoseStreamLangPtApiResponse"/>
        /// </summary>
        public partial class GetTweetsFirehoseStreamLangPtApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsFirehoseStreamLangPtApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsFirehoseStreamLangPtApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsFirehoseStreamLangPtApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsFirehoseStreamLangPtApiResponse(ILogger<GetTweetsFirehoseStreamLangPtApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTweetsSample10Stream(ref int partition, ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateGetTweetsSample10Stream(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterGetTweetsSample10StreamDefaultImplementation(IGetTweetsSample10StreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterGetTweetsSample10Stream(ref suppressDefaultLog, apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterGetTweetsSample10Stream(ref bool suppressDefaultLog, IGetTweetsSample10StreamApiResponse apiResponseLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorGetTweetsSample10StreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTweetsSample10Stream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="partition"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorGetTweetsSample10Stream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int partition, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Sample 10% stream Streams a deterministic 10% of public Posts.
        /// </summary>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsSample10StreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsSample10StreamApiResponse?> GetTweetsSample10StreamOrDefaultAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTweetsSample10StreamAsync(partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sample 10% stream Streams a deterministic 10% of public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="partition">The partition number.</param>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTweetsSample10StreamApiResponse"/>&gt;</returns>
        public async Task<IGetTweetsSample10StreamApiResponse> GetTweetsSample10StreamAsync(int partition, Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTweetsSample10Stream(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatGetTweetsSample10Stream(ref partition, ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/sample10/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["partition"] = ClientUtils.ParameterToString(partition);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTweetsSample10StreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTweetsSample10StreamApiResponse>();

                        GetTweetsSample10StreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/sample10/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTweetsSample10StreamDefaultImplementation(apiResponseLocalVar, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnGetTweetsSample10Stream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTweetsSample10StreamDefaultImplementation(e, "/2/tweets/sample10/stream", uriBuilderLocalVar.Path, partition, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorGetTweetsSample10Stream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTweetsSample10StreamApiResponse"/>
        /// </summary>
        public partial class GetTweetsSample10StreamApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTweetsSample10StreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTweetsSample10StreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTweetsSample10StreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTweetsSample10StreamApiResponse(ILogger<GetTweetsSample10StreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsSample10StreamResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsSample10StreamResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsSample10StreamResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatHideReplyById(ref string tweetId, Option<TweetHideRequest> tweetHideRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetId"></param>
        /// <param name="tweetHideRequest"></param>
        /// <returns></returns>
        private void ValidateHideReplyById(string tweetId, Option<TweetHideRequest> tweetHideRequest)
        {
            if (tweetId == null)
                throw new ArgumentNullException(nameof(tweetId));

            if (tweetHideRequest.IsSet && tweetHideRequest.Value == null)
                throw new ArgumentNullException(nameof(tweetHideRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetId"></param>
        /// <param name="tweetHideRequest"></param>
        private void AfterHideReplyByIdDefaultImplementation(IHideReplyByIdApiResponse apiResponseLocalVar, string tweetId, Option<TweetHideRequest> tweetHideRequest)
        {
            bool suppressDefaultLog = false;
            AfterHideReplyById(ref suppressDefaultLog, apiResponseLocalVar, tweetId, tweetHideRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetId"></param>
        /// <param name="tweetHideRequest"></param>
        partial void AfterHideReplyById(ref bool suppressDefaultLog, IHideReplyByIdApiResponse apiResponseLocalVar, string tweetId, Option<TweetHideRequest> tweetHideRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetId"></param>
        /// <param name="tweetHideRequest"></param>
        private void OnErrorHideReplyByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string tweetId, Option<TweetHideRequest> tweetHideRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorHideReplyById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tweetId, tweetHideRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetId"></param>
        /// <param name="tweetHideRequest"></param>
        partial void OnErrorHideReplyById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string tweetId, Option<TweetHideRequest> tweetHideRequest);

        /// <summary>
        /// Hide replies Hides or unhides a reply to an owned conversation.
        /// </summary>
        /// <param name="tweetId">The ID of the reply that you want to hide or unhide.</param>
        /// <param name="tweetHideRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHideReplyByIdApiResponse"/>&gt;</returns>
        public async Task<IHideReplyByIdApiResponse?> HideReplyByIdOrDefaultAsync(string tweetId, Option<TweetHideRequest> tweetHideRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await HideReplyByIdAsync(tweetId, tweetHideRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Hide replies Hides or unhides a reply to an owned conversation.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetId">The ID of the reply that you want to hide or unhide.</param>
        /// <param name="tweetHideRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHideReplyByIdApiResponse"/>&gt;</returns>
        public async Task<IHideReplyByIdApiResponse> HideReplyByIdAsync(string tweetId, Option<TweetHideRequest> tweetHideRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateHideReplyById(tweetId, tweetHideRequest);

                FormatHideReplyById(ref tweetId, tweetHideRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/{tweet_id}/hidden";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btweet_id%7D", Uri.EscapeDataString(tweetId.ToString()));

                    if (tweetHideRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (tweetHideRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(tweetHideRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<HideReplyByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<HideReplyByIdApiResponse>();

                        HideReplyByIdApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/{tweet_id}/hidden", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterHideReplyByIdDefaultImplementation(apiResponseLocalVar, tweetId, tweetHideRequest);

                        Events.ExecuteOnHideReplyById(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorHideReplyByIdDefaultImplementation(e, "/2/tweets/{tweet_id}/hidden", uriBuilderLocalVar.Path, tweetId, tweetHideRequest);
                Events.ExecuteOnErrorHideReplyById(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="HideReplyByIdApiResponse"/>
        /// </summary>
        public partial class HideReplyByIdApiResponse : Org.OpenAPITools.Client.ApiResponse, IHideReplyByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<HideReplyByIdApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="HideReplyByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public HideReplyByIdApiResponse(ILogger<HideReplyByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.TweetHideResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.TweetHideResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.TweetHideResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatHistoricalEngagementApi(List<string> tweetIds, ref DateTime endTime, ref DateTime startTime, ref string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        /// <returns></returns>
        private void ValidateHistoricalEngagementApi(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            if (tweetIds == null)
                throw new ArgumentNullException(nameof(tweetIds));

            if (granularity == null)
                throw new ArgumentNullException(nameof(granularity));

            if (requestedMetrics == null)
                throw new ArgumentNullException(nameof(requestedMetrics));

            if (engagementFields.IsSet && engagementFields.Value == null)
                throw new ArgumentNullException(nameof(engagementFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="endTime"></param>
        /// <param name="startTime"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        private void AfterHistoricalEngagementApiDefaultImplementation(IHistoricalEngagementApiApiResponse apiResponseLocalVar, List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            bool suppressDefaultLog = false;
            AfterHistoricalEngagementApi(ref suppressDefaultLog, apiResponseLocalVar, tweetIds, endTime, startTime, granularity, requestedMetrics, engagementFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="endTime"></param>
        /// <param name="startTime"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        partial void AfterHistoricalEngagementApi(ref bool suppressDefaultLog, IHistoricalEngagementApiApiResponse apiResponseLocalVar, List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="endTime"></param>
        /// <param name="startTime"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        private void OnErrorHistoricalEngagementApiDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorHistoricalEngagementApi(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tweetIds, endTime, startTime, granularity, requestedMetrics, engagementFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="endTime"></param>
        /// <param name="startTime"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        partial void OnErrorHistoricalEngagementApi(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Get Historical Metrics for Posts Get Historical Metrics for Posts.
        /// </summary>
        /// <param name="tweetIds">List of PostIds for historical metrics.</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the end of the time range.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the start of the time range.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoricalEngagementApiApiResponse"/>&gt;</returns>
        public async Task<IHistoricalEngagementApiApiResponse?> HistoricalEngagementApiOrDefaultAsync(List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await HistoricalEngagementApiAsync(tweetIds, endTime, startTime, granularity, requestedMetrics, engagementFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Historical Metrics for Posts Get Historical Metrics for Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetIds">List of PostIds for historical metrics.</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the end of the time range.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The UTC timestamp representing the start of the time range.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoricalEngagementApiApiResponse"/>&gt;</returns>
        public async Task<IHistoricalEngagementApiApiResponse> HistoricalEngagementApiAsync(List<string> tweetIds, DateTime endTime, DateTime startTime, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateHistoricalEngagementApi(tweetIds, granularity, requestedMetrics, engagementFields);

                FormatHistoricalEngagementApi(tweetIds, ref endTime, ref startTime, ref granularity, requestedMetrics, engagementFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/insights/historical";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["tweet_ids"] = ClientUtils.ParameterToString(tweetIds);
                    parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime);
                    parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime);
                    parseQueryStringLocalVar["granularity"] = ClientUtils.ParameterToString(granularity);
                    parseQueryStringLocalVar["requested_metrics"] = ClientUtils.ParameterToString(requestedMetrics);

                    if (engagementFields.IsSet)
                        parseQueryStringLocalVar["engagement.fields"] = ClientUtils.ParameterToString(engagementFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<HistoricalEngagementApiApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<HistoricalEngagementApiApiResponse>();

                        HistoricalEngagementApiApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/insights/historical", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterHistoricalEngagementApiDefaultImplementation(apiResponseLocalVar, tweetIds, endTime, startTime, granularity, requestedMetrics, engagementFields);

                        Events.ExecuteOnHistoricalEngagementApi(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorHistoricalEngagementApiDefaultImplementation(e, "/2/insights/historical", uriBuilderLocalVar.Path, tweetIds, endTime, startTime, granularity, requestedMetrics, engagementFields);
                Events.ExecuteOnErrorHistoricalEngagementApi(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="HistoricalEngagementApiApiResponse"/>
        /// </summary>
        public partial class HistoricalEngagementApiApiResponse : Org.OpenAPITools.Client.ApiResponse, IHistoricalEngagementApiApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<HistoricalEngagementApiApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="HistoricalEngagementApiApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public HistoricalEngagementApiApiResponse(ILogger<HistoricalEngagementApiApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2InsightsHistoricalResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2InsightsHistoricalResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2InsightsHistoricalResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListsIdTweets(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateListsIdTweets(string id, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterListsIdTweetsDefaultImplementation(IListsIdTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterListsIdTweets(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterListsIdTweets(ref bool suppressDefaultLog, IListsIdTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorListsIdTweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListsIdTweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorListsIdTweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// List Posts timeline by List ID. Returns a list of Posts associated with the provided List ID.
        /// </summary>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListsIdTweetsApiResponse"/>&gt;</returns>
        public async Task<IListsIdTweetsApiResponse?> ListsIdTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListsIdTweetsAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Posts timeline by List ID. Returns a list of Posts associated with the provided List ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the List.</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListsIdTweetsApiResponse"/>&gt;</returns>
        public async Task<IListsIdTweetsApiResponse> ListsIdTweetsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListsIdTweets(id, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatListsIdTweets(ref id, ref maxResults, ref paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/lists/{id}/tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListsIdTweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListsIdTweetsApiResponse>();

                        ListsIdTweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/lists/{id}/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListsIdTweetsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnListsIdTweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListsIdTweetsDefaultImplementation(e, "/2/lists/{id}/tweets", uriBuilderLocalVar.Path, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorListsIdTweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListsIdTweetsApiResponse"/>
        /// </summary>
        public partial class ListsIdTweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IListsIdTweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListsIdTweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListsIdTweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListsIdTweetsApiResponse(ILogger<ListsIdTweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2ListsIdTweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2ListsIdTweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2ListsIdTweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSampleStream(ref Option<int> backfillMinutes, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateSampleStream(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterSampleStreamDefaultImplementation(ISampleStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterSampleStream(ref suppressDefaultLog, apiResponseLocalVar, backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterSampleStream(ref bool suppressDefaultLog, ISampleStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorSampleStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSampleStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorSampleStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Sample stream Streams a deterministic 1% of public Posts.
        /// </summary>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISampleStreamApiResponse"/>&gt;</returns>
        public async Task<ISampleStreamApiResponse?> SampleStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SampleStreamAsync(backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sample stream Streams a deterministic 1% of public Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISampleStreamApiResponse"/>&gt;</returns>
        public async Task<ISampleStreamApiResponse> SampleStreamAsync(Option<int> backfillMinutes = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSampleStream(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatSampleStream(ref backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/sample/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SampleStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SampleStreamApiResponse>();

                        SampleStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/sample/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSampleStreamDefaultImplementation(apiResponseLocalVar, backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnSampleStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSampleStreamDefaultImplementation(e, "/2/tweets/sample/stream", uriBuilderLocalVar.Path, backfillMinutes, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorSampleStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SampleStreamApiResponse"/>
        /// </summary>
        public partial class SampleStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, ISampleStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SampleStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SampleStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SampleStreamApiResponse(ILogger<SampleStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.StreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.StreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.StreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchStream(ref Option<int> backfillMinutes, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateSearchStream(Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterSearchStreamDefaultImplementation(ISearchStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterSearchStream(ref suppressDefaultLog, apiResponseLocalVar, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterSearchStream(ref bool suppressDefaultLog, ISearchStreamApiResponse apiResponseLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorSearchStreamDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchStream(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="backfillMinutes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorSearchStream(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> backfillMinutes, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Filtered stream Streams Posts matching the stream&#39;s active rule set.
        /// </summary>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchStreamApiResponse"/>&gt;</returns>
        public async Task<ISearchStreamApiResponse?> SearchStreamOrDefaultAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchStreamAsync(backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Filtered stream Streams Posts matching the stream&#39;s active rule set.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="backfillMinutes">The number of minutes of backfill requested. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchStreamApiResponse"/>&gt;</returns>
        public async Task<ISearchStreamApiResponse> SearchStreamAsync(Option<int> backfillMinutes = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchStream(tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatSearchStream(ref backfillMinutes, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/search/stream";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (backfillMinutes.IsSet)
                        parseQueryStringLocalVar["backfill_minutes"] = ClientUtils.ParameterToString(backfillMinutes.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchStreamApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchStreamApiResponse>();

                        SearchStreamApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/search/stream", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchStreamDefaultImplementation(apiResponseLocalVar, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnSearchStream(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchStreamDefaultImplementation(e, "/2/tweets/search/stream", uriBuilderLocalVar.Path, backfillMinutes, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorSearchStream(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchStreamApiResponse"/>
        /// </summary>
        public partial class SearchStreamApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchStreamApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchStreamApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchStreamApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchStreamApiResponse(ILogger<SearchStreamApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FilteredStreamingTweetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FilteredStreamingTweetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FilteredStreamingTweetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSpaceBuyers(ref string id, ref Option<string> paginationToken, ref Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        /// <returns></returns>
        private void ValidateSpaceBuyers(string id, Option<string> paginationToken, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void AfterSpaceBuyersDefaultImplementation(ISpaceBuyersApiResponse apiResponseLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLog = false;
            AfterSpaceBuyers(ref suppressDefaultLog, apiResponseLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void AfterSpaceBuyers(ref bool suppressDefaultLog, ISpaceBuyersApiResponse apiResponseLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        private void OnErrorSpaceBuyersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSpaceBuyers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="maxResults"></param>
        /// <param name="userFields"></param>
        /// <param name="expansions"></param>
        /// <param name="tweetFields"></param>
        partial void OnErrorSpaceBuyers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> paginationToken, Option<int> maxResults, Option<List<string>> userFields, Option<List<string>> expansions, Option<List<string>> tweetFields);

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space Retrieves the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        public async Task<ISpaceBuyersApiResponse?> SpaceBuyersOrDefaultAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SpaceBuyersAsync(id, paginationToken, maxResults, userFields, expansions, tweetFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve the list of Users who purchased a ticket to the given space Retrieves the list of Users who purchased a ticket to the given space
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="paginationToken">This parameter is used to get a specified &#39;page&#39; of results. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional, default to 100)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceBuyersApiResponse"/>&gt;</returns>
        public async Task<ISpaceBuyersApiResponse> SpaceBuyersAsync(string id, Option<string> paginationToken = default, Option<int> maxResults = default, Option<List<string>> userFields = default, Option<List<string>> expansions = default, Option<List<string>> tweetFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSpaceBuyers(id, paginationToken, userFields, expansions, tweetFields);

                FormatSpaceBuyers(ref id, ref paginationToken, ref maxResults, userFields, expansions, tweetFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/{id}/buyers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SpacesApi.SpaceBuyersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SpacesApi.SpaceBuyersApiResponse>();

                        SpacesApi.SpaceBuyersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/{id}/buyers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSpaceBuyersDefaultImplementation(apiResponseLocalVar, id, paginationToken, maxResults, userFields, expansions, tweetFields);

                        Events.ExecuteOnSpaceBuyers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSpaceBuyersDefaultImplementation(e, "/2/spaces/{id}/buyers", uriBuilderLocalVar.Path, id, paginationToken, maxResults, userFields, expansions, tweetFields);
                Events.ExecuteOnErrorSpaceBuyers(e);
                throw;
            }
        }

        partial void FormatSpaceTweets(ref string id, ref Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateSpaceTweets(string id, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterSpaceTweetsDefaultImplementation(ISpaceTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterSpaceTweets(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterSpaceTweets(ref bool suppressDefaultLog, ISpaceTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorSpaceTweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSpaceTweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorSpaceTweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Retrieve Posts from a Space. Retrieves Posts shared in the specified Space.
        /// </summary>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        public async Task<ISpaceTweetsApiResponse?> SpaceTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SpaceTweetsAsync(id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve Posts from a Space. Retrieves Posts shared in the specified Space.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Space to be retrieved.</param>
        /// <param name="maxResults">The number of Posts to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpaceTweetsApiResponse"/>&gt;</returns>
        public async Task<ISpaceTweetsApiResponse> SpaceTweetsAsync(string id, Option<int> maxResults = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSpaceTweets(id, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatSpaceTweets(ref id, ref maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/spaces/{id}/tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SpacesApi.SpaceTweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SpacesApi.SpaceTweetsApiResponse>();

                        SpacesApi.SpaceTweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/spaces/{id}/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSpaceTweetsDefaultImplementation(apiResponseLocalVar, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnSpaceTweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSpaceTweetsDefaultImplementation(e, "/2/spaces/{id}/tweets", uriBuilderLocalVar.Path, id, maxResults, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorSpaceTweets(e);
                throw;
            }
        }

        partial void FormatTweetCountsFullArchiveSearch(ref string query, ref Option<DateTime> startTime, ref Option<DateTime> endTime, ref Option<string> sinceId, ref Option<string> untilId, ref Option<string> nextToken, ref Option<string> paginationToken, ref Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        /// <returns></returns>
        private void ValidateTweetCountsFullArchiveSearch(string query, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (granularity.IsSet && granularity.Value == null)
                throw new ArgumentNullException(nameof(granularity));

            if (searchCountFields.IsSet && searchCountFields.Value == null)
                throw new ArgumentNullException(nameof(searchCountFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        private void AfterTweetCountsFullArchiveSearchDefaultImplementation(ITweetCountsFullArchiveSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetCountsFullArchiveSearch(ref suppressDefaultLog, apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        partial void AfterTweetCountsFullArchiveSearch(ref bool suppressDefaultLog, ITweetCountsFullArchiveSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        private void OnErrorTweetCountsFullArchiveSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetCountsFullArchiveSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        partial void OnErrorTweetCountsFullArchiveSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Full archive search counts Returns Post Counts that match a search query.
        /// </summary>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsFullArchiveSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetCountsFullArchiveSearchApiResponse?> TweetCountsFullArchiveSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetCountsFullArchiveSearchAsync(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Full archive search counts Returns Post Counts that match a search query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsFullArchiveSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetCountsFullArchiveSearchApiResponse> TweetCountsFullArchiveSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetCountsFullArchiveSearch(query, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);

                FormatTweetCountsFullArchiveSearch(ref query, ref startTime, ref endTime, ref sinceId, ref untilId, ref nextToken, ref paginationToken, ref granularity, searchCountFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/counts/all";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (granularity.IsSet)
                        parseQueryStringLocalVar["granularity"] = ClientUtils.ParameterToString(granularity.Value);

                    if (searchCountFields.IsSet)
                        parseQueryStringLocalVar["search_count.fields"] = ClientUtils.ParameterToString(searchCountFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetCountsFullArchiveSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetCountsFullArchiveSearchApiResponse>();

                        TweetCountsFullArchiveSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/counts/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetCountsFullArchiveSearchDefaultImplementation(apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);

                        Events.ExecuteOnTweetCountsFullArchiveSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetCountsFullArchiveSearchDefaultImplementation(e, "/2/tweets/counts/all", uriBuilderLocalVar.Path, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
                Events.ExecuteOnErrorTweetCountsFullArchiveSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetCountsFullArchiveSearchApiResponse"/>
        /// </summary>
        public partial class TweetCountsFullArchiveSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetCountsFullArchiveSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetCountsFullArchiveSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetCountsFullArchiveSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetCountsFullArchiveSearchApiResponse(ILogger<TweetCountsFullArchiveSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsCountsAllResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsCountsAllResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsCountsAllResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTweetCountsRecentSearch(ref string query, ref Option<DateTime> startTime, ref Option<DateTime> endTime, ref Option<string> sinceId, ref Option<string> untilId, ref Option<string> nextToken, ref Option<string> paginationToken, ref Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        /// <returns></returns>
        private void ValidateTweetCountsRecentSearch(string query, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (granularity.IsSet && granularity.Value == null)
                throw new ArgumentNullException(nameof(granularity));

            if (searchCountFields.IsSet && searchCountFields.Value == null)
                throw new ArgumentNullException(nameof(searchCountFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        private void AfterTweetCountsRecentSearchDefaultImplementation(ITweetCountsRecentSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetCountsRecentSearch(ref suppressDefaultLog, apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        partial void AfterTweetCountsRecentSearch(ref bool suppressDefaultLog, ITweetCountsRecentSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        private void OnErrorTweetCountsRecentSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetCountsRecentSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="granularity"></param>
        /// <param name="searchCountFields"></param>
        partial void OnErrorTweetCountsRecentSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> granularity, Option<List<string>> searchCountFields);

        /// <summary>
        /// Recent search counts Returns Post Counts from the last 7 days that match a search query.
        /// </summary>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsRecentSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetCountsRecentSearchApiResponse?> TweetCountsRecentSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetCountsRecentSearchAsync(query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Recent search counts Returns Post Counts from the last 7 days that match a search query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="granularity">The granularity for the search counts results. (optional, default to hour)</param>
        /// <param name="searchCountFields">A comma separated list of SearchCount fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetCountsRecentSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetCountsRecentSearchApiResponse> TweetCountsRecentSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> granularity = default, Option<List<string>> searchCountFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetCountsRecentSearch(query, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);

                FormatTweetCountsRecentSearch(ref query, ref startTime, ref endTime, ref sinceId, ref untilId, ref nextToken, ref paginationToken, ref granularity, searchCountFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/counts/recent";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (granularity.IsSet)
                        parseQueryStringLocalVar["granularity"] = ClientUtils.ParameterToString(granularity.Value);

                    if (searchCountFields.IsSet)
                        parseQueryStringLocalVar["search_count.fields"] = ClientUtils.ParameterToString(searchCountFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetCountsRecentSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetCountsRecentSearchApiResponse>();

                        TweetCountsRecentSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/counts/recent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetCountsRecentSearchDefaultImplementation(apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);

                        Events.ExecuteOnTweetCountsRecentSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetCountsRecentSearchDefaultImplementation(e, "/2/tweets/counts/recent", uriBuilderLocalVar.Path, query, startTime, endTime, sinceId, untilId, nextToken, paginationToken, granularity, searchCountFields);
                Events.ExecuteOnErrorTweetCountsRecentSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetCountsRecentSearchApiResponse"/>
        /// </summary>
        public partial class TweetCountsRecentSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetCountsRecentSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetCountsRecentSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetCountsRecentSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetCountsRecentSearchApiResponse(ILogger<TweetCountsRecentSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsCountsRecentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsCountsRecentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsCountsRecentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTweetsFullarchiveSearch(ref string query, ref Option<DateTime> startTime, ref Option<DateTime> endTime, ref Option<string> sinceId, ref Option<string> untilId, ref Option<int> maxResults, ref Option<string> nextToken, ref Option<string> paginationToken, ref Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateTweetsFullarchiveSearch(string query, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (sortOrder.IsSet && sortOrder.Value == null)
                throw new ArgumentNullException(nameof(sortOrder));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterTweetsFullarchiveSearchDefaultImplementation(ITweetsFullarchiveSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetsFullarchiveSearch(ref suppressDefaultLog, apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterTweetsFullarchiveSearch(ref bool suppressDefaultLog, ITweetsFullarchiveSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorTweetsFullarchiveSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetsFullarchiveSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorTweetsFullarchiveSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Full-archive search Returns Posts that match a search query.
        /// </summary>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsFullarchiveSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetsFullarchiveSearchApiResponse?> TweetsFullarchiveSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetsFullarchiveSearchAsync(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Full-archive search Returns Posts that match a search query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsFullarchiveSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetsFullarchiveSearchApiResponse> TweetsFullarchiveSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetsFullarchiveSearch(query, sinceId, untilId, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatTweetsFullarchiveSearch(ref query, ref startTime, ref endTime, ref sinceId, ref untilId, ref maxResults, ref nextToken, ref paginationToken, ref sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/search/all";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (sortOrder.IsSet)
                        parseQueryStringLocalVar["sort_order"] = ClientUtils.ParameterToString(sortOrder.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetsFullarchiveSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetsFullarchiveSearchApiResponse>();

                        TweetsFullarchiveSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/search/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetsFullarchiveSearchDefaultImplementation(apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnTweetsFullarchiveSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetsFullarchiveSearchDefaultImplementation(e, "/2/tweets/search/all", uriBuilderLocalVar.Path, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorTweetsFullarchiveSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetsFullarchiveSearchApiResponse"/>
        /// </summary>
        public partial class TweetsFullarchiveSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetsFullarchiveSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetsFullarchiveSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetsFullarchiveSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetsFullarchiveSearchApiResponse(ILogger<TweetsFullarchiveSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsSearchAllResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsSearchAllResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsSearchAllResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTweetsRecentSearch(ref string query, ref Option<DateTime> startTime, ref Option<DateTime> endTime, ref Option<string> sinceId, ref Option<string> untilId, ref Option<int> maxResults, ref Option<string> nextToken, ref Option<string> paginationToken, ref Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="query"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateTweetsRecentSearch(string query, Option<string> sinceId, Option<string> untilId, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (query == null)
                throw new ArgumentNullException(nameof(query));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (nextToken.IsSet && nextToken.Value == null)
                throw new ArgumentNullException(nameof(nextToken));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (sortOrder.IsSet && sortOrder.Value == null)
                throw new ArgumentNullException(nameof(sortOrder));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterTweetsRecentSearchDefaultImplementation(ITweetsRecentSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterTweetsRecentSearch(ref suppressDefaultLog, apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterTweetsRecentSearch(ref bool suppressDefaultLog, ITweetsRecentSearchApiResponse apiResponseLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorTweetsRecentSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTweetsRecentSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="nextToken"></param>
        /// <param name="paginationToken"></param>
        /// <param name="sortOrder"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorTweetsRecentSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string query, Option<DateTime> startTime, Option<DateTime> endTime, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> nextToken, Option<string> paginationToken, Option<string> sortOrder, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Recent search Returns Posts from the last 7 days that match a search query.
        /// </summary>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsRecentSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetsRecentSearchApiResponse?> TweetsRecentSearchOrDefaultAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TweetsRecentSearchAsync(query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Recent search Returns Posts from the last 7 days that match a search query.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">One query/rule/filter for matching Posts. Refer to https://t.co/rulelength to identify the max query length.</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Posts will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Posts will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)</param>
        /// <param name="sinceId">Returns results with a Post ID greater than (that is, more recent than) the specified ID. (optional)</param>
        /// <param name="untilId">Returns results with a Post ID less than (that is, older than) the specified ID. (optional)</param>
        /// <param name="maxResults">The maximum number of search results to be returned by a request. (optional, default to 10)</param>
        /// <param name="nextToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)</param>
        /// <param name="sortOrder">This order in which to return results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITweetsRecentSearchApiResponse"/>&gt;</returns>
        public async Task<ITweetsRecentSearchApiResponse> TweetsRecentSearchAsync(string query, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> nextToken = default, Option<string> paginationToken = default, Option<string> sortOrder = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTweetsRecentSearch(query, sinceId, untilId, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatTweetsRecentSearch(ref query, ref startTime, ref endTime, ref sinceId, ref untilId, ref maxResults, ref nextToken, ref paginationToken, ref sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/tweets/search/recent";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (nextToken.IsSet)
                        parseQueryStringLocalVar["next_token"] = ClientUtils.ParameterToString(nextToken.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (sortOrder.IsSet)
                        parseQueryStringLocalVar["sort_order"] = ClientUtils.ParameterToString(sortOrder.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TweetsRecentSearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TweetsRecentSearchApiResponse>();

                        TweetsRecentSearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/tweets/search/recent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTweetsRecentSearchDefaultImplementation(apiResponseLocalVar, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnTweetsRecentSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTweetsRecentSearchDefaultImplementation(e, "/2/tweets/search/recent", uriBuilderLocalVar.Path, query, startTime, endTime, sinceId, untilId, maxResults, nextToken, paginationToken, sortOrder, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorTweetsRecentSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TweetsRecentSearchApiResponse"/>
        /// </summary>
        public partial class TweetsRecentSearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ITweetsRecentSearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TweetsRecentSearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TweetsRecentSearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TweetsRecentSearchApiResponse(ILogger<TweetsRecentSearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2TweetsSearchRecentResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2TweetsSearchRecentResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2TweetsSearchRecentResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTwentyEightHoursEngagementApi(List<string> tweetIds, ref string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        /// <returns></returns>
        private void ValidateTwentyEightHoursEngagementApi(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            if (tweetIds == null)
                throw new ArgumentNullException(nameof(tweetIds));

            if (granularity == null)
                throw new ArgumentNullException(nameof(granularity));

            if (requestedMetrics == null)
                throw new ArgumentNullException(nameof(requestedMetrics));

            if (engagementFields.IsSet && engagementFields.Value == null)
                throw new ArgumentNullException(nameof(engagementFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        private void AfterTwentyEightHoursEngagementApiDefaultImplementation(ITwentyEightHoursEngagementApiApiResponse apiResponseLocalVar, List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            bool suppressDefaultLog = false;
            AfterTwentyEightHoursEngagementApi(ref suppressDefaultLog, apiResponseLocalVar, tweetIds, granularity, requestedMetrics, engagementFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        partial void AfterTwentyEightHoursEngagementApi(ref bool suppressDefaultLog, ITwentyEightHoursEngagementApiApiResponse apiResponseLocalVar, List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        private void OnErrorTwentyEightHoursEngagementApiDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTwentyEightHoursEngagementApi(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tweetIds, granularity, requestedMetrics, engagementFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tweetIds"></param>
        /// <param name="granularity"></param>
        /// <param name="requestedMetrics"></param>
        /// <param name="engagementFields"></param>
        partial void OnErrorTwentyEightHoursEngagementApi(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields);

        /// <summary>
        /// Get Last 28hr Metrics for Posts Get 28hr Metrics for Posts.
        /// </summary>
        /// <param name="tweetIds">List of PostIds for 28hr metrics.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITwentyEightHoursEngagementApiApiResponse"/>&gt;</returns>
        public async Task<ITwentyEightHoursEngagementApiApiResponse?> TwentyEightHoursEngagementApiOrDefaultAsync(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TwentyEightHoursEngagementApiAsync(tweetIds, granularity, requestedMetrics, engagementFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Last 28hr Metrics for Posts Get 28hr Metrics for Posts.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tweetIds">List of PostIds for 28hr metrics.</param>
        /// <param name="granularity">granularity of metrics response.</param>
        /// <param name="requestedMetrics">request metrics for historical request.</param>
        /// <param name="engagementFields">A comma separated list of Engagement fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITwentyEightHoursEngagementApiApiResponse"/>&gt;</returns>
        public async Task<ITwentyEightHoursEngagementApiApiResponse> TwentyEightHoursEngagementApiAsync(List<string> tweetIds, string granularity, List<string> requestedMetrics, Option<List<string>> engagementFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTwentyEightHoursEngagementApi(tweetIds, granularity, requestedMetrics, engagementFields);

                FormatTwentyEightHoursEngagementApi(tweetIds, ref granularity, requestedMetrics, engagementFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/insights/28hr";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["tweet_ids"] = ClientUtils.ParameterToString(tweetIds);
                    parseQueryStringLocalVar["granularity"] = ClientUtils.ParameterToString(granularity);
                    parseQueryStringLocalVar["requested_metrics"] = ClientUtils.ParameterToString(requestedMetrics);

                    if (engagementFields.IsSet)
                        parseQueryStringLocalVar["engagement.fields"] = ClientUtils.ParameterToString(engagementFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TwentyEightHoursEngagementApiApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TwentyEightHoursEngagementApiApiResponse>();

                        TwentyEightHoursEngagementApiApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/insights/28hr", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTwentyEightHoursEngagementApiDefaultImplementation(apiResponseLocalVar, tweetIds, granularity, requestedMetrics, engagementFields);

                        Events.ExecuteOnTwentyEightHoursEngagementApi(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTwentyEightHoursEngagementApiDefaultImplementation(e, "/2/insights/28hr", uriBuilderLocalVar.Path, tweetIds, granularity, requestedMetrics, engagementFields);
                Events.ExecuteOnErrorTwentyEightHoursEngagementApi(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TwentyEightHoursEngagementApiApiResponse"/>
        /// </summary>
        public partial class TwentyEightHoursEngagementApiApiResponse : Org.OpenAPITools.Client.ApiResponse, ITwentyEightHoursEngagementApiApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TwentyEightHoursEngagementApiApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TwentyEightHoursEngagementApiApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TwentyEightHoursEngagementApiApiResponse(ILogger<TwentyEightHoursEngagementApiApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2Insights28hrResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2Insights28hrResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2Insights28hrResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdLike(ref string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="usersLikesCreateRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdLike(string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (usersLikesCreateRequest.IsSet && usersLikesCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(usersLikesCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersLikesCreateRequest"></param>
        private void AfterUsersIdLikeDefaultImplementation(IUsersIdLikeApiResponse apiResponseLocalVar, string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdLike(ref suppressDefaultLog, apiResponseLocalVar, id, usersLikesCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersLikesCreateRequest"></param>
        partial void AfterUsersIdLike(ref bool suppressDefaultLog, IUsersIdLikeApiResponse apiResponseLocalVar, string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersLikesCreateRequest"></param>
        private void OnErrorUsersIdLikeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdLike(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, usersLikesCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersLikesCreateRequest"></param>
        partial void OnErrorUsersIdLike(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest);

        /// <summary>
        /// Causes the User (in the path) to like the specified Post Causes the User (in the path) to like the specified Post. The User in the path must match the User context authorizing the request.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to like the Post.</param>
        /// <param name="usersLikesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdLikeApiResponse?> UsersIdLikeOrDefaultAsync(string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdLikeAsync(id, usersLikesCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes the User (in the path) to like the specified Post Causes the User (in the path) to like the specified Post. The User in the path must match the User context authorizing the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to like the Post.</param>
        /// <param name="usersLikesCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdLikeApiResponse> UsersIdLikeAsync(string id, Option<UsersLikesCreateRequest> usersLikesCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdLike(id, usersLikesCreateRequest);

                FormatUsersIdLike(ref id, usersLikesCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/likes";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (usersLikesCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (usersLikesCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersLikesCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdLikeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdLikeApiResponse>();

                        UsersIdLikeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/likes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdLikeDefaultImplementation(apiResponseLocalVar, id, usersLikesCreateRequest);

                        Events.ExecuteOnUsersIdLike(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdLikeDefaultImplementation(e, "/2/users/{id}/likes", uriBuilderLocalVar.Path, id, usersLikesCreateRequest);
                Events.ExecuteOnErrorUsersIdLike(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdLikeApiResponse"/>
        /// </summary>
        public partial class UsersIdLikeApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdLikeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdLikeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdLikeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdLikeApiResponse(ILogger<UsersIdLikeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersLikesCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersLikesCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersLikesCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdLikedTweets(ref string id, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdLikedTweets(string id, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterUsersIdLikedTweetsDefaultImplementation(IUsersIdLikedTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdLikedTweets(ref suppressDefaultLog, apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterUsersIdLikedTweets(ref bool suppressDefaultLog, IUsersIdLikedTweetsApiResponse apiResponseLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorUsersIdLikedTweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdLikedTweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorUsersIdLikedTweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Returns Post objects liked by the provided User ID Returns a list of Posts liked by the provided User ID
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikedTweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdLikedTweetsApiResponse?> UsersIdLikedTweetsOrDefaultAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdLikedTweetsAsync(id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns Post objects liked by the provided User ID Returns a list of Posts liked by the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdLikedTweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdLikedTweetsApiResponse> UsersIdLikedTweetsAsync(string id, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdLikedTweets(id, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatUsersIdLikedTweets(ref id, ref maxResults, ref paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/liked_tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdLikedTweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdLikedTweetsApiResponse>();

                        UsersIdLikedTweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/liked_tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdLikedTweetsDefaultImplementation(apiResponseLocalVar, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnUsersIdLikedTweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdLikedTweetsDefaultImplementation(e, "/2/users/{id}/liked_tweets", uriBuilderLocalVar.Path, id, maxResults, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorUsersIdLikedTweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdLikedTweetsApiResponse"/>
        /// </summary>
        public partial class UsersIdLikedTweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdLikedTweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdLikedTweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdLikedTweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdLikedTweetsApiResponse(ILogger<UsersIdLikedTweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdLikedTweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdLikedTweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdLikedTweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdMentions(ref string id, ref Option<string> sinceId, ref Option<string> untilId, ref Option<int> maxResults, ref Option<string> paginationToken, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="paginationToken"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdMentions(string id, Option<string> sinceId, Option<string> untilId, Option<string> paginationToken, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterUsersIdMentionsDefaultImplementation(IUsersIdMentionsApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdMentions(ref suppressDefaultLog, apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterUsersIdMentions(ref bool suppressDefaultLog, IUsersIdMentionsApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorUsersIdMentionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdMentions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorUsersIdMentions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// User mention timeline by User ID Returns Post objects that mention username associated to the provided User ID
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMentionsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMentionsApiResponse?> UsersIdMentionsOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdMentionsAsync(id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User mention timeline by User ID Returns Post objects that mention username associated to the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdMentionsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdMentionsApiResponse> UsersIdMentionsAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdMentions(id, sinceId, untilId, paginationToken, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatUsersIdMentions(ref id, ref sinceId, ref untilId, ref maxResults, ref paginationToken, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/mentions";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdMentionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdMentionsApiResponse>();

                        UsersIdMentionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/mentions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdMentionsDefaultImplementation(apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnUsersIdMentions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdMentionsDefaultImplementation(e, "/2/users/{id}/mentions", uriBuilderLocalVar.Path, id, sinceId, untilId, maxResults, paginationToken, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorUsersIdMentions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdMentionsApiResponse"/>
        /// </summary>
        public partial class UsersIdMentionsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdMentionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdMentionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdMentionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdMentionsApiResponse(ILogger<UsersIdMentionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdMentionsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdMentionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdMentionsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdRetweets(ref string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="usersRetweetsCreateRequest"></param>
        /// <returns></returns>
        private void ValidateUsersIdRetweets(string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (usersRetweetsCreateRequest.IsSet && usersRetweetsCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(usersRetweetsCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersRetweetsCreateRequest"></param>
        private void AfterUsersIdRetweetsDefaultImplementation(IUsersIdRetweetsApiResponse apiResponseLocalVar, string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdRetweets(ref suppressDefaultLog, apiResponseLocalVar, id, usersRetweetsCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersRetweetsCreateRequest"></param>
        partial void AfterUsersIdRetweets(ref bool suppressDefaultLog, IUsersIdRetweetsApiResponse apiResponseLocalVar, string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersRetweetsCreateRequest"></param>
        private void OnErrorUsersIdRetweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdRetweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, usersRetweetsCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="usersRetweetsCreateRequest"></param>
        partial void OnErrorUsersIdRetweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest);

        /// <summary>
        /// Causes the User (in the path) to repost the specified Post. Causes the User (in the path) to repost the specified Post. The User in the path must match the User context authorizing the request.
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="usersRetweetsCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdRetweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdRetweetsApiResponse?> UsersIdRetweetsOrDefaultAsync(string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdRetweetsAsync(id, usersRetweetsCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes the User (in the path) to repost the specified Post. Causes the User (in the path) to repost the specified Post. The User in the path must match the User context authorizing the request.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="usersRetweetsCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdRetweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdRetweetsApiResponse> UsersIdRetweetsAsync(string id, Option<UsersRetweetsCreateRequest> usersRetweetsCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdRetweets(id, usersRetweetsCreateRequest);

                FormatUsersIdRetweets(ref id, usersRetweetsCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/retweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (usersRetweetsCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (usersRetweetsCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(usersRetweetsCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdRetweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdRetweetsApiResponse>();

                        UsersIdRetweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/retweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdRetweetsDefaultImplementation(apiResponseLocalVar, id, usersRetweetsCreateRequest);

                        Events.ExecuteOnUsersIdRetweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdRetweetsDefaultImplementation(e, "/2/users/{id}/retweets", uriBuilderLocalVar.Path, id, usersRetweetsCreateRequest);
                Events.ExecuteOnErrorUsersIdRetweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdRetweetsApiResponse"/>
        /// </summary>
        public partial class UsersIdRetweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdRetweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdRetweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdRetweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdRetweetsApiResponse(ILogger<UsersIdRetweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersRetweetsCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersRetweetsCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersRetweetsCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdTimeline(ref string id, ref Option<string> sinceId, ref Option<string> untilId, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> exclude, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdTimeline(string id, Option<string> sinceId, Option<string> untilId, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (exclude.IsSet && exclude.Value == null)
                throw new ArgumentNullException(nameof(exclude));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterUsersIdTimelineDefaultImplementation(IUsersIdTimelineApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdTimeline(ref suppressDefaultLog, apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterUsersIdTimeline(ref bool suppressDefaultLog, IUsersIdTimelineApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorUsersIdTimelineDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdTimeline(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorUsersIdTimeline(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// User home timeline by User ID Returns Post objects that appears in the provided User ID&#39;s home timeline
        /// </summary>
        /// <param name="id">The ID of the authenticated source User to list Reverse Chronological Timeline Posts of.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTimelineApiResponse"/>&gt;</returns>
        public async Task<IUsersIdTimelineApiResponse?> UsersIdTimelineOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdTimelineAsync(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User home timeline by User ID Returns Post objects that appears in the provided User ID&#39;s home timeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User to list Reverse Chronological Timeline Posts of.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTimelineApiResponse"/>&gt;</returns>
        public async Task<IUsersIdTimelineApiResponse> UsersIdTimelineAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdTimeline(id, sinceId, untilId, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatUsersIdTimeline(ref id, ref sinceId, ref untilId, ref maxResults, ref paginationToken, exclude, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/timelines/reverse_chronological";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (exclude.IsSet)
                        parseQueryStringLocalVar["exclude"] = ClientUtils.ParameterToString(exclude.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdTimelineApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdTimelineApiResponse>();

                        UsersIdTimelineApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/timelines/reverse_chronological", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdTimelineDefaultImplementation(apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnUsersIdTimeline(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdTimelineDefaultImplementation(e, "/2/users/{id}/timelines/reverse_chronological", uriBuilderLocalVar.Path, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorUsersIdTimeline(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdTimelineApiResponse"/>
        /// </summary>
        public partial class UsersIdTimelineApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdTimelineApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdTimelineApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdTimelineApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdTimelineApiResponse(ILogger<UsersIdTimelineApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdTimelinesReverseChronologicalResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdTimelinesReverseChronologicalResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdTimelinesReverseChronologicalResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdTweets(ref string id, ref Option<string> sinceId, ref Option<string> untilId, ref Option<int> maxResults, ref Option<string> paginationToken, Option<List<string>> exclude, ref Option<DateTime> startTime, ref Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        /// <returns></returns>
        private void ValidateUsersIdTweets(string id, Option<string> sinceId, Option<string> untilId, Option<string> paginationToken, Option<List<string>> exclude, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (sinceId.IsSet && sinceId.Value == null)
                throw new ArgumentNullException(nameof(sinceId));

            if (untilId.IsSet && untilId.Value == null)
                throw new ArgumentNullException(nameof(untilId));

            if (paginationToken.IsSet && paginationToken.Value == null)
                throw new ArgumentNullException(nameof(paginationToken));

            if (exclude.IsSet && exclude.Value == null)
                throw new ArgumentNullException(nameof(exclude));

            if (tweetFields.IsSet && tweetFields.Value == null)
                throw new ArgumentNullException(nameof(tweetFields));

            if (expansions.IsSet && expansions.Value == null)
                throw new ArgumentNullException(nameof(expansions));

            if (mediaFields.IsSet && mediaFields.Value == null)
                throw new ArgumentNullException(nameof(mediaFields));

            if (pollFields.IsSet && pollFields.Value == null)
                throw new ArgumentNullException(nameof(pollFields));

            if (userFields.IsSet && userFields.Value == null)
                throw new ArgumentNullException(nameof(userFields));

            if (placeFields.IsSet && placeFields.Value == null)
                throw new ArgumentNullException(nameof(placeFields));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void AfterUsersIdTweetsDefaultImplementation(IUsersIdTweetsApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdTweets(ref suppressDefaultLog, apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void AfterUsersIdTweets(ref bool suppressDefaultLog, IUsersIdTweetsApiResponse apiResponseLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        private void OnErrorUsersIdTweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdTweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sinceId"></param>
        /// <param name="untilId"></param>
        /// <param name="maxResults"></param>
        /// <param name="paginationToken"></param>
        /// <param name="exclude"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="tweetFields"></param>
        /// <param name="expansions"></param>
        /// <param name="mediaFields"></param>
        /// <param name="pollFields"></param>
        /// <param name="userFields"></param>
        /// <param name="placeFields"></param>
        partial void OnErrorUsersIdTweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> sinceId, Option<string> untilId, Option<int> maxResults, Option<string> paginationToken, Option<List<string>> exclude, Option<DateTime> startTime, Option<DateTime> endTime, Option<List<string>> tweetFields, Option<List<string>> expansions, Option<List<string>> mediaFields, Option<List<string>> pollFields, Option<List<string>> userFields, Option<List<string>> placeFields);

        /// <summary>
        /// User Posts timeline by User ID Returns a list of Posts authored by the provided User ID
        /// </summary>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdTweetsApiResponse?> UsersIdTweetsOrDefaultAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdTweetsAsync(id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// User Posts timeline by User ID Returns a list of Posts authored by the provided User ID
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the User to lookup.</param>
        /// <param name="sinceId">The minimum Post ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)</param>
        /// <param name="untilId">The maximum Post ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)</param>
        /// <param name="maxResults">The maximum number of results. (optional)</param>
        /// <param name="paginationToken">This parameter is used to get the next &#39;page&#39; of results. (optional)</param>
        /// <param name="exclude">The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)</param>
        /// <param name="startTime">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Posts will be provided. The since_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="endTime">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Posts will be provided. The until_id parameter takes precedence if it is also specified. (optional)</param>
        /// <param name="tweetFields">A comma separated list of Tweet fields to display. (optional)</param>
        /// <param name="expansions">A comma separated list of fields to expand. (optional)</param>
        /// <param name="mediaFields">A comma separated list of Media fields to display. (optional)</param>
        /// <param name="pollFields">A comma separated list of Poll fields to display. (optional)</param>
        /// <param name="userFields">A comma separated list of User fields to display. (optional)</param>
        /// <param name="placeFields">A comma separated list of Place fields to display. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdTweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdTweetsApiResponse> UsersIdTweetsAsync(string id, Option<string> sinceId = default, Option<string> untilId = default, Option<int> maxResults = default, Option<string> paginationToken = default, Option<List<string>> exclude = default, Option<DateTime> startTime = default, Option<DateTime> endTime = default, Option<List<string>> tweetFields = default, Option<List<string>> expansions = default, Option<List<string>> mediaFields = default, Option<List<string>> pollFields = default, Option<List<string>> userFields = default, Option<List<string>> placeFields = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdTweets(id, sinceId, untilId, paginationToken, exclude, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                FormatUsersIdTweets(ref id, ref sinceId, ref untilId, ref maxResults, ref paginationToken, exclude, ref startTime, ref endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/tweets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (sinceId.IsSet)
                        parseQueryStringLocalVar["since_id"] = ClientUtils.ParameterToString(sinceId.Value);

                    if (untilId.IsSet)
                        parseQueryStringLocalVar["until_id"] = ClientUtils.ParameterToString(untilId.Value);

                    if (maxResults.IsSet)
                        parseQueryStringLocalVar["max_results"] = ClientUtils.ParameterToString(maxResults.Value);

                    if (paginationToken.IsSet)
                        parseQueryStringLocalVar["pagination_token"] = ClientUtils.ParameterToString(paginationToken.Value);

                    if (exclude.IsSet)
                        parseQueryStringLocalVar["exclude"] = ClientUtils.ParameterToString(exclude.Value);

                    if (startTime.IsSet)
                        parseQueryStringLocalVar["start_time"] = ClientUtils.ParameterToString(startTime.Value);

                    if (endTime.IsSet)
                        parseQueryStringLocalVar["end_time"] = ClientUtils.ParameterToString(endTime.Value);

                    if (tweetFields.IsSet)
                        parseQueryStringLocalVar["tweet.fields"] = ClientUtils.ParameterToString(tweetFields.Value);

                    if (expansions.IsSet)
                        parseQueryStringLocalVar["expansions"] = ClientUtils.ParameterToString(expansions.Value);

                    if (mediaFields.IsSet)
                        parseQueryStringLocalVar["media.fields"] = ClientUtils.ParameterToString(mediaFields.Value);

                    if (pollFields.IsSet)
                        parseQueryStringLocalVar["poll.fields"] = ClientUtils.ParameterToString(pollFields.Value);

                    if (userFields.IsSet)
                        parseQueryStringLocalVar["user.fields"] = ClientUtils.ParameterToString(userFields.Value);

                    if (placeFields.IsSet)
                        parseQueryStringLocalVar["place.fields"] = ClientUtils.ParameterToString(placeFields.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdTweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdTweetsApiResponse>();

                        UsersIdTweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/tweets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdTweetsDefaultImplementation(apiResponseLocalVar, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);

                        Events.ExecuteOnUsersIdTweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdTweetsDefaultImplementation(e, "/2/users/{id}/tweets", uriBuilderLocalVar.Path, id, sinceId, untilId, maxResults, paginationToken, exclude, startTime, endTime, tweetFields, expansions, mediaFields, pollFields, userFields, placeFields);
                Events.ExecuteOnErrorUsersIdTweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdTweetsApiResponse"/>
        /// </summary>
        public partial class UsersIdTweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdTweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdTweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdTweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdTweetsApiResponse(ILogger<UsersIdTweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Get2UsersIdTweetsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Get2UsersIdTweetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Get2UsersIdTweetsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUnlike(ref string id, ref string tweetId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        /// <returns></returns>
        private void ValidateUsersIdUnlike(string id, string tweetId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tweetId == null)
                throw new ArgumentNullException(nameof(tweetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        private void AfterUsersIdUnlikeDefaultImplementation(IUsersIdUnlikeApiResponse apiResponseLocalVar, string id, string tweetId)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUnlike(ref suppressDefaultLog, apiResponseLocalVar, id, tweetId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        partial void AfterUsersIdUnlike(ref bool suppressDefaultLog, IUsersIdUnlikeApiResponse apiResponseLocalVar, string id, string tweetId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        private void OnErrorUsersIdUnlikeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string tweetId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUnlike(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, tweetId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tweetId"></param>
        partial void OnErrorUsersIdUnlike(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string tweetId);

        /// <summary>
        /// Causes the User (in the path) to unlike the specified Post Causes the User (in the path) to unlike the specified Post. The User must match the User context authorizing the request
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to unlike the Post.</param>
        /// <param name="tweetId">The ID of the Post that the User is requesting to unlike.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnlikeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnlikeApiResponse?> UsersIdUnlikeOrDefaultAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUnlikeAsync(id, tweetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes the User (in the path) to unlike the specified Post Causes the User (in the path) to unlike the specified Post. The User must match the User context authorizing the request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to unlike the Post.</param>
        /// <param name="tweetId">The ID of the Post that the User is requesting to unlike.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnlikeApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnlikeApiResponse> UsersIdUnlikeAsync(string id, string tweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUnlike(id, tweetId);

                FormatUsersIdUnlike(ref id, ref tweetId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/likes/{tweet_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btweet_id%7D", Uri.EscapeDataString(tweetId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUnlikeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUnlikeApiResponse>();

                        UsersIdUnlikeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/likes/{tweet_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUnlikeDefaultImplementation(apiResponseLocalVar, id, tweetId);

                        Events.ExecuteOnUsersIdUnlike(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUnlikeDefaultImplementation(e, "/2/users/{id}/likes/{tweet_id}", uriBuilderLocalVar.Path, id, tweetId);
                Events.ExecuteOnErrorUsersIdUnlike(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUnlikeApiResponse"/>
        /// </summary>
        public partial class UsersIdUnlikeApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUnlikeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUnlikeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUnlikeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUnlikeApiResponse(ILogger<UsersIdUnlikeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersLikesDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersLikesDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersLikesDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUsersIdUnretweets(ref string id, ref string sourceTweetId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="sourceTweetId"></param>
        /// <returns></returns>
        private void ValidateUsersIdUnretweets(string id, string sourceTweetId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (sourceTweetId == null)
                throw new ArgumentNullException(nameof(sourceTweetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sourceTweetId"></param>
        private void AfterUsersIdUnretweetsDefaultImplementation(IUsersIdUnretweetsApiResponse apiResponseLocalVar, string id, string sourceTweetId)
        {
            bool suppressDefaultLog = false;
            AfterUsersIdUnretweets(ref suppressDefaultLog, apiResponseLocalVar, id, sourceTweetId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sourceTweetId"></param>
        partial void AfterUsersIdUnretweets(ref bool suppressDefaultLog, IUsersIdUnretweetsApiResponse apiResponseLocalVar, string id, string sourceTweetId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sourceTweetId"></param>
        private void OnErrorUsersIdUnretweetsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string sourceTweetId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUsersIdUnretweets(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, sourceTweetId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="sourceTweetId"></param>
        partial void OnErrorUsersIdUnretweets(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string sourceTweetId);

        /// <summary>
        /// Causes the User (in the path) to unretweet the specified Post Causes the User (in the path) to unretweet the specified Post. The User must match the User context authorizing the request
        /// </summary>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="sourceTweetId">The ID of the Post that the User is requesting to unretweet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnretweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnretweetsApiResponse?> UsersIdUnretweetsOrDefaultAsync(string id, string sourceTweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UsersIdUnretweetsAsync(id, sourceTweetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Causes the User (in the path) to unretweet the specified Post Causes the User (in the path) to unretweet the specified Post. The User must match the User context authorizing the request
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the authenticated source User that is requesting to repost the Post.</param>
        /// <param name="sourceTweetId">The ID of the Post that the User is requesting to unretweet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUsersIdUnretweetsApiResponse"/>&gt;</returns>
        public async Task<IUsersIdUnretweetsApiResponse> UsersIdUnretweetsAsync(string id, string sourceTweetId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUsersIdUnretweets(id, sourceTweetId);

                FormatUsersIdUnretweets(ref id, ref sourceTweetId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/2/users/{id}/retweets/{source_tweet_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsource_tweet_id%7D", Uri.EscapeDataString(sourceTweetId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json",
                        "application/problem+json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UsersIdUnretweetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UsersIdUnretweetsApiResponse>();

                        UsersIdUnretweetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/2/users/{id}/retweets/{source_tweet_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUsersIdUnretweetsDefaultImplementation(apiResponseLocalVar, id, sourceTweetId);

                        Events.ExecuteOnUsersIdUnretweets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUsersIdUnretweetsDefaultImplementation(e, "/2/users/{id}/retweets/{source_tweet_id}", uriBuilderLocalVar.Path, id, sourceTweetId);
                Events.ExecuteOnErrorUsersIdUnretweets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UsersIdUnretweetsApiResponse"/>
        /// </summary>
        public partial class UsersIdUnretweetsApiResponse : Org.OpenAPITools.Client.ApiResponse, IUsersIdUnretweetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UsersIdUnretweetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UsersIdUnretweetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UsersIdUnretweetsApiResponse(ILogger<UsersIdUnretweetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UsersRetweetsDeleteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UsersRetweetsDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UsersRetweetsDeleteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Error? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Error>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out Org.OpenAPITools.Model.Error? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
