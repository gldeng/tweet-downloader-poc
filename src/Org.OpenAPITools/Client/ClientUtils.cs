/*
 * Twitter API v2
 *
 * Twitter API v2 available endpoints
 *
 * The version of the OpenAPI document: 2.128
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.IO;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Org.OpenAPITools.Model;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("Org.OpenAPITools.Test")]

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static partial class ClientUtils
    {

        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T? result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string? ParameterToString(object? obj, string? format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is DateOnly dateOnly)
                return dateOnly.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is ClientForbiddenProblem.ReasonEnum clientForbiddenProblemReasonEnum)
                return ClientForbiddenProblem.ReasonEnumToJsonValue(clientForbiddenProblemReasonEnum);
            if (obj is ComplianceJobStatus complianceJobStatus)
                return ComplianceJobStatusValueConverter.ToJsonValue(complianceJobStatus);
            if (obj is ComplianceJobType complianceJobType)
                return ComplianceJobTypeValueConverter.ToJsonValue(complianceJobType);
            if (obj is ConnectionExceptionProblem.ConnectionIssueEnum connectionExceptionProblemConnectionIssueEnum)
                return ConnectionExceptionProblem.ConnectionIssueEnumToJsonValue(connectionExceptionProblemConnectionIssueEnum);
            if (obj is CreateComplianceJobRequest.TypeEnum createComplianceJobRequestTypeEnum)
                return CreateComplianceJobRequest.TypeEnumToJsonValue(createComplianceJobRequestTypeEnum);
            if (obj is CreateDmConversationRequest.ConversationTypeEnum createDmConversationRequestConversationTypeEnum)
                return CreateDmConversationRequest.ConversationTypeEnumToJsonValue(createDmConversationRequestConversationTypeEnum);
            if (obj is DisallowedResourceProblem.ResourceTypeEnum disallowedResourceProblemResourceTypeEnum)
                return DisallowedResourceProblem.ResourceTypeEnumToJsonValue(disallowedResourceProblemResourceTypeEnum);
            if (obj is DisallowedResourceProblem.SectionEnum disallowedResourceProblemSectionEnum)
                return DisallowedResourceProblem.SectionEnumToJsonValue(disallowedResourceProblemSectionEnum);
            if (obj is FieldUnauthorizedProblem.ResourceTypeEnum fieldUnauthorizedProblemResourceTypeEnum)
                return FieldUnauthorizedProblem.ResourceTypeEnumToJsonValue(fieldUnauthorizedProblemResourceTypeEnum);
            if (obj is FieldUnauthorizedProblem.SectionEnum fieldUnauthorizedProblemSectionEnum)
                return FieldUnauthorizedProblem.SectionEnumToJsonValue(fieldUnauthorizedProblemSectionEnum);
            if (obj is Geo.TypeEnum geoTypeEnum)
                return Geo.TypeEnumToJsonValue(geoTypeEnum);
            if (obj is MediaCategorySubtitles mediaCategorySubtitles)
                return MediaCategorySubtitlesValueConverter.ToJsonValue(mediaCategorySubtitles);
            if (obj is NoteClassification noteClassification)
                return NoteClassificationValueConverter.ToJsonValue(noteClassification);
            if (obj is NoteRatingStatus noteRatingStatus)
                return NoteRatingStatusValueConverter.ToJsonValue(noteRatingStatus);
            if (obj is OperationalDisconnectProblem.DisconnectTypeEnum operationalDisconnectProblemDisconnectTypeEnum)
                return OperationalDisconnectProblem.DisconnectTypeEnumToJsonValue(operationalDisconnectProblemDisconnectTypeEnum);
            if (obj is PlaceType placeType)
                return PlaceTypeValueConverter.ToJsonValue(placeType);
            if (obj is Point.TypeEnum pointTypeEnum)
                return Point.TypeEnumToJsonValue(pointTypeEnum);
            if (obj is Poll.VotingStatusEnum pollVotingStatusEnum)
                return Poll.VotingStatusEnumToJsonValue(pollVotingStatusEnum);
            if (obj is ProcessingInfo.StateEnum processingInfoStateEnum)
                return ProcessingInfo.StateEnumToJsonValue(processingInfoStateEnum);
            if (obj is ReplySettings replySettings)
                return ReplySettingsValueConverter.ToJsonValue(replySettings);
            if (obj is ReplySettingsWithVerifiedUsers replySettingsWithVerifiedUsers)
                return ReplySettingsWithVerifiedUsersValueConverter.ToJsonValue(replySettingsWithVerifiedUsers);
            if (obj is ResourceNotFoundProblem.ResourceTypeEnum resourceNotFoundProblemResourceTypeEnum)
                return ResourceNotFoundProblem.ResourceTypeEnumToJsonValue(resourceNotFoundProblemResourceTypeEnum);
            if (obj is ResourceUnauthorizedProblem.ResourceTypeEnum resourceUnauthorizedProblemResourceTypeEnum)
                return ResourceUnauthorizedProblem.ResourceTypeEnumToJsonValue(resourceUnauthorizedProblemResourceTypeEnum);
            if (obj is ResourceUnauthorizedProblem.SectionEnum resourceUnauthorizedProblemSectionEnum)
                return ResourceUnauthorizedProblem.SectionEnumToJsonValue(resourceUnauthorizedProblemSectionEnum);
            if (obj is ResourceUnavailableProblem.ResourceTypeEnum resourceUnavailableProblemResourceTypeEnum)
                return ResourceUnavailableProblem.ResourceTypeEnumToJsonValue(resourceUnavailableProblemResourceTypeEnum);
            if (obj is Space.StateEnum spaceStateEnum)
                return Space.StateEnumToJsonValue(spaceStateEnum);
            if (obj is TweetCreateRequest.ReplySettingsEnum tweetCreateRequestReplySettingsEnum)
                return TweetCreateRequest.ReplySettingsEnumToJsonValue(tweetCreateRequestReplySettingsEnum);
            if (obj is TweetCreateRequestPoll.ReplySettingsEnum tweetCreateRequestPollReplySettingsEnum)
                return TweetCreateRequestPoll.ReplySettingsEnumToJsonValue(tweetCreateRequestPollReplySettingsEnum);
            if (obj is TweetReferencedTweetsInner.TypeEnum tweetReferencedTweetsInnerTypeEnum)
                return TweetReferencedTweetsInner.TypeEnumToJsonValue(tweetReferencedTweetsInnerTypeEnum);
            if (obj is TweetWithheld.ScopeEnum tweetWithheldScopeEnum)
                return TweetWithheld.ScopeEnumToJsonValue(tweetWithheldScopeEnum);
            if (obj is UsageCapExceededProblem.PeriodEnum usageCapExceededProblemPeriodEnum)
                return UsageCapExceededProblem.PeriodEnumToJsonValue(usageCapExceededProblemPeriodEnum);
            if (obj is UsageCapExceededProblem.ScopeEnum usageCapExceededProblemScopeEnum)
                return UsageCapExceededProblem.ScopeEnumToJsonValue(usageCapExceededProblemScopeEnum);
            if (obj is User.ConnectionStatusEnum userConnectionStatusEnum)
                return User.ConnectionStatusEnumToJsonValue(userConnectionStatusEnum);
            if (obj is User.SubscriptionTypeEnum userSubscriptionTypeEnum)
                return User.SubscriptionTypeEnumToJsonValue(userSubscriptionTypeEnum);
            if (obj is User.VerifiedTypeEnum userVerifiedTypeEnum)
                return User.VerifiedTypeEnumToJsonValue(userVerifiedTypeEnum);
            if (obj is UserWithheld.ScopeEnum userWithheldScopeEnum)
                return UserWithheld.ScopeEnumToJsonValue(userWithheldScopeEnum);
            if (obj is ICollection collection)
            {
                List<string?> entries = new();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }

            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if (input == null)
            {
                throw new ArgumentNullException("input");
            }

            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }

        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }

        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string? SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;

            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string? SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;

            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";

            return string.Join(",", accepts);
        }

        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        [GeneratedRegex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$")]
        private static partial Regex JsonRegex();

        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;

            return JsonRegex().IsMatch(mime) || mime.Equals("application/json-patch+json");
        }

        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string? GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }

            throw new JsonException("The specified discriminator was not found.");
        }

        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://api.twitter.com";

        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";

        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "";

        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "api.twitter.com";

        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}
